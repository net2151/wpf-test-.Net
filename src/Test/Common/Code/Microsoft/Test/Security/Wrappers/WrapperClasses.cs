// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.


/*******************************************************************
 *  This file contains machine generated code.  They are wrappers
 *  of CLR types that can be used without permission demands for
 *  testing within the SEE.
 *  
 *  If there are breaks in this file due to a new CLR drop, it
 *  needs to be regenerated.  To regenerate this file follow the
 *  instructions in HowToGenerate.txt in the same folder as this
 *  file.
 *  
 ******************************************************************/


namespace Microsoft.Test.Security.Wrappers
{


    /// <summary/>
    internal partial class WrapperclassesSecurityWarehouse
    {

        static System.Collections.Hashtable wrappers = new System.Collections.Hashtable();

        static WrapperclassesSecurityWarehouse()
        {

            wrappers["System.Environment"] = typeof(Microsoft.Test.Security.Wrappers.EnvironmentSW);
            wrappers["System.Threading.Timer"] = typeof(Microsoft.Test.Security.Wrappers.TimerSW);
            wrappers["System.MarshalByRefObject"] = typeof(Microsoft.Test.Security.Wrappers.MarshalByRefObjectSW);
            wrappers["System.Threading.Thread"] = typeof(Microsoft.Test.Security.Wrappers.ThreadSW);
            wrappers["System.Runtime.ConstrainedExecution.CriticalFinalizerObject"] = typeof(Microsoft.Test.Security.Wrappers.CriticalFinalizerObjectSW);
            wrappers["System.AppDomain"] = typeof(Microsoft.Test.Security.Wrappers.AppDomainSW);
            wrappers["System.AppDomainSetup"] = typeof(Microsoft.Test.Security.Wrappers.AppDomainSetupSW);
            wrappers["System.IO.Directory"] = typeof(Microsoft.Test.Security.Wrappers.DirectorySW);
            wrappers["System.IO.DirectoryInfo"] = typeof(Microsoft.Test.Security.Wrappers.DirectoryInfoSW);
            wrappers["System.IO.FileSystemInfo"] = typeof(Microsoft.Test.Security.Wrappers.FileSystemInfoSW);
            wrappers["System.IO.BinaryReader"] = typeof(Microsoft.Test.Security.Wrappers.BinaryReaderSW);
            wrappers["System.IO.BinaryWriter"] = typeof(Microsoft.Test.Security.Wrappers.BinaryWriterSW);
            wrappers["System.IO.File"] = typeof(Microsoft.Test.Security.Wrappers.FileSW);
            wrappers["System.IO.FileInfo"] = typeof(Microsoft.Test.Security.Wrappers.FileInfoSW);
            wrappers["System.IO.FileStream"] = typeof(Microsoft.Test.Security.Wrappers.FileStreamSW);
            wrappers["System.IO.Stream"] = typeof(Microsoft.Test.Security.Wrappers.StreamSW);
            wrappers["System.IO.Path"] = typeof(Microsoft.Test.Security.Wrappers.PathSW);
            wrappers["System.IO.StreamReader"] = typeof(Microsoft.Test.Security.Wrappers.StreamReaderSW);
            wrappers["System.IO.TextReader"] = typeof(Microsoft.Test.Security.Wrappers.TextReaderSW);
            wrappers["System.IO.StreamWriter"] = typeof(Microsoft.Test.Security.Wrappers.StreamWriterSW);
            wrappers["System.IO.TextWriter"] = typeof(Microsoft.Test.Security.Wrappers.TextWriterSW);
            wrappers["System.Activator"] = typeof(Microsoft.Test.Security.Wrappers.ActivatorSW);
            wrappers["System.Type"] = typeof(Microsoft.Test.Security.Wrappers.TypeSW);
            wrappers["System.Reflection.MemberInfo"] = typeof(Microsoft.Test.Security.Wrappers.MemberInfoSW);
            wrappers["System.Reflection.Assembly"] = typeof(Microsoft.Test.Security.Wrappers.AssemblySW);
            wrappers["System.Reflection.EventInfo"] = typeof(Microsoft.Test.Security.Wrappers.EventInfoSW);
            wrappers["System.Reflection.FieldInfo"] = typeof(Microsoft.Test.Security.Wrappers.FieldInfoSW);
            wrappers["System.Reflection.MethodInfo"] = typeof(Microsoft.Test.Security.Wrappers.MethodInfoSW);
            wrappers["System.Reflection.MethodBase"] = typeof(Microsoft.Test.Security.Wrappers.MethodBaseSW);
            wrappers["System.Reflection.Module"] = typeof(Microsoft.Test.Security.Wrappers.ModuleSW);
            wrappers["System.Reflection.ParameterInfo"] = typeof(Microsoft.Test.Security.Wrappers.ParameterInfoSW);
            wrappers["System.Reflection.Emit.AssemblyBuilder"] = typeof(Microsoft.Test.Security.Wrappers.AssemblyBuilderSW);
            wrappers["System.Reflection.Emit.ConstructorBuilder"] = typeof(Microsoft.Test.Security.Wrappers.ConstructorBuilderSW);
            wrappers["System.Reflection.ConstructorInfo"] = typeof(Microsoft.Test.Security.Wrappers.ConstructorInfoSW);
            wrappers["System.Reflection.Emit.EnumBuilder"] = typeof(Microsoft.Test.Security.Wrappers.EnumBuilderSW);
            wrappers["System.Reflection.Emit.EventBuilder"] = typeof(Microsoft.Test.Security.Wrappers.EventBuilderSW);
            wrappers["System.Reflection.Emit.FieldBuilder"] = typeof(Microsoft.Test.Security.Wrappers.FieldBuilderSW);
            wrappers["System.Reflection.Emit.ILGenerator"] = typeof(Microsoft.Test.Security.Wrappers.ILGeneratorSW);
            wrappers["System.Reflection.Emit.MethodBuilder"] = typeof(Microsoft.Test.Security.Wrappers.MethodBuilderSW);
            wrappers["System.Reflection.Emit.MethodRental"] = typeof(Microsoft.Test.Security.Wrappers.MethodRentalSW);
            wrappers["System.Reflection.Emit.ModuleBuilder"] = typeof(Microsoft.Test.Security.Wrappers.ModuleBuilderSW);
            wrappers["System.Reflection.Emit.ParameterBuilder"] = typeof(Microsoft.Test.Security.Wrappers.ParameterBuilderSW);
            wrappers["System.Reflection.Emit.PropertyBuilder"] = typeof(Microsoft.Test.Security.Wrappers.PropertyBuilderSW);
            wrappers["System.Reflection.PropertyInfo"] = typeof(Microsoft.Test.Security.Wrappers.PropertyInfoSW);
            wrappers["System.Reflection.Emit.TypeBuilder"] = typeof(Microsoft.Test.Security.Wrappers.TypeBuilderSW);
            wrappers["Microsoft.Win32.Registry"] = typeof(Microsoft.Test.Security.Wrappers.RegistrySW);
            wrappers["Microsoft.Win32.RegistryKey"] = typeof(Microsoft.Test.Security.Wrappers.RegistryKeySW);
            wrappers["System.Delegate"] = typeof(Microsoft.Test.Security.Wrappers.DelegateSW);
            wrappers["System.Resources.ResourceSet"] = typeof(Microsoft.Test.Security.Wrappers.ResourceSetSW);
            wrappers["System.Diagnostics.Process"] = typeof(Microsoft.Test.Security.Wrappers.ProcessSW);
            wrappers["System.ComponentModel.Component"] = typeof(Microsoft.Test.Security.Wrappers.ComponentSW);
            wrappers["System.Diagnostics.ProcessStartInfo"] = typeof(Microsoft.Test.Security.Wrappers.ProcessStartInfoSW);
            wrappers["System.Net.Sockets.Socket"] = typeof(Microsoft.Test.Security.Wrappers.SocketSW);
            wrappers["System.Drawing.Bitmap"] = typeof(Microsoft.Test.Security.Wrappers.BitmapSW);
            wrappers["System.Drawing.Image"] = typeof(Microsoft.Test.Security.Wrappers.ImageSW);
            wrappers["System.Drawing.Icon"] = typeof(Microsoft.Test.Security.Wrappers.IconSW);
            wrappers["System.Data.SqlClient.SqlCommand"] = typeof(Microsoft.Test.Security.Wrappers.SqlCommandSW);
            wrappers["System.Data.Common.DbCommand"] = typeof(Microsoft.Test.Security.Wrappers.DbCommandSW);
            wrappers["System.Data.SqlClient.SqlCommandBuilder"] = typeof(Microsoft.Test.Security.Wrappers.SqlCommandBuilderSW);
            wrappers["System.Data.Common.DbCommandBuilder"] = typeof(Microsoft.Test.Security.Wrappers.DbCommandBuilderSW);
            wrappers["System.Data.SqlClient.SqlConnection"] = typeof(Microsoft.Test.Security.Wrappers.SqlConnectionSW);
            wrappers["System.Data.Common.DbConnection"] = typeof(Microsoft.Test.Security.Wrappers.DbConnectionSW);
            wrappers["System.Data.SqlClient.SqlDataAdapter"] = typeof(Microsoft.Test.Security.Wrappers.SqlDataAdapterSW);
            wrappers["System.Data.Common.DbDataAdapter"] = typeof(Microsoft.Test.Security.Wrappers.DbDataAdapterSW);
            wrappers["System.Data.Common.DataAdapter"] = typeof(Microsoft.Test.Security.Wrappers.DataAdapterSW);
            wrappers["System.Data.SqlClient.SqlDataReader"] = typeof(Microsoft.Test.Security.Wrappers.SqlDataReaderSW);
            wrappers["System.Data.Common.DbDataReader"] = typeof(Microsoft.Test.Security.Wrappers.DbDataReaderSW);
            wrappers["System.Data.SqlClient.SqlTransaction"] = typeof(Microsoft.Test.Security.Wrappers.SqlTransactionSW);
            wrappers["System.Data.Common.DbTransaction"] = typeof(Microsoft.Test.Security.Wrappers.DbTransactionSW);
            wrappers["System.Data.OleDb.OleDbCommand"] = typeof(Microsoft.Test.Security.Wrappers.OleDbCommandSW);
            wrappers["System.Data.OleDb.OleDbCommandBuilder"] = typeof(Microsoft.Test.Security.Wrappers.OleDbCommandBuilderSW);
            wrappers["System.Data.OleDb.OleDbConnection"] = typeof(Microsoft.Test.Security.Wrappers.OleDbConnectionSW);
            wrappers["System.Data.OleDb.OleDbDataAdapter"] = typeof(Microsoft.Test.Security.Wrappers.OleDbDataAdapterSW);
            wrappers["System.Data.OleDb.OleDbDataReader"] = typeof(Microsoft.Test.Security.Wrappers.OleDbDataReaderSW);
            wrappers["System.Data.OleDb.OleDbTransaction"] = typeof(Microsoft.Test.Security.Wrappers.OleDbTransactionSW);
            wrappers["System.Xml.XmlDataDocument"] = typeof(Microsoft.Test.Security.Wrappers.XmlDataDocumentSW);
            wrappers["System.Xml.XmlDocument"] = typeof(Microsoft.Test.Security.Wrappers.XmlDocumentSW);
            wrappers["System.Xml.XmlNode"] = typeof(Microsoft.Test.Security.Wrappers.XmlNodeSW);
            wrappers["System.Data.DataSet"] = typeof(Microsoft.Test.Security.Wrappers.DataSetSW);
            wrappers["System.ComponentModel.MarshalByValueComponent"] = typeof(Microsoft.Test.Security.Wrappers.MarshalByValueComponentSW);
            wrappers["System.Xml.XmlNodeReader"] = typeof(Microsoft.Test.Security.Wrappers.XmlNodeReaderSW);
            wrappers["System.Xml.XmlReader"] = typeof(Microsoft.Test.Security.Wrappers.XmlReaderSW);
            wrappers["System.Xml.XmlTextReader"] = typeof(Microsoft.Test.Security.Wrappers.XmlTextReaderSW);
            wrappers["System.Xml.XmlTextWriter"] = typeof(Microsoft.Test.Security.Wrappers.XmlTextWriterSW);
            wrappers["System.Xml.XmlWriter"] = typeof(Microsoft.Test.Security.Wrappers.XmlWriterSW);
            wrappers["System.Xml.XPath.XPathDocument"] = typeof(Microsoft.Test.Security.Wrappers.XPathDocumentSW);
            wrappers["Microsoft.VisualBasic.Interaction"] = typeof(Microsoft.Test.Security.Wrappers.InteractionSW);
            wrappers["Microsoft.VisualBasic.FileSystem"] = typeof(Microsoft.Test.Security.Wrappers.FileSystemSW);
            wrappers["System.ServiceProcess.ServiceController"] = typeof(Microsoft.Test.Security.Wrappers.ServiceControllerSW);
            wrappers["System.Windows.Forms.SendKeys"] = typeof(Microsoft.Test.Security.Wrappers.SendKeysSW);
            wrappers["System.Windows.Forms.Form"] = typeof(Microsoft.Test.Security.Wrappers.FormSW);
            wrappers["System.Windows.Forms.ContainerControl"] = typeof(Microsoft.Test.Security.Wrappers.ContainerControlSW);
            wrappers["System.Windows.Forms.ScrollableControl"] = typeof(Microsoft.Test.Security.Wrappers.ScrollableControlSW);
            wrappers["System.Windows.Forms.Control"] = typeof(Microsoft.Test.Security.Wrappers.ControlSW);
            // Needed for v4.0 only, but there's nothing 2.0/4.0 specific about an entry in a hashtable
            wrappers["System.Reflection.RuntimeAssembly"] = typeof(Microsoft.Test.Security.Wrappers.AssemblySW);

            #if TESTBUILD_CLR40
            Initialize40();
            #endif

        }

        /// <summary/>
        public static object Wrap(object o)
        {
            if (o == null)
                return o;
            System.Type typ = o.GetType();
            System.Type wrappedTyp = null;
            if (typ.IsArray)
            {
                System.Type itemType = typ.Assembly.GetType(typ.FullName.TrimEnd('[', ',', ']'));
                wrappedTyp = wrappers[itemType.FullName] as System.Type;
                if (wrappedTyp == null)
                    return o;
                System.Array arr = System.Array.CreateInstance(wrappedTyp, ((System.Array)o).Length);
                for (int i = 0; i < arr.Length; i++)
                    arr.SetValue(Wrap(((System.Array)o).GetValue(i)), i);
                return arr;
            }

            while (typ != null && wrappedTyp == null)
            {
                wrappedTyp = (System.Type)wrappers[typ.FullName];
                if (wrappedTyp == null)
                    typ = typ.BaseType;
            }
            if (wrappedTyp == null)
                return o;

            System.Reflection.MethodInfo mInfo = wrappedTyp.GetMethod("Wrap", System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public, null, new System.Type[] { typ }, null);
            return mInfo.Invoke(null, new object[] { o });
        }

    }


    /// <summary>Security Wrapper for Type: System.Environment</summary>
    [System.CLSCompliant(false)]
    public static class EnvironmentSW : System.Object
    {

        /// <summary/>
        public static System.Int32 TickCount
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Environment.TickCount; }
        }
        /// <summary/>
        public static System.Int32 ExitCode
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Environment.ExitCode; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); System.Environment.ExitCode = value; }
        }
        /// <summary/>
        public static System.String CommandLine
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Environment.CommandLine; }
        }
        /// <summary/>
        public static System.String CurrentDirectory
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Environment.CurrentDirectory; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); System.Environment.CurrentDirectory = value; }
        }
        /// <summary/>
        public static System.String SystemDirectory
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Environment.SystemDirectory; }
        }
        /// <summary/>
        public static System.String MachineName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Environment.MachineName; }
        }
        /// <summary/>
        public static System.Int32 ProcessorCount
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Environment.ProcessorCount; }
        }
        /// <summary/>
        public static System.String NewLine
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Environment.NewLine; }
        }
        /// <summary/>
        public static System.Version Version
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Environment.Version; }
        }
        /// <summary/>
        public static System.Int64 WorkingSet
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Environment.WorkingSet; }
        }
        /// <summary/>
        public static System.OperatingSystem OSVersion
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Environment.OSVersion; }
        }
        /// <summary/>
        public static System.String StackTrace
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Environment.StackTrace; }
        }
        /// <summary/>
        public static System.Boolean HasShutdownStarted
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Environment.HasShutdownStarted; }
        }
        /// <summary/>
        public static System.String UserName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Environment.UserName; }
        }
        /// <summary/>
        public static System.Boolean UserInteractive
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Environment.UserInteractive; }
        }
        /// <summary/>
        public static System.String UserDomainName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Environment.UserDomainName; }
        }
        /// <summary/>
        public static void FailFast(System.String message)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Environment.FailFast(message);
        }

        /// <summary/>
        public static System.String GetEnvironmentVariable(System.String variable)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Environment.GetEnvironmentVariable(variable);
        }

        /// <summary/>
        public static void SetEnvironmentVariable(System.String variable, System.String value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Environment.SetEnvironmentVariable(variable, value);
        }

        /// <summary/>
        public static void Exit(System.Int32 exitCode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Environment.Exit(exitCode);
        }

        /// <summary/>
        public static System.String ExpandEnvironmentVariables(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Environment.ExpandEnvironmentVariables(name);
        }

        /// <summary/>
        public static System.String[] GetCommandLineArgs()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Environment.GetCommandLineArgs();
        }

        /// <summary/>
        public static System.String GetEnvironmentVariable(System.String variable, System.EnvironmentVariableTarget target)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Environment.GetEnvironmentVariable(variable, target);
        }

        /// <summary/>
        public static System.Collections.IDictionary GetEnvironmentVariables()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Environment.GetEnvironmentVariables();
        }

        /// <summary/>
        public static System.Collections.IDictionary GetEnvironmentVariables(System.EnvironmentVariableTarget target)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Environment.GetEnvironmentVariables(target);
        }

        /// <summary/>
        public static void SetEnvironmentVariable(System.String variable, System.String value, System.EnvironmentVariableTarget target)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Environment.SetEnvironmentVariable(variable, value, target);
        }

        /// <summary/>
        public static System.String[] GetLogicalDrives()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Environment.GetLogicalDrives();
        }

        /// <summary/>
        public static System.String GetFolderPath(System.Environment.SpecialFolder folder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Environment.GetFolderPath(folder);
        }


    }

    /// <summary>Security Wrapper for Type: System.Threading.Timer</summary>
    [System.CLSCompliant(false)]
    public class TimerSW : Microsoft.Test.Security.Wrappers.MarshalByRefObjectSW, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.TimerSW Wrap(System.Threading.Timer o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.TimerSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Threading.Timer InnerObject
        {
            get { return innerObject as System.Threading.Timer; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal TimerSW(System.Threading.Timer o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal TimerSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public TimerSW(System.Threading.TimerCallback callback, System.Object state, System.Int32 dueTime, System.Int32 period)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Threading.Timer(callback, state, dueTime, period);
        }

        /// <summary/>
        public TimerSW(System.Threading.TimerCallback callback, System.Object state, System.TimeSpan dueTime, System.TimeSpan period)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Threading.Timer(callback, state, dueTime, period);
        }

        /// <summary/>
        public TimerSW(System.Threading.TimerCallback callback, System.Object state, System.Int64 dueTime, System.Int64 period)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Threading.Timer(callback, state, dueTime, period);
        }

        /// <summary/>
        public TimerSW(System.Threading.TimerCallback callback, System.Object state, System.UInt32 dueTime, System.UInt32 period)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Threading.Timer(callback, state, dueTime, period);
        }

        /// <summary/>
        public TimerSW(System.Threading.TimerCallback callback)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Threading.Timer(callback);
        }

        /// <summary/>
        public System.Boolean Change(System.Int32 dueTime, System.Int32 period)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Change(dueTime, period);
        }

        /// <summary/>
        public System.Boolean Change(System.TimeSpan dueTime, System.TimeSpan period)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Change(dueTime, period);
        }

        /// <summary/>
        public System.Boolean Change(System.UInt32 dueTime, System.UInt32 period)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Change(dueTime, period);
        }

        /// <summary/>
        public System.Boolean Change(System.Int64 dueTime, System.Int64 period)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Change(dueTime, period);
        }

        /// <summary/>
        public System.Boolean Dispose(System.Threading.WaitHandle notifyObject)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Dispose(notifyObject);
        }

        /// <summary/>
        public virtual void Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Dispose();
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.MarshalByRefObject</summary>
    [System.CLSCompliant(false)]
    public class MarshalByRefObjectSW : System.Object
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.MarshalByRefObjectSW Wrap(System.MarshalByRefObject o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.MarshalByRefObjectSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.MarshalByRefObject InnerObject
        {
            get { return innerObject as System.MarshalByRefObject; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal MarshalByRefObjectSW(System.MarshalByRefObject o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal MarshalByRefObjectSW(System.DayOfWeek day) { }

        /// <summary/>
        protected MarshalByRefObjectSW()
        {
        }

        /// <summary/>
        public virtual System.Object GetLifetimeService()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetLifetimeService();
        }

        /// <summary/>
        public virtual System.Object InitializeLifetimeService()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.InitializeLifetimeService();
        }

        /// <summary/>
        public virtual System.Runtime.Remoting.ObjRef CreateObjRef(System.Type requestedType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateObjRef(requestedType);
        }


    }

    /// <summary>Security Wrapper for Type: System.Threading.Thread</summary>
    [System.CLSCompliant(false)]
    public class ThreadSW : Microsoft.Test.Security.Wrappers.CriticalFinalizerObjectSW, System.Runtime.InteropServices._Thread
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ThreadSW Wrap(System.Threading.Thread o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ThreadSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Threading.Thread InnerObject
        {
            get { return innerObject as System.Threading.Thread; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ThreadSW(System.Threading.Thread o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ThreadSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public ThreadSW(System.Threading.ThreadStart start)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Threading.Thread(start);
        }

        /// <summary/>
        public ThreadSW(System.Threading.ThreadStart start, System.Int32 maxStackSize)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Threading.Thread(start, maxStackSize);
        }

        /// <summary/>
        public ThreadSW(System.Threading.ParameterizedThreadStart start)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Threading.Thread(start);
        }

        /// <summary/>
        public ThreadSW(System.Threading.ParameterizedThreadStart start, System.Int32 maxStackSize)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Threading.Thread(start, maxStackSize);
        }

        /// <summary/>
        public System.Int32 ManagedThreadId
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ManagedThreadId; }
        }
        /// <summary/>
        public System.Threading.ExecutionContext ExecutionContext
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ExecutionContext; }
        }
        /// <summary/>
        public System.Threading.ThreadPriority Priority
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Priority; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Priority = value; }
        }
        /// <summary/>
        public System.Boolean IsAlive
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsAlive; }
        }
        /// <summary/>
        public System.Boolean IsThreadPoolThread
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsThreadPoolThread; }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ThreadSW CurrentThread
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ThreadSW)WrapperclassesSecurityWarehouse.Wrap(System.Threading.Thread.CurrentThread); }
        }
        /// <summary/>
        public System.Boolean IsBackground
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsBackground; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.IsBackground = value; }
        }
        /// <summary/>
        public System.Threading.ThreadState ThreadState
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ThreadState; }
        }
        /// <summary/>
        public System.Globalization.CultureInfo CurrentUICulture
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CurrentUICulture; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CurrentUICulture = value; }
        }
        /// <summary/>
        public System.Globalization.CultureInfo CurrentCulture
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CurrentCulture; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CurrentCulture = value; }
        }
        /// <summary/>
        public static System.Runtime.Remoting.Contexts.Context CurrentContext
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Threading.Thread.CurrentContext; }
        }
        /// <summary/>
        public static System.Security.Principal.IPrincipal CurrentPrincipal
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Threading.Thread.CurrentPrincipal; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); System.Threading.Thread.CurrentPrincipal = value; }
        }
        /// <summary/>
        public System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Name = value; }
        }
        /// <summary/>
        public override System.Int32 GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetHashCode();
        }

        /// <summary/>
        public static void BeginCriticalRegion()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.BeginCriticalRegion();
        }

        /// <summary/>
        public static void EndCriticalRegion()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.EndCriticalRegion();
        }

        /// <summary/>
        public static void BeginThreadAffinity()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.BeginThreadAffinity();
        }

        /// <summary/>
        public static void EndThreadAffinity()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.EndThreadAffinity();
        }

        /// <summary/>
        public static void MemoryBarrier()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.MemoryBarrier();
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AppDomainSW GetDomain()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AppDomainSW)WrapperclassesSecurityWarehouse.Wrap(System.Threading.Thread.GetDomain());
        }

        /// <summary/>
        public void Start()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Start();
        }

        /// <summary/>
        public void Start(System.Object parameter)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Start(parameter);
        }

        /// <summary/>
        public void Abort(System.Object stateInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Abort(stateInfo);
        }

        /// <summary/>
        public void Abort()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Abort();
        }

        /// <summary/>
        public static void ResetAbort()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.ResetAbort();
        }

        /// <summary/>
        public void Interrupt()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Interrupt();
        }

        /// <summary/>
        public void Join()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Join();
        }

        /// <summary/>
        public System.Boolean Join(System.Int32 millisecondsTimeout)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Join(millisecondsTimeout);
        }

        /// <summary/>
        public System.Boolean Join(System.TimeSpan timeout)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Join(timeout);
        }

        /// <summary/>
        public static void Sleep(System.Int32 millisecondsTimeout)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.Sleep(millisecondsTimeout);
        }

        /// <summary/>
        public static void Sleep(System.TimeSpan timeout)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.Sleep(timeout);
        }

        /// <summary/>
        public static void SpinWait(System.Int32 iterations)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.SpinWait(iterations);
        }

        /// <summary/>
        public System.Threading.ApartmentState GetApartmentState()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetApartmentState();
        }

        /// <summary/>
        public System.Boolean TrySetApartmentState(System.Threading.ApartmentState state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.TrySetApartmentState(state);
        }

        /// <summary/>
        public void SetApartmentState(System.Threading.ApartmentState state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetApartmentState(state);
        }

        /// <summary/>
        public static System.LocalDataStoreSlot AllocateDataSlot()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.AllocateDataSlot();
        }

        /// <summary/>
        public static System.LocalDataStoreSlot AllocateNamedDataSlot(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.AllocateNamedDataSlot(name);
        }

        /// <summary/>
        public static System.LocalDataStoreSlot GetNamedDataSlot(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.GetNamedDataSlot(name);
        }

        /// <summary/>
        public static void FreeNamedDataSlot(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.FreeNamedDataSlot(name);
        }

        /// <summary/>
        public static System.Object GetData(System.LocalDataStoreSlot slot)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.GetData(slot);
        }

        /// <summary/>
        public static void SetData(System.LocalDataStoreSlot slot, System.Object data)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.SetData(slot, data);
        }

        /// <summary/>
        public static System.Int32 GetDomainID()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.GetDomainID();
        }

        /// <summary/>
        public static System.Byte VolatileRead(ref System.Byte address)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.VolatileRead(ref address);
        }

        /// <summary/>
        public static System.Int16 VolatileRead(ref System.Int16 address)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.VolatileRead(ref address);
        }

        /// <summary/>
        public static System.Int32 VolatileRead(ref System.Int32 address)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.VolatileRead(ref address);
        }

        /// <summary/>
        public static System.Int64 VolatileRead(ref System.Int64 address)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.VolatileRead(ref address);
        }

        /// <summary/>
        public static System.SByte VolatileRead(ref System.SByte address)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.VolatileRead(ref address);
        }

        /// <summary/>
        public static System.UInt16 VolatileRead(ref System.UInt16 address)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.VolatileRead(ref address);
        }

        /// <summary/>
        public static System.UInt32 VolatileRead(ref System.UInt32 address)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.VolatileRead(ref address);
        }

        /// <summary/>
        public static System.IntPtr VolatileRead(ref System.IntPtr address)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.VolatileRead(ref address);
        }

        /// <summary/>
        public static System.UIntPtr VolatileRead(ref System.UIntPtr address)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.VolatileRead(ref address);
        }

        /// <summary/>
        public static System.UInt64 VolatileRead(ref System.UInt64 address)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.VolatileRead(ref address);
        }

        /// <summary/>
        public static System.Single VolatileRead(ref System.Single address)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.VolatileRead(ref address);
        }

        /// <summary/>
        public static System.Double VolatileRead(ref System.Double address)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.VolatileRead(ref address);
        }

        /// <summary/>
        public static System.Object VolatileRead(ref System.Object address)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Threading.Thread.VolatileRead(ref address);
        }

        /// <summary/>
        public static void VolatileWrite(ref System.Byte address, System.Byte value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.VolatileWrite(ref address, value);
        }

        /// <summary/>
        public static void VolatileWrite(ref System.Int16 address, System.Int16 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.VolatileWrite(ref address, value);
        }

        /// <summary/>
        public static void VolatileWrite(ref System.Int32 address, System.Int32 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.VolatileWrite(ref address, value);
        }

        /// <summary/>
        public static void VolatileWrite(ref System.Int64 address, System.Int64 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.VolatileWrite(ref address, value);
        }

        /// <summary/>
        public static void VolatileWrite(ref System.SByte address, System.SByte value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.VolatileWrite(ref address, value);
        }

        /// <summary/>
        public static void VolatileWrite(ref System.UInt16 address, System.UInt16 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.VolatileWrite(ref address, value);
        }

        /// <summary/>
        public static void VolatileWrite(ref System.UInt32 address, System.UInt32 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.VolatileWrite(ref address, value);
        }

        /// <summary/>
        public static void VolatileWrite(ref System.IntPtr address, System.IntPtr value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.VolatileWrite(ref address, value);
        }

        /// <summary/>
        public static void VolatileWrite(ref System.UIntPtr address, System.UIntPtr value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.VolatileWrite(ref address, value);
        }

        /// <summary/>
        public static void VolatileWrite(ref System.UInt64 address, System.UInt64 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.VolatileWrite(ref address, value);
        }

        /// <summary/>
        public static void VolatileWrite(ref System.Single address, System.Single value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.VolatileWrite(ref address, value);
        }

        /// <summary/>
        public static void VolatileWrite(ref System.Double address, System.Double value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.VolatileWrite(ref address, value);
        }

        /// <summary/>
        public static void VolatileWrite(ref System.Object address, System.Object value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Threading.Thread.VolatileWrite(ref address, value);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Thread.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Thread)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Thread.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Thread)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Thread.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Thread)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Thread.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Thread)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }


    }

    /// <summary>Security Wrapper for Type: System.Runtime.ConstrainedExecution.CriticalFinalizerObject</summary>
    [System.CLSCompliant(false)]
    public class CriticalFinalizerObjectSW : System.Object
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.CriticalFinalizerObjectSW Wrap(System.Runtime.ConstrainedExecution.CriticalFinalizerObject o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.CriticalFinalizerObjectSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Runtime.ConstrainedExecution.CriticalFinalizerObject InnerObject
        {
            get { return innerObject as System.Runtime.ConstrainedExecution.CriticalFinalizerObject; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal CriticalFinalizerObjectSW(System.Runtime.ConstrainedExecution.CriticalFinalizerObject o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal CriticalFinalizerObjectSW(System.DayOfWeek day) { }

        /// <summary/>
        protected CriticalFinalizerObjectSW()
        {
        }


    }

    /// <summary>Security Wrapper for Type: System.AppDomain</summary>
    [System.CLSCompliant(false)]
    public class AppDomainSW : Microsoft.Test.Security.Wrappers.MarshalByRefObjectSW, System._AppDomain, System.Security.IEvidenceFactory
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.AppDomainSW Wrap(System.AppDomain o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.AppDomainSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.AppDomain InnerObject
        {
            get { return innerObject as System.AppDomain; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal AppDomainSW(System.AppDomain o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal AppDomainSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public System.AppDomainManager DomainManager
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DomainManager; }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AppDomainSW CurrentDomain
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.AppDomainSW)WrapperclassesSecurityWarehouse.Wrap(System.AppDomain.CurrentDomain); }
        }
        /// <summary/>
        public virtual System.Security.Policy.Evidence Evidence
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Evidence; }
        }
        /// <summary/>
        public virtual System.String FriendlyName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FriendlyName; }
        }
        /// <summary/>
        public virtual System.String BaseDirectory
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.BaseDirectory; }
        }
        /// <summary/>
        public virtual System.String RelativeSearchPath
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.RelativeSearchPath; }
        }
        /// <summary/>
        public virtual System.Boolean ShadowCopyFiles
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ShadowCopyFiles; }
        }
        /// <summary/>
        public System.ActivationContext ActivationContext
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ActivationContext; }
        }
        /// <summary/>
        public System.ApplicationIdentity ApplicationIdentity
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ApplicationIdentity; }
        }
        /// <summary/>
        public System.Security.Policy.ApplicationTrust ApplicationTrust
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ApplicationTrust; }
        }
        /// <summary/>
        public virtual System.String DynamicDirectory
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DynamicDirectory; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.AppDomainSetupSW SetupInformation
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.AppDomainSetupSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.SetupInformation); }
        }
        /// <summary/>
        public System.Int32 Id
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Id; }
        }
        /// <summary/>
        public System.Boolean IsFinalizingForUnload()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsFinalizingForUnload();
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.TypeSW GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetType());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblyBuilderSW DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblyBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineDynamicAssembly(name, access));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblyBuilderSW DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.String dir)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblyBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineDynamicAssembly(name, access, dir));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblyBuilderSW DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.Policy.Evidence evidence)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblyBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineDynamicAssembly(name, access, evidence));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblyBuilderSW DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblyBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineDynamicAssembly(name, access, requiredPermissions, optionalPermissions, refusedPermissions));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblyBuilderSW DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.String dir, System.Security.Policy.Evidence evidence)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblyBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineDynamicAssembly(name, access, dir, evidence));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblyBuilderSW DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.String dir, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblyBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineDynamicAssembly(name, access, dir, requiredPermissions, optionalPermissions, refusedPermissions));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblyBuilderSW DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblyBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineDynamicAssembly(name, access, evidence, requiredPermissions, optionalPermissions, refusedPermissions));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblyBuilderSW DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.String dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblyBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineDynamicAssembly(name, access, dir, evidence, requiredPermissions, optionalPermissions, refusedPermissions));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblyBuilderSW DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.String dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions, System.Boolean isSynchronized)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblyBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineDynamicAssembly(name, access, dir, evidence, requiredPermissions, optionalPermissions, refusedPermissions, isSynchronized));
        }

        /// <summary/>
        public System.String ApplyPolicy(System.String assemblyName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ApplyPolicy(assemblyName);
        }

        /// <summary/>
        public virtual System.Runtime.Remoting.ObjectHandle CreateInstance(System.String assemblyName, System.String typeName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateInstance(assemblyName, typeName);
        }

        /// <summary/>
        public virtual System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(System.String assemblyFile, System.String typeName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateInstanceFrom(assemblyFile, typeName);
        }

        /// <summary/>
        public System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom(System.String assemblyName, System.String typeName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateComInstanceFrom(assemblyName, typeName);
        }

        /// <summary/>
        public System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom(System.String assemblyFile, System.String typeName, System.Byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateComInstanceFrom(assemblyFile, typeName, hashValue, hashAlgorithm);
        }

        /// <summary/>
        public virtual System.Runtime.Remoting.ObjectHandle CreateInstance(System.String assemblyName, System.String typeName, System.Object[] activationAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateInstance(assemblyName, typeName, activationAttributes);
        }

        /// <summary/>
        public virtual System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(System.String assemblyFile, System.String typeName, System.Object[] activationAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateInstanceFrom(assemblyFile, typeName, activationAttributes);
        }

        /// <summary/>
        public virtual System.Runtime.Remoting.ObjectHandle CreateInstance(System.String assemblyName, System.String typeName, System.Boolean ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture, System.Object[] activationAttributes, System.Security.Policy.Evidence securityAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateInstance(assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes);
        }

        /// <summary/>
        public virtual System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(System.String assemblyFile, System.String typeName, System.Boolean ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture, System.Object[] activationAttributes, System.Security.Policy.Evidence securityAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateInstanceFrom(assemblyFile, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes);
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblySW Load(System.Reflection.AssemblyName assemblyRef)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Load(assemblyRef));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblySW Load(System.String assemblyString)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Load(assemblyString));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblySW Load(System.Byte[] rawAssembly)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Load(rawAssembly));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblySW Load(System.Byte[] rawAssembly, System.Byte[] rawSymbolStore)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Load(rawAssembly, rawSymbolStore));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblySW Load(System.Byte[] rawAssembly, System.Byte[] rawSymbolStore, System.Security.Policy.Evidence securityEvidence)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Load(rawAssembly, rawSymbolStore, securityEvidence));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblySW Load(System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Load(assemblyRef, assemblySecurity));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblySW Load(System.String assemblyString, System.Security.Policy.Evidence assemblySecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Load(assemblyString, assemblySecurity));
        }

        /// <summary/>
        public virtual System.Int32 ExecuteAssembly(System.String assemblyFile)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ExecuteAssembly(assemblyFile);
        }

        /// <summary/>
        public virtual System.Int32 ExecuteAssembly(System.String assemblyFile, System.Security.Policy.Evidence assemblySecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ExecuteAssembly(assemblyFile, assemblySecurity);
        }

        /// <summary/>
        public virtual System.Int32 ExecuteAssembly(System.String assemblyFile, System.Security.Policy.Evidence assemblySecurity, System.String[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ExecuteAssembly(assemblyFile, assemblySecurity, args);
        }

        /// <summary/>
        public System.Int32 ExecuteAssembly(System.String assemblyFile, System.Security.Policy.Evidence assemblySecurity, System.String[] args, System.Byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ExecuteAssembly(assemblyFile, assemblySecurity, args, hashValue, hashAlgorithm);
        }

        /// <summary/>
        public System.Int32 ExecuteAssemblyByName(System.String assemblyName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ExecuteAssemblyByName(assemblyName);
        }

        /// <summary/>
        public System.Int32 ExecuteAssemblyByName(System.String assemblyName, System.Security.Policy.Evidence assemblySecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ExecuteAssemblyByName(assemblyName, assemblySecurity);
        }

        /// <summary/>
        public System.Int32 ExecuteAssemblyByName(System.String assemblyName, System.Security.Policy.Evidence assemblySecurity, System.String[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ExecuteAssemblyByName(assemblyName, assemblySecurity, args);
        }

        /// <summary/>
        public System.Int32 ExecuteAssemblyByName(System.Reflection.AssemblyName assemblyName, System.Security.Policy.Evidence assemblySecurity, System.String[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ExecuteAssemblyByName(assemblyName, assemblySecurity, args);
        }

        /// <summary/>
        public override System.String ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ToString();
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblySW[] GetAssemblies()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetAssemblies());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.AssemblySW[] ReflectionOnlyGetAssemblies()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.ReflectionOnlyGetAssemblies());
        }

        /// <summary/>
        public virtual void SetData(System.String name, System.Object data)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetData(name, data);
        }

        /// <summary/>
        public void SetData(System.String name, System.Object data, System.Security.IPermission permission)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetData(name, data, permission);
        }

        /// <summary/>
        public virtual System.Object GetData(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetData(name);
        }

        /// <summary/>
        public static void Unload(System.AppDomain domain)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.AppDomain.Unload(domain);
        }

        /// <summary/>
        public virtual void SetAppDomainPolicy(System.Security.Policy.PolicyLevel domainPolicy)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetAppDomainPolicy(domainPolicy);
        }

        /// <summary/>
        public virtual void SetThreadPrincipal(System.Security.Principal.IPrincipal principal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetThreadPrincipal(principal);
        }

        /// <summary/>
        public virtual void SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy policy)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetPrincipalPolicy(policy);
        }

        /// <summary/>
        public override System.Object InitializeLifetimeService()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.InitializeLifetimeService();
        }

        /// <summary/>
        public virtual void DoCallBack(System.CrossAppDomainDelegate callBackDelegate)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.DoCallBack(callBackDelegate);
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AppDomainSW CreateDomain(System.String friendlyName, System.Security.Policy.Evidence securityInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AppDomainSW)WrapperclassesSecurityWarehouse.Wrap(System.AppDomain.CreateDomain(friendlyName, securityInfo));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AppDomainSW CreateDomain(System.String friendlyName, System.Security.Policy.Evidence securityInfo, System.String appBasePath, System.String appRelativeSearchPath, System.Boolean shadowCopyFiles)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AppDomainSW)WrapperclassesSecurityWarehouse.Wrap(System.AppDomain.CreateDomain(friendlyName, securityInfo, appBasePath, appRelativeSearchPath, shadowCopyFiles));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AppDomainSW CreateDomain(System.String friendlyName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AppDomainSW)WrapperclassesSecurityWarehouse.Wrap(System.AppDomain.CreateDomain(friendlyName));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AppDomainSW CreateDomain(System.String friendlyName, System.Security.Policy.Evidence securityInfo, System.AppDomainSetup info)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AppDomainSW)WrapperclassesSecurityWarehouse.Wrap(System.AppDomain.CreateDomain(friendlyName, securityInfo, info));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AppDomainSW CreateDomain(System.String friendlyName, System.Security.Policy.Evidence securityInfo, System.AppDomainSetup info, System.Security.PermissionSet grantSet, System.Security.Policy.StrongName[] fullTrustAssemblies)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AppDomainSW)WrapperclassesSecurityWarehouse.Wrap(System.AppDomain.CreateDomain(friendlyName, securityInfo, info, grantSet, fullTrustAssemblies));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AppDomainSW CreateDomain(System.String friendlyName, System.Security.Policy.Evidence securityInfo, System.String appBasePath, System.String appRelativeSearchPath, System.Boolean shadowCopyFiles, System.AppDomainInitializer adInit, System.String[] adInitArgs)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AppDomainSW)WrapperclassesSecurityWarehouse.Wrap(System.AppDomain.CreateDomain(friendlyName, securityInfo, appBasePath, appRelativeSearchPath, shadowCopyFiles, adInit, adInitArgs));
        }

        /// <summary/>
        public System.Object CreateInstanceAndUnwrap(System.String assemblyName, System.String typeName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateInstanceAndUnwrap(assemblyName, typeName);
        }

        /// <summary/>
        public System.Object CreateInstanceAndUnwrap(System.String assemblyName, System.String typeName, System.Object[] activationAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateInstanceAndUnwrap(assemblyName, typeName, activationAttributes);
        }

        /// <summary/>
        public System.Object CreateInstanceAndUnwrap(System.String assemblyName, System.String typeName, System.Boolean ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture, System.Object[] activationAttributes, System.Security.Policy.Evidence securityAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateInstanceAndUnwrap(assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes);
        }

        /// <summary/>
        public System.Object CreateInstanceFromAndUnwrap(System.String assemblyName, System.String typeName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateInstanceFromAndUnwrap(assemblyName, typeName);
        }

        /// <summary/>
        public System.Object CreateInstanceFromAndUnwrap(System.String assemblyName, System.String typeName, System.Object[] activationAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateInstanceFromAndUnwrap(assemblyName, typeName, activationAttributes);
        }

        /// <summary/>
        public System.Object CreateInstanceFromAndUnwrap(System.String assemblyName, System.String typeName, System.Boolean ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture, System.Object[] activationAttributes, System.Security.Policy.Evidence securityAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateInstanceFromAndUnwrap(assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes);
        }

        /// <summary/>
        public System.Boolean IsDefaultAppDomain()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsDefaultAppDomain();
        }

        /// <summary/>
        public virtual event System.AssemblyLoadEventHandler AssemblyLoad
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AssemblyLoad += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AssemblyLoad -= value; }
        }

        /// <summary/>
        public virtual event System.ResolveEventHandler TypeResolve
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TypeResolve += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TypeResolve -= value; }
        }

        /// <summary/>
        public virtual event System.ResolveEventHandler ResourceResolve
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ResourceResolve += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ResourceResolve -= value; }
        }

        /// <summary/>
        public virtual event System.ResolveEventHandler AssemblyResolve
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AssemblyResolve += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AssemblyResolve -= value; }
        }

        /// <summary/>
        public event System.ResolveEventHandler ReflectionOnlyAssemblyResolve
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ReflectionOnlyAssemblyResolve += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ReflectionOnlyAssemblyResolve -= value; }
        }

        /// <summary/>
        public virtual event System.EventHandler ProcessExit
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ProcessExit += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ProcessExit -= value; }
        }

        /// <summary/>
        public virtual event System.EventHandler DomainUnload
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DomainUnload += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DomainUnload -= value; }
        }

        /// <summary/>
        public virtual event System.UnhandledExceptionEventHandler UnhandledException
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.UnhandledException += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.UnhandledException -= value; }
        }

        /// <summary/>
        void System._AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal principal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System._AppDomain)InnerObject).SetThreadPrincipal(principal);
        }

        /// <summary/>
        void System._AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy policy)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System._AppDomain)InnerObject).SetPrincipalPolicy(policy);
        }

        /// <summary/>
        void System._AppDomain.DoCallBack(System.CrossAppDomainDelegate theDelegate)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System._AppDomain)InnerObject).DoCallBack(theDelegate);
        }

        /// <summary/>
        void System._AppDomain.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System._AppDomain)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System._AppDomain.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System._AppDomain)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System._AppDomain.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System._AppDomain)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System._AppDomain.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System._AppDomain)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System._AppDomain.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System._AppDomain.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System._AppDomain.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System._AppDomain.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).GetType();
        }

        /// <summary/>
        System.Object System._AppDomain.InitializeLifetimeService()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).InitializeLifetimeService();
        }

        /// <summary/>
        System.Object System._AppDomain.GetLifetimeService()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).GetLifetimeService();
        }

        /// <summary/>
        System.Reflection.Emit.AssemblyBuilder System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).DefineDynamicAssembly(name, access);
        }

        /// <summary/>
        System.Reflection.Emit.AssemblyBuilder System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.String dir)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).DefineDynamicAssembly(name, access, dir);
        }

        /// <summary/>
        System.Reflection.Emit.AssemblyBuilder System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.Policy.Evidence evidence)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).DefineDynamicAssembly(name, access, evidence);
        }

        /// <summary/>
        System.Reflection.Emit.AssemblyBuilder System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).DefineDynamicAssembly(name, access, requiredPermissions, optionalPermissions, refusedPermissions);
        }

        /// <summary/>
        System.Reflection.Emit.AssemblyBuilder System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.String dir, System.Security.Policy.Evidence evidence)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).DefineDynamicAssembly(name, access, dir, evidence);
        }

        /// <summary/>
        System.Reflection.Emit.AssemblyBuilder System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.String dir, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).DefineDynamicAssembly(name, access, dir, requiredPermissions, optionalPermissions, refusedPermissions);
        }

        /// <summary/>
        System.Reflection.Emit.AssemblyBuilder System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).DefineDynamicAssembly(name, access, evidence, requiredPermissions, optionalPermissions, refusedPermissions);
        }

        /// <summary/>
        System.Reflection.Emit.AssemblyBuilder System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.String dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).DefineDynamicAssembly(name, access, dir, evidence, requiredPermissions, optionalPermissions, refusedPermissions);
        }

        /// <summary/>
        System.Reflection.Emit.AssemblyBuilder System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.String dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions, System.Boolean isSynchronized)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).DefineDynamicAssembly(name, access, dir, evidence, requiredPermissions, optionalPermissions, refusedPermissions, isSynchronized);
        }

        /// <summary/>
        System.Runtime.Remoting.ObjectHandle System._AppDomain.CreateInstance(System.String assemblyName, System.String typeName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).CreateInstance(assemblyName, typeName);
        }

        /// <summary/>
        System.Runtime.Remoting.ObjectHandle System._AppDomain.CreateInstanceFrom(System.String assemblyFile, System.String typeName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).CreateInstanceFrom(assemblyFile, typeName);
        }

        /// <summary/>
        System.Runtime.Remoting.ObjectHandle System._AppDomain.CreateInstance(System.String assemblyName, System.String typeName, System.Object[] activationAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).CreateInstance(assemblyName, typeName, activationAttributes);
        }

        /// <summary/>
        System.Runtime.Remoting.ObjectHandle System._AppDomain.CreateInstanceFrom(System.String assemblyFile, System.String typeName, System.Object[] activationAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).CreateInstanceFrom(assemblyFile, typeName, activationAttributes);
        }

        /// <summary/>
        System.Runtime.Remoting.ObjectHandle System._AppDomain.CreateInstance(System.String assemblyName, System.String typeName, System.Boolean ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture, System.Object[] activationAttributes, System.Security.Policy.Evidence securityAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).CreateInstance(assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes);
        }

        /// <summary/>
        System.Runtime.Remoting.ObjectHandle System._AppDomain.CreateInstanceFrom(System.String assemblyFile, System.String typeName, System.Boolean ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture, System.Object[] activationAttributes, System.Security.Policy.Evidence securityAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).CreateInstanceFrom(assemblyFile, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes);
        }

        /// <summary/>
        System.Reflection.Assembly System._AppDomain.Load(System.Reflection.AssemblyName assemblyRef)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).Load(assemblyRef);
        }

        /// <summary/>
        System.Reflection.Assembly System._AppDomain.Load(System.String assemblyString)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).Load(assemblyString);
        }

        /// <summary/>
        System.Reflection.Assembly System._AppDomain.Load(System.Byte[] rawAssembly)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).Load(rawAssembly);
        }

        /// <summary/>
        System.Reflection.Assembly System._AppDomain.Load(System.Byte[] rawAssembly, System.Byte[] rawSymbolStore)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).Load(rawAssembly, rawSymbolStore);
        }

        /// <summary/>
        System.Reflection.Assembly System._AppDomain.Load(System.Byte[] rawAssembly, System.Byte[] rawSymbolStore, System.Security.Policy.Evidence securityEvidence)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).Load(rawAssembly, rawSymbolStore, securityEvidence);
        }

        /// <summary/>
        System.Reflection.Assembly System._AppDomain.Load(System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).Load(assemblyRef, assemblySecurity);
        }

        /// <summary/>
        System.Reflection.Assembly System._AppDomain.Load(System.String assemblyString, System.Security.Policy.Evidence assemblySecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).Load(assemblyString, assemblySecurity);
        }

        /// <summary/>
        System.Int32 System._AppDomain.ExecuteAssembly(System.String assemblyFile, System.Security.Policy.Evidence assemblySecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).ExecuteAssembly(assemblyFile, assemblySecurity);
        }

        /// <summary/>
        System.Int32 System._AppDomain.ExecuteAssembly(System.String assemblyFile)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).ExecuteAssembly(assemblyFile);
        }

        /// <summary/>
        System.Int32 System._AppDomain.ExecuteAssembly(System.String assemblyFile, System.Security.Policy.Evidence assemblySecurity, System.String[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).ExecuteAssembly(assemblyFile, assemblySecurity, args);
        }

        /// <summary/>
        System.Reflection.Assembly[] System._AppDomain.GetAssemblies()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).GetAssemblies();
        }

        /// <summary/>
        void System._AppDomain.AppendPrivatePath(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System._AppDomain)InnerObject).AppendPrivatePath(path);
        }

        /// <summary/>
        void System._AppDomain.ClearPrivatePath()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System._AppDomain)InnerObject).ClearPrivatePath();
        }

        /// <summary/>
        void System._AppDomain.SetShadowCopyPath(System.String s)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System._AppDomain)InnerObject).SetShadowCopyPath(s);
        }

        /// <summary/>
        void System._AppDomain.ClearShadowCopyPath()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System._AppDomain)InnerObject).ClearShadowCopyPath();
        }

        /// <summary/>
        void System._AppDomain.SetCachePath(System.String s)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System._AppDomain)InnerObject).SetCachePath(s);
        }

        /// <summary/>
        void System._AppDomain.SetData(System.String name, System.Object data)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System._AppDomain)InnerObject).SetData(name, data);
        }

        /// <summary/>
        System.Object System._AppDomain.GetData(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System._AppDomain)InnerObject).GetData(name);
        }

        /// <summary/>
        void System._AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel domainPolicy)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System._AppDomain)InnerObject).SetAppDomainPolicy(domainPolicy);
        }

        /// <summary/>
        System.Security.Policy.Evidence System._AppDomain.Evidence
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System._AppDomain)InnerObject).Evidence; }
        }
        /// <summary/>
        System.String System._AppDomain.FriendlyName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System._AppDomain)InnerObject).FriendlyName; }
        }
        /// <summary/>
        System.String System._AppDomain.BaseDirectory
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System._AppDomain)InnerObject).BaseDirectory; }
        }
        /// <summary/>
        System.String System._AppDomain.RelativeSearchPath
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System._AppDomain)InnerObject).RelativeSearchPath; }
        }
        /// <summary/>
        System.Boolean System._AppDomain.ShadowCopyFiles
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System._AppDomain)InnerObject).ShadowCopyFiles; }
        }
        /// <summary/>
        System.String System._AppDomain.DynamicDirectory
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System._AppDomain)InnerObject).DynamicDirectory; }
        }
        /// <summary/>
        System.Security.Policy.Evidence System.Security.IEvidenceFactory.Evidence
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Security.IEvidenceFactory)InnerObject).Evidence; }
        }

    }

    /// <summary>Security Wrapper for Type: System.AppDomainSetup</summary>
    [System.CLSCompliant(false)]
    public class AppDomainSetupSW : System.Object, System.IAppDomainSetup
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.AppDomainSetupSW Wrap(System.AppDomainSetup o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.AppDomainSetupSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.AppDomainSetup InnerObject
        {
            get { return innerObject as System.AppDomainSetup; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal AppDomainSetupSW(System.AppDomainSetup o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal AppDomainSetupSW(System.DayOfWeek day) { }

        /// <summary/>
        public AppDomainSetupSW()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.AppDomainSetup();
        }

        /// <summary/>
        public AppDomainSetupSW(System.ActivationContext activationContext)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.AppDomainSetup(activationContext);
        }

        /// <summary/>
        public AppDomainSetupSW(System.Runtime.Hosting.ActivationArguments activationArguments)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.AppDomainSetup(activationArguments);
        }

        /// <summary/>
        public virtual System.String ApplicationBase
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ApplicationBase; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ApplicationBase = value; }
        }
        /// <summary/>
        public virtual System.String ConfigurationFile
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ConfigurationFile; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ConfigurationFile = value; }
        }
        /// <summary/>
        public virtual System.String DynamicBase
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DynamicBase; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DynamicBase = value; }
        }
        /// <summary/>
        public System.Boolean DisallowPublisherPolicy
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DisallowPublisherPolicy; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DisallowPublisherPolicy = value; }
        }
        /// <summary/>
        public System.Boolean DisallowBindingRedirects
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DisallowBindingRedirects; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DisallowBindingRedirects = value; }
        }
        /// <summary/>
        public System.Boolean DisallowCodeDownload
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DisallowCodeDownload; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DisallowCodeDownload = value; }
        }
        /// <summary/>
        public System.Boolean DisallowApplicationBaseProbing
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DisallowApplicationBaseProbing; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DisallowApplicationBaseProbing = value; }
        }
        /// <summary/>
        public virtual System.String ApplicationName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ApplicationName; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ApplicationName = value; }
        }
        /// <summary/>
        public System.AppDomainInitializer AppDomainInitializer
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AppDomainInitializer; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AppDomainInitializer = value; }
        }
        /// <summary/>
        public System.String[] AppDomainInitializerArguments
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AppDomainInitializerArguments; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AppDomainInitializerArguments = value; }
        }
        /// <summary/>
        public System.Runtime.Hosting.ActivationArguments ActivationArguments
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ActivationArguments; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ActivationArguments = value; }
        }
        /// <summary/>
        public System.Security.Policy.ApplicationTrust ApplicationTrust
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ApplicationTrust; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ApplicationTrust = value; }
        }
        /// <summary/>
        public virtual System.String PrivateBinPath
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PrivateBinPath; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.PrivateBinPath = value; }
        }
        /// <summary/>
        public virtual System.String PrivateBinPathProbe
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PrivateBinPathProbe; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.PrivateBinPathProbe = value; }
        }
        /// <summary/>
        public virtual System.String ShadowCopyDirectories
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ShadowCopyDirectories; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ShadowCopyDirectories = value; }
        }
        /// <summary/>
        public virtual System.String ShadowCopyFiles
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ShadowCopyFiles; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ShadowCopyFiles = value; }
        }
        /// <summary/>
        public virtual System.String CachePath
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CachePath; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CachePath = value; }
        }
        /// <summary/>
        public virtual System.String LicenseFile
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.LicenseFile; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.LicenseFile = value; }
        }
        /// <summary/>
        public System.LoaderOptimization LoaderOptimization
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.LoaderOptimization; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.LoaderOptimization = value; }
        }
        /// <summary/>
        public System.Byte[] GetConfigurationBytes()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetConfigurationBytes();
        }

        /// <summary/>
        public void SetConfigurationBytes(System.Byte[] value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetConfigurationBytes(value);
        }

        /// <summary/>
        System.String System.IAppDomainSetup.ApplicationBase
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.IAppDomainSetup)InnerObject).ApplicationBase; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.IAppDomainSetup)InnerObject).ApplicationBase = value; }
        }
        /// <summary/>
        System.String System.IAppDomainSetup.ApplicationName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.IAppDomainSetup)InnerObject).ApplicationName; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.IAppDomainSetup)InnerObject).ApplicationName = value; }
        }
        /// <summary/>
        System.String System.IAppDomainSetup.CachePath
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.IAppDomainSetup)InnerObject).CachePath; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.IAppDomainSetup)InnerObject).CachePath = value; }
        }
        /// <summary/>
        System.String System.IAppDomainSetup.ConfigurationFile
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.IAppDomainSetup)InnerObject).ConfigurationFile; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.IAppDomainSetup)InnerObject).ConfigurationFile = value; }
        }
        /// <summary/>
        System.String System.IAppDomainSetup.DynamicBase
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.IAppDomainSetup)InnerObject).DynamicBase; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.IAppDomainSetup)InnerObject).DynamicBase = value; }
        }
        /// <summary/>
        System.String System.IAppDomainSetup.LicenseFile
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.IAppDomainSetup)InnerObject).LicenseFile; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.IAppDomainSetup)InnerObject).LicenseFile = value; }
        }
        /// <summary/>
        System.String System.IAppDomainSetup.PrivateBinPath
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.IAppDomainSetup)InnerObject).PrivateBinPath; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.IAppDomainSetup)InnerObject).PrivateBinPath = value; }
        }
        /// <summary/>
        System.String System.IAppDomainSetup.PrivateBinPathProbe
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.IAppDomainSetup)InnerObject).PrivateBinPathProbe; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.IAppDomainSetup)InnerObject).PrivateBinPathProbe = value; }
        }
        /// <summary/>
        System.String System.IAppDomainSetup.ShadowCopyDirectories
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.IAppDomainSetup)InnerObject).ShadowCopyDirectories; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.IAppDomainSetup)InnerObject).ShadowCopyDirectories = value; }
        }
        /// <summary/>
        System.String System.IAppDomainSetup.ShadowCopyFiles
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.IAppDomainSetup)InnerObject).ShadowCopyFiles; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.IAppDomainSetup)InnerObject).ShadowCopyFiles = value; }
        }

    }

    /// <summary>Security Wrapper for Type: System.IO.Directory</summary>
    [System.CLSCompliant(false)]
    public static class DirectorySW : System.Object
    {

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.DirectoryInfoSW CreateDirectory(System.String path, System.Security.AccessControl.DirectorySecurity directorySecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DirectoryInfoSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.Directory.CreateDirectory(path, directorySecurity));
        }

        /// <summary/>
        public static System.Boolean Exists(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.Exists(path);
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.DirectoryInfoSW GetParent(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DirectoryInfoSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.Directory.GetParent(path));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.DirectoryInfoSW CreateDirectory(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DirectoryInfoSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.Directory.CreateDirectory(path));
        }

        /// <summary/>
        public static void SetCreationTime(System.String path, System.DateTime creationTime)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.Directory.SetCreationTime(path, creationTime);
        }

        /// <summary/>
        public static void SetCreationTimeUtc(System.String path, System.DateTime creationTimeUtc)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.Directory.SetCreationTimeUtc(path, creationTimeUtc);
        }

        /// <summary/>
        public static System.DateTime GetCreationTime(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetCreationTime(path);
        }

        /// <summary/>
        public static System.DateTime GetCreationTimeUtc(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetCreationTimeUtc(path);
        }

        /// <summary/>
        public static void SetLastWriteTime(System.String path, System.DateTime lastWriteTime)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.Directory.SetLastWriteTime(path, lastWriteTime);
        }

        /// <summary/>
        public static void SetLastWriteTimeUtc(System.String path, System.DateTime lastWriteTimeUtc)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.Directory.SetLastWriteTimeUtc(path, lastWriteTimeUtc);
        }

        /// <summary/>
        public static System.DateTime GetLastWriteTime(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetLastWriteTime(path);
        }

        /// <summary/>
        public static System.DateTime GetLastWriteTimeUtc(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetLastWriteTimeUtc(path);
        }

        /// <summary/>
        public static void SetLastAccessTime(System.String path, System.DateTime lastAccessTime)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.Directory.SetLastAccessTime(path, lastAccessTime);
        }

        /// <summary/>
        public static void SetLastAccessTimeUtc(System.String path, System.DateTime lastAccessTimeUtc)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.Directory.SetLastAccessTimeUtc(path, lastAccessTimeUtc);
        }

        /// <summary/>
        public static System.DateTime GetLastAccessTime(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetLastAccessTime(path);
        }

        /// <summary/>
        public static System.DateTime GetLastAccessTimeUtc(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetLastAccessTimeUtc(path);
        }

        /// <summary/>
        public static System.Security.AccessControl.DirectorySecurity GetAccessControl(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetAccessControl(path);
        }

        /// <summary/>
        public static System.Security.AccessControl.DirectorySecurity GetAccessControl(System.String path, System.Security.AccessControl.AccessControlSections includeSections)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetAccessControl(path, includeSections);
        }

        /// <summary/>
        public static void SetAccessControl(System.String path, System.Security.AccessControl.DirectorySecurity directorySecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.Directory.SetAccessControl(path, directorySecurity);
        }

        /// <summary/>
        public static System.String[] GetFiles(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetFiles(path);
        }

        /// <summary/>
        public static System.String[] GetFiles(System.String path, System.String searchPattern)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetFiles(path, searchPattern);
        }

        /// <summary/>
        public static System.String[] GetFiles(System.String path, System.String searchPattern, System.IO.SearchOption searchOption)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetFiles(path, searchPattern, searchOption);
        }

        /// <summary/>
        public static System.String[] GetDirectories(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetDirectories(path);
        }

        /// <summary/>
        public static System.String[] GetDirectories(System.String path, System.String searchPattern)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetDirectories(path, searchPattern);
        }

        /// <summary/>
        public static System.String[] GetDirectories(System.String path, System.String searchPattern, System.IO.SearchOption searchOption)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetDirectories(path, searchPattern, searchOption);
        }

        /// <summary/>
        public static System.String[] GetFileSystemEntries(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetFileSystemEntries(path);
        }

        /// <summary/>
        public static System.String[] GetFileSystemEntries(System.String path, System.String searchPattern)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetFileSystemEntries(path, searchPattern);
        }

        /// <summary/>
        public static System.String[] GetLogicalDrives()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetLogicalDrives();
        }

        /// <summary/>
        public static System.String GetDirectoryRoot(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetDirectoryRoot(path);
        }

        /// <summary/>
        public static System.String GetCurrentDirectory()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Directory.GetCurrentDirectory();
        }

        /// <summary/>
        public static void SetCurrentDirectory(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.Directory.SetCurrentDirectory(path);
        }

        /// <summary/>
        public static void Move(System.String sourceDirName, System.String destDirName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.Directory.Move(sourceDirName, destDirName);
        }

        /// <summary/>
        public static void Delete(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.Directory.Delete(path);
        }

        /// <summary/>
        public static void Delete(System.String path, System.Boolean recursive)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.Directory.Delete(path, recursive);
        }


    }

    /// <summary>Security Wrapper for Type: System.IO.DirectoryInfo</summary>
    [System.CLSCompliant(false)]
    public class DirectoryInfoSW : Microsoft.Test.Security.Wrappers.FileSystemInfoSW, System.Runtime.Serialization.ISerializable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.DirectoryInfoSW Wrap(System.IO.DirectoryInfo o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.DirectoryInfoSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.IO.DirectoryInfo InnerObject
        {
            get { return innerObject as System.IO.DirectoryInfo; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal DirectoryInfoSW(System.IO.DirectoryInfo o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal DirectoryInfoSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public DirectoryInfoSW(System.String path)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.DirectoryInfo(path);
        }

        /// <summary/>
        public override System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DirectoryInfoSW Parent
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.DirectoryInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Parent); }
        }
        /// <summary/>
        public override System.Boolean Exists
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Exists; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DirectoryInfoSW Root
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.DirectoryInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Root); }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DirectoryInfoSW CreateSubdirectory(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DirectoryInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CreateSubdirectory(path));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DirectoryInfoSW CreateSubdirectory(System.String path, System.Security.AccessControl.DirectorySecurity directorySecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DirectoryInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CreateSubdirectory(path, directorySecurity));
        }

        /// <summary/>
        public void Create()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Create();
        }

        /// <summary/>
        public void Create(System.Security.AccessControl.DirectorySecurity directorySecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Create(directorySecurity);
        }

        /// <summary/>
        public System.Security.AccessControl.DirectorySecurity GetAccessControl()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetAccessControl();
        }

        /// <summary/>
        public System.Security.AccessControl.DirectorySecurity GetAccessControl(System.Security.AccessControl.AccessControlSections includeSections)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetAccessControl(includeSections);
        }

        /// <summary/>
        public void SetAccessControl(System.Security.AccessControl.DirectorySecurity directorySecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetAccessControl(directorySecurity);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FileInfoSW[] GetFiles(System.String searchPattern)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFiles(searchPattern));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FileInfoSW[] GetFiles(System.String searchPattern, System.IO.SearchOption searchOption)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFiles(searchPattern, searchOption));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FileInfoSW[] GetFiles()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFiles());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DirectoryInfoSW[] GetDirectories()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DirectoryInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetDirectories());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FileSystemInfoSW[] GetFileSystemInfos(System.String searchPattern)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileSystemInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFileSystemInfos(searchPattern));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FileSystemInfoSW[] GetFileSystemInfos()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileSystemInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFileSystemInfos());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DirectoryInfoSW[] GetDirectories(System.String searchPattern)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DirectoryInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetDirectories(searchPattern));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DirectoryInfoSW[] GetDirectories(System.String searchPattern, System.IO.SearchOption searchOption)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DirectoryInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetDirectories(searchPattern, searchOption));
        }

        /// <summary/>
        public void MoveTo(System.String destDirName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.MoveTo(destDirName);
        }

        /// <summary/>
        public override void Delete()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Delete();
        }

        /// <summary/>
        public void Delete(System.Boolean recursive)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Delete(recursive);
        }

        /// <summary/>
        public override System.String ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ToString();
        }

        /// <summary/>
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.Serialization.ISerializable)InnerObject).GetObjectData(info, context);
        }


    }

    /// <summary>Security Wrapper for Type: System.IO.FileSystemInfo</summary>
    [System.CLSCompliant(false)]
    public class FileSystemInfoSW : Microsoft.Test.Security.Wrappers.MarshalByRefObjectSW, System.Runtime.Serialization.ISerializable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.FileSystemInfoSW Wrap(System.IO.FileSystemInfo o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.FileSystemInfoSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.IO.FileSystemInfo InnerObject
        {
            get { return innerObject as System.IO.FileSystemInfo; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal FileSystemInfoSW(System.IO.FileSystemInfo o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal FileSystemInfoSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected FileSystemInfoSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        protected FileSystemInfoSW(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public virtual System.String FullName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FullName; }
        }
        /// <summary/>
        public System.String Extension
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Extension; }
        }
        /// <summary/>
        public virtual System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public virtual System.Boolean Exists
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Exists; }
        }
        /// <summary/>
        public System.DateTime CreationTime
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CreationTime; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CreationTime = value; }
        }
        /// <summary/>
        public System.DateTime CreationTimeUtc
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CreationTimeUtc; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CreationTimeUtc = value; }
        }
        /// <summary/>
        public System.DateTime LastAccessTime
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.LastAccessTime; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.LastAccessTime = value; }
        }
        /// <summary/>
        public System.DateTime LastAccessTimeUtc
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.LastAccessTimeUtc; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.LastAccessTimeUtc = value; }
        }
        /// <summary/>
        public System.DateTime LastWriteTime
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.LastWriteTime; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.LastWriteTime = value; }
        }
        /// <summary/>
        public System.DateTime LastWriteTimeUtc
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.LastWriteTimeUtc; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.LastWriteTimeUtc = value; }
        }
        /// <summary/>
        public System.IO.FileAttributes Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Attributes; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Attributes = value; }
        }
        /// <summary/>
        public virtual void Delete()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Delete();
        }

        /// <summary/>
        public void Refresh()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Refresh();
        }

        /// <summary/>
        public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.GetObjectData(info, context);
        }

        /// <summary/>
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.Serialization.ISerializable)InnerObject).GetObjectData(info, context);
        }


    }

    /// <summary>Security Wrapper for Type: System.IO.BinaryReader</summary>
    [System.CLSCompliant(false)]
    public class BinaryReaderSW : System.Object, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.BinaryReaderSW Wrap(System.IO.BinaryReader o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.BinaryReaderSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.IO.BinaryReader InnerObject
        {
            get { return innerObject as System.IO.BinaryReader; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal BinaryReaderSW(System.IO.BinaryReader o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal BinaryReaderSW(System.DayOfWeek day) { }

        /// <summary/>
        public BinaryReaderSW(System.IO.Stream input)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.BinaryReader(input);
        }

        /// <summary/>
        public BinaryReaderSW(System.IO.Stream input, System.Text.Encoding encoding)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.BinaryReader(input, encoding);
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.StreamSW BaseStream
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.StreamSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.BaseStream); }
        }
        /// <summary/>
        public virtual void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public virtual System.Int32 PeekChar()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.PeekChar();
        }

        /// <summary/>
        public virtual System.Int32 Read()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Read();
        }

        /// <summary/>
        public virtual System.Boolean ReadBoolean()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadBoolean();
        }

        /// <summary/>
        public virtual System.Byte ReadByte()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadByte();
        }

        /// <summary/>
        public virtual System.SByte ReadSByte()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadSByte();
        }

        /// <summary/>
        public virtual System.Char ReadChar()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadChar();
        }

        /// <summary/>
        public virtual System.Int16 ReadInt16()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadInt16();
        }

        /// <summary/>
        public virtual System.UInt16 ReadUInt16()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadUInt16();
        }

        /// <summary/>
        public virtual System.Int32 ReadInt32()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadInt32();
        }

        /// <summary/>
        public virtual System.UInt32 ReadUInt32()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadUInt32();
        }

        /// <summary/>
        public virtual System.Int64 ReadInt64()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadInt64();
        }

        /// <summary/>
        public virtual System.UInt64 ReadUInt64()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadUInt64();
        }

        /// <summary/>
        public virtual System.Single ReadSingle()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadSingle();
        }

        /// <summary/>
        public virtual System.Double ReadDouble()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadDouble();
        }

        /// <summary/>
        public virtual System.Decimal ReadDecimal()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadDecimal();
        }

        /// <summary/>
        public virtual System.String ReadString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadString();
        }

        /// <summary/>
        public virtual System.Int32 Read(System.Char[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Read(buffer, index, count);
        }

        /// <summary/>
        public virtual System.Char[] ReadChars(System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadChars(count);
        }

        /// <summary/>
        public virtual System.Int32 Read(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Read(buffer, index, count);
        }

        /// <summary/>
        public virtual System.Byte[] ReadBytes(System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadBytes(count);
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.IO.BinaryWriter</summary>
    [System.CLSCompliant(false)]
    public class BinaryWriterSW : System.Object, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.BinaryWriterSW Wrap(System.IO.BinaryWriter o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.BinaryWriterSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.IO.BinaryWriter InnerObject
        {
            get { return innerObject as System.IO.BinaryWriter; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal BinaryWriterSW(System.IO.BinaryWriter o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal BinaryWriterSW(System.DayOfWeek day) { }

        /// <summary/>
        protected BinaryWriterSW()
        {
        }

        /// <summary/>
        public BinaryWriterSW(System.IO.Stream output)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.BinaryWriter(output);
        }

        /// <summary/>
        public BinaryWriterSW(System.IO.Stream output, System.Text.Encoding encoding)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.BinaryWriter(output, encoding);
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.StreamSW BaseStream
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.StreamSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.BaseStream); }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.BinaryWriterSW Null
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.BinaryWriterSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.BinaryWriter.Null); }
        }
        /// <summary/>
        public virtual void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public virtual void Flush()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Flush();
        }

        /// <summary/>
        public virtual System.Int64 Seek(System.Int32 offset, System.IO.SeekOrigin origin)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Seek(offset, origin);
        }

        /// <summary/>
        public virtual void Write(System.Boolean value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.Byte value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.SByte value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.Byte[] buffer)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(buffer);
        }

        /// <summary/>
        public virtual void Write(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(buffer, index, count);
        }

        /// <summary/>
        public virtual void Write(System.Char ch)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(ch);
        }

        /// <summary/>
        public virtual void Write(System.Char[] chars)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(chars);
        }

        /// <summary/>
        public virtual void Write(System.Char[] chars, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(chars, index, count);
        }

        /// <summary/>
        public virtual void Write(System.Double value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.Decimal value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.Int16 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.UInt16 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.Int32 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.UInt32 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.Int64 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.UInt64 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.Single value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.String value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.IO.File</summary>
    [System.CLSCompliant(false)]
    public static class FileSW : System.Object
    {

        /// <summary/>
        public static void Delete(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.Delete(path);
        }

        /// <summary/>
        public static System.Boolean Exists(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.File.Exists(path);
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.StreamReaderSW OpenText(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.StreamReaderSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.File.OpenText(path));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.StreamWriterSW CreateText(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.StreamWriterSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.File.CreateText(path));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.StreamWriterSW AppendText(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.StreamWriterSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.File.AppendText(path));
        }

        /// <summary/>
        public static void Copy(System.String sourceFileName, System.String destFileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.Copy(sourceFileName, destFileName);
        }

        /// <summary/>
        public static void Copy(System.String sourceFileName, System.String destFileName, System.Boolean overwrite)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.Copy(sourceFileName, destFileName, overwrite);
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.FileStreamSW Create(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.File.Create(path));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.FileStreamSW Create(System.String path, System.Int32 bufferSize)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.File.Create(path, bufferSize));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.FileStreamSW Create(System.String path, System.Int32 bufferSize, System.IO.FileOptions options)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.File.Create(path, bufferSize, options));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.FileStreamSW Create(System.String path, System.Int32 bufferSize, System.IO.FileOptions options, System.Security.AccessControl.FileSecurity fileSecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.File.Create(path, bufferSize, options, fileSecurity));
        }

        /// <summary/>
        public static void Decrypt(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.Decrypt(path);
        }

        /// <summary/>
        public static void Encrypt(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.Encrypt(path);
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.FileStreamSW Open(System.String path, System.IO.FileMode mode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.File.Open(path, mode));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.FileStreamSW Open(System.String path, System.IO.FileMode mode, System.IO.FileAccess access)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.File.Open(path, mode, access));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.FileStreamSW Open(System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.File.Open(path, mode, access, share));
        }

        /// <summary/>
        public static void SetCreationTime(System.String path, System.DateTime creationTime)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.SetCreationTime(path, creationTime);
        }

        /// <summary/>
        public static void SetCreationTimeUtc(System.String path, System.DateTime creationTimeUtc)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.SetCreationTimeUtc(path, creationTimeUtc);
        }

        /// <summary/>
        public static System.DateTime GetCreationTime(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.File.GetCreationTime(path);
        }

        /// <summary/>
        public static System.DateTime GetCreationTimeUtc(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.File.GetCreationTimeUtc(path);
        }

        /// <summary/>
        public static void SetLastAccessTime(System.String path, System.DateTime lastAccessTime)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.SetLastAccessTime(path, lastAccessTime);
        }

        /// <summary/>
        public static void SetLastAccessTimeUtc(System.String path, System.DateTime lastAccessTimeUtc)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.SetLastAccessTimeUtc(path, lastAccessTimeUtc);
        }

        /// <summary/>
        public static System.DateTime GetLastAccessTime(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.File.GetLastAccessTime(path);
        }

        /// <summary/>
        public static System.DateTime GetLastAccessTimeUtc(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.File.GetLastAccessTimeUtc(path);
        }

        /// <summary/>
        public static void SetLastWriteTime(System.String path, System.DateTime lastWriteTime)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.SetLastWriteTime(path, lastWriteTime);
        }

        /// <summary/>
        public static void SetLastWriteTimeUtc(System.String path, System.DateTime lastWriteTimeUtc)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.SetLastWriteTimeUtc(path, lastWriteTimeUtc);
        }

        /// <summary/>
        public static System.DateTime GetLastWriteTime(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.File.GetLastWriteTime(path);
        }

        /// <summary/>
        public static System.DateTime GetLastWriteTimeUtc(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.File.GetLastWriteTimeUtc(path);
        }

        /// <summary/>
        public static System.IO.FileAttributes GetAttributes(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.File.GetAttributes(path);
        }

        /// <summary/>
        public static void SetAttributes(System.String path, System.IO.FileAttributes fileAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.SetAttributes(path, fileAttributes);
        }

        /// <summary/>
        public static System.Security.AccessControl.FileSecurity GetAccessControl(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.File.GetAccessControl(path);
        }

        /// <summary/>
        public static System.Security.AccessControl.FileSecurity GetAccessControl(System.String path, System.Security.AccessControl.AccessControlSections includeSections)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.File.GetAccessControl(path, includeSections);
        }

        /// <summary/>
        public static void SetAccessControl(System.String path, System.Security.AccessControl.FileSecurity fileSecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.SetAccessControl(path, fileSecurity);
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.FileStreamSW OpenRead(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.File.OpenRead(path));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.FileStreamSW OpenWrite(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.File.OpenWrite(path));
        }

        /// <summary/>
        public static System.String ReadAllText(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.File.ReadAllText(path);
        }

        /// <summary/>
        public static System.String ReadAllText(System.String path, System.Text.Encoding encoding)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.File.ReadAllText(path, encoding);
        }

        /// <summary/>
        public static void WriteAllText(System.String path, System.String contents)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.WriteAllText(path, contents);
        }

        /// <summary/>
        public static void WriteAllText(System.String path, System.String contents, System.Text.Encoding encoding)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.WriteAllText(path, contents, encoding);
        }

        /// <summary/>
        public static System.Byte[] ReadAllBytes(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.File.ReadAllBytes(path);
        }

        /// <summary/>
        public static void WriteAllBytes(System.String path, System.Byte[] bytes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.WriteAllBytes(path, bytes);
        }

        /// <summary/>
        public static System.String[] ReadAllLines(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.File.ReadAllLines(path);
        }

        /// <summary/>
        public static System.String[] ReadAllLines(System.String path, System.Text.Encoding encoding)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.File.ReadAllLines(path, encoding);
        }

        /// <summary/>
        public static void WriteAllLines(System.String path, System.String[] contents)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.WriteAllLines(path, contents);
        }

        /// <summary/>
        public static void WriteAllLines(System.String path, System.String[] contents, System.Text.Encoding encoding)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.WriteAllLines(path, contents, encoding);
        }

        /// <summary/>
        public static void AppendAllText(System.String path, System.String contents)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.AppendAllText(path, contents);
        }

        /// <summary/>
        public static void AppendAllText(System.String path, System.String contents, System.Text.Encoding encoding)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.AppendAllText(path, contents, encoding);
        }

        /// <summary/>
        public static void Move(System.String sourceFileName, System.String destFileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.Move(sourceFileName, destFileName);
        }

        /// <summary/>
        public static void Replace(System.String sourceFileName, System.String destinationFileName, System.String destinationBackupFileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.Replace(sourceFileName, destinationFileName, destinationBackupFileName);
        }

        /// <summary/>
        public static void Replace(System.String sourceFileName, System.String destinationFileName, System.String destinationBackupFileName, System.Boolean ignoreMetadataErrors)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.IO.File.Replace(sourceFileName, destinationFileName, destinationBackupFileName, ignoreMetadataErrors);
        }


    }

    /// <summary>Security Wrapper for Type: System.IO.FileInfo</summary>
    [System.CLSCompliant(false)]
    public class FileInfoSW : Microsoft.Test.Security.Wrappers.FileSystemInfoSW, System.Runtime.Serialization.ISerializable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.FileInfoSW Wrap(System.IO.FileInfo o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.FileInfoSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.IO.FileInfo InnerObject
        {
            get { return innerObject as System.IO.FileInfo; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal FileInfoSW(System.IO.FileInfo o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal FileInfoSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public FileInfoSW(System.String fileName)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.FileInfo(fileName);
        }

        /// <summary/>
        public override System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public System.Int64 Length
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Length; }
        }
        /// <summary/>
        public System.String DirectoryName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DirectoryName; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DirectoryInfoSW Directory
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.DirectoryInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Directory); }
        }
        /// <summary/>
        public System.Boolean IsReadOnly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsReadOnly; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.IsReadOnly = value; }
        }
        /// <summary/>
        public override System.Boolean Exists
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Exists; }
        }
        /// <summary/>
        public System.Security.AccessControl.FileSecurity GetAccessControl()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetAccessControl();
        }

        /// <summary/>
        public System.Security.AccessControl.FileSecurity GetAccessControl(System.Security.AccessControl.AccessControlSections includeSections)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetAccessControl(includeSections);
        }

        /// <summary/>
        public void SetAccessControl(System.Security.AccessControl.FileSecurity fileSecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetAccessControl(fileSecurity);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.StreamReaderSW OpenText()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.StreamReaderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.OpenText());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.StreamWriterSW CreateText()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.StreamWriterSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CreateText());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.StreamWriterSW AppendText()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.StreamWriterSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.AppendText());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FileInfoSW CopyTo(System.String destFileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CopyTo(destFileName));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FileInfoSW CopyTo(System.String destFileName, System.Boolean overwrite)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CopyTo(destFileName, overwrite));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FileStreamSW Create()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Create());
        }

        /// <summary/>
        public override void Delete()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Delete();
        }

        /// <summary/>
        public void Decrypt()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Decrypt();
        }

        /// <summary/>
        public void Encrypt()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Encrypt();
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FileStreamSW Open(System.IO.FileMode mode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Open(mode));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FileStreamSW Open(System.IO.FileMode mode, System.IO.FileAccess access)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Open(mode, access));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FileStreamSW Open(System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Open(mode, access, share));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FileStreamSW OpenRead()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.OpenRead());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FileStreamSW OpenWrite()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.OpenWrite());
        }

        /// <summary/>
        public void MoveTo(System.String destFileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.MoveTo(destFileName);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FileInfoSW Replace(System.String destinationFileName, System.String destinationBackupFileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Replace(destinationFileName, destinationBackupFileName));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FileInfoSW Replace(System.String destinationFileName, System.String destinationBackupFileName, System.Boolean ignoreMetadataErrors)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Replace(destinationFileName, destinationBackupFileName, ignoreMetadataErrors));
        }

        /// <summary/>
        public override System.String ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ToString();
        }

        /// <summary/>
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.Serialization.ISerializable)InnerObject).GetObjectData(info, context);
        }


    }

    /// <summary>Security Wrapper for Type: System.IO.FileStream</summary>
    [System.CLSCompliant(false)]
    public class FileStreamSW : Microsoft.Test.Security.Wrappers.StreamSW, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.FileStreamSW Wrap(System.IO.FileStream o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.FileStreamSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.IO.FileStream InnerObject
        {
            get { return innerObject as System.IO.FileStream; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal FileStreamSW(System.IO.FileStream o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal FileStreamSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public FileStreamSW(System.String path, System.IO.FileMode mode)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.FileStream(path, mode);
        }

        /// <summary/>
        public FileStreamSW(System.String path, System.IO.FileMode mode, System.IO.FileAccess access)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.FileStream(path, mode, access);
        }

        /// <summary/>
        public FileStreamSW(System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.FileStream(path, mode, access, share);
        }

        /// <summary/>
        public FileStreamSW(System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize, System.IO.FileOptions options)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.FileStream(path, mode, access, share, bufferSize, options);
        }

        /// <summary/>
        public FileStreamSW(System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.FileStream(path, mode, access, share, bufferSize);
        }

        /// <summary/>
        public FileStreamSW(System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize, System.Boolean useAsync)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.FileStream(path, mode, access, share, bufferSize, useAsync);
        }

        /// <summary/>
        public FileStreamSW(System.String path, System.IO.FileMode mode, System.Security.AccessControl.FileSystemRights rights, System.IO.FileShare share, System.Int32 bufferSize, System.IO.FileOptions options, System.Security.AccessControl.FileSecurity fileSecurity)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.FileStream(path, mode, rights, share, bufferSize, options, fileSecurity);
        }

        /// <summary/>
        public FileStreamSW(System.String path, System.IO.FileMode mode, System.Security.AccessControl.FileSystemRights rights, System.IO.FileShare share, System.Int32 bufferSize, System.IO.FileOptions options)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.FileStream(path, mode, rights, share, bufferSize, options);
        }

        /// <summary/>
        public FileStreamSW(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.FileStream(handle, access);
        }

        /// <summary/>
        public FileStreamSW(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, System.Int32 bufferSize)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.FileStream(handle, access, bufferSize);
        }

        /// <summary/>
        public FileStreamSW(Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, System.Int32 bufferSize, System.Boolean isAsync)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.FileStream(handle, access, bufferSize, isAsync);
        }

        /// <summary/>
        public override System.Boolean CanRead
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanRead; }
        }
        /// <summary/>
        public override System.Boolean CanWrite
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanWrite; }
        }
        /// <summary/>
        public override System.Boolean CanSeek
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanSeek; }
        }
        /// <summary/>
        public virtual System.Boolean IsAsync
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsAsync; }
        }
        /// <summary/>
        public override System.Int64 Length
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Length; }
        }
        /// <summary/>
        public System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public override System.Int64 Position
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Position; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Position = value; }
        }
        /// <summary/>
        public virtual Microsoft.Win32.SafeHandles.SafeFileHandle SafeFileHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.SafeFileHandle; }
        }
        /// <summary/>
        public System.Security.AccessControl.FileSecurity GetAccessControl()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetAccessControl();
        }

        /// <summary/>
        public void SetAccessControl(System.Security.AccessControl.FileSecurity fileSecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetAccessControl(fileSecurity);
        }

        /// <summary/>
        public override void Flush()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Flush();
        }

        /// <summary/>
        public override void SetLength(System.Int64 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetLength(value);
        }

        /// <summary/>
        public override System.Int32 Read(System.Byte[] array, System.Int32 offset, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Read(array, offset, count);
        }

        /// <summary/>
        public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Seek(offset, origin);
        }

        /// <summary/>
        public override void Write(System.Byte[] array, System.Int32 offset, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(array, offset, count);
        }

        /// <summary/>
        public override System.IAsyncResult BeginRead(System.Byte[] array, System.Int32 offset, System.Int32 numBytes, System.AsyncCallback userCallback, System.Object stateObject)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginRead(array, offset, numBytes, userCallback, stateObject);
        }

        /// <summary/>
        public override System.Int32 EndRead(System.IAsyncResult asyncResult)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.EndRead(asyncResult);
        }

        /// <summary/>
        public override System.Int32 ReadByte()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadByte();
        }

        /// <summary/>
        public override System.IAsyncResult BeginWrite(System.Byte[] array, System.Int32 offset, System.Int32 numBytes, System.AsyncCallback userCallback, System.Object stateObject)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginWrite(array, offset, numBytes, userCallback, stateObject);
        }

        /// <summary/>
        public override void EndWrite(System.IAsyncResult asyncResult)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EndWrite(asyncResult);
        }

        /// <summary/>
        public override void WriteByte(System.Byte value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteByte(value);
        }

        /// <summary/>
        public virtual void Lock(System.Int64 position, System.Int64 length)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Lock(position, length);
        }

        /// <summary/>
        public virtual void Unlock(System.Int64 position, System.Int64 length)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Unlock(position, length);
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.IO.Stream</summary>
    [System.CLSCompliant(false)]
    public class StreamSW : Microsoft.Test.Security.Wrappers.MarshalByRefObjectSW, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.StreamSW Wrap(System.IO.Stream o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.StreamSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.IO.Stream InnerObject
        {
            get { return innerObject as System.IO.Stream; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal StreamSW(System.IO.Stream o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal StreamSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected StreamSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public virtual System.Boolean CanRead
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanRead; }
        }
        /// <summary/>
        public virtual System.Boolean CanSeek
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanSeek; }
        }
        /// <summary/>
        public virtual System.Boolean CanTimeout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanTimeout; }
        }
        /// <summary/>
        public virtual System.Boolean CanWrite
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanWrite; }
        }
        /// <summary/>
        public virtual System.Int64 Length
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Length; }
        }
        /// <summary/>
        public virtual System.Int64 Position
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Position; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Position = value; }
        }
        /// <summary/>
        public virtual System.Int32 ReadTimeout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ReadTimeout; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ReadTimeout = value; }
        }
        /// <summary/>
        public virtual System.Int32 WriteTimeout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.WriteTimeout; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.WriteTimeout = value; }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.StreamSW Null
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.StreamSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.Stream.Null); }
        }
        /// <summary/>
        public virtual void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public virtual void Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Dispose();
        }

        /// <summary/>
        public virtual void Flush()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Flush();
        }

        /// <summary/>
        public virtual System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginRead(buffer, offset, count, callback, state);
        }

        /// <summary/>
        public virtual System.Int32 EndRead(System.IAsyncResult asyncResult)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.EndRead(asyncResult);
        }

        /// <summary/>
        public virtual System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginWrite(buffer, offset, count, callback, state);
        }

        /// <summary/>
        public virtual void EndWrite(System.IAsyncResult asyncResult)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EndWrite(asyncResult);
        }

        /// <summary/>
        public virtual System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Seek(offset, origin);
        }

        /// <summary/>
        public virtual void SetLength(System.Int64 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetLength(value);
        }

        /// <summary/>
        public virtual System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Read(buffer, offset, count);
        }

        /// <summary/>
        public virtual System.Int32 ReadByte()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadByte();
        }

        /// <summary/>
        public virtual void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(buffer, offset, count);
        }

        /// <summary/>
        public virtual void WriteByte(System.Byte value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteByte(value);
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.StreamSW Synchronized(System.IO.Stream stream)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.StreamSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.Stream.Synchronized(stream));
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.IO.Path</summary>
    [System.CLSCompliant(false)]
    public static class PathSW : System.Object
    {

        /// <summary/>
        public static System.Char DirectorySeparatorChar
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.IO.Path.DirectorySeparatorChar; }
        }
        /// <summary/>
        public static System.Char AltDirectorySeparatorChar
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.IO.Path.AltDirectorySeparatorChar; }
        }
        /// <summary/>
        public static System.Char VolumeSeparatorChar
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.IO.Path.VolumeSeparatorChar; }
        }
        /// <summary/>
        public static System.Char PathSeparator
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.IO.Path.PathSeparator; }
        }
        /// <summary/>
        public static System.String GetFullPath(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Path.GetFullPath(path);
        }

        /// <summary/>
        public static System.String ChangeExtension(System.String path, System.String extension)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Path.ChangeExtension(path, extension);
        }

        /// <summary/>
        public static System.String GetDirectoryName(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Path.GetDirectoryName(path);
        }

        /// <summary/>
        public static System.Char[] GetInvalidPathChars()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Path.GetInvalidPathChars();
        }

        /// <summary/>
        public static System.Char[] GetInvalidFileNameChars()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Path.GetInvalidFileNameChars();
        }

        /// <summary/>
        public static System.String GetExtension(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Path.GetExtension(path);
        }

        /// <summary/>
        public static System.String GetFileName(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Path.GetFileName(path);
        }

        /// <summary/>
        public static System.String GetFileNameWithoutExtension(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Path.GetFileNameWithoutExtension(path);
        }

        /// <summary/>
        public static System.String GetPathRoot(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Path.GetPathRoot(path);
        }

        /// <summary/>
        public static System.String GetTempPath()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Path.GetTempPath();
        }

        /// <summary/>
        public static System.String GetRandomFileName()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Path.GetRandomFileName();
        }

        /// <summary/>
        public static System.String GetTempFileName()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Path.GetTempFileName();
        }

        /// <summary/>
        public static System.Boolean HasExtension(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Path.HasExtension(path);
        }

        /// <summary/>
        public static System.Boolean IsPathRooted(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Path.IsPathRooted(path);
        }

        /// <summary/>
        public static System.String Combine(System.String path1, System.String path2)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.IO.Path.Combine(path1, path2);
        }


    }

    /// <summary>Security Wrapper for Type: System.IO.StreamReader</summary>
    [System.CLSCompliant(false)]
    public class StreamReaderSW : Microsoft.Test.Security.Wrappers.TextReaderSW, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.StreamReaderSW Wrap(System.IO.StreamReader o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.StreamReaderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.IO.StreamReader InnerObject
        {
            get { return innerObject as System.IO.StreamReader; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal StreamReaderSW(System.IO.StreamReader o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal StreamReaderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public StreamReaderSW(System.IO.Stream stream, System.Text.Encoding encoding, System.Boolean detectEncodingFromByteOrderMarks, System.Int32 bufferSize)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.StreamReader(stream, encoding, detectEncodingFromByteOrderMarks, bufferSize);
        }

        /// <summary/>
        public StreamReaderSW(System.IO.Stream stream)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.StreamReader(stream);
        }

        /// <summary/>
        public StreamReaderSW(System.IO.Stream stream, System.Boolean detectEncodingFromByteOrderMarks)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.StreamReader(stream, detectEncodingFromByteOrderMarks);
        }

        /// <summary/>
        public StreamReaderSW(System.IO.Stream stream, System.Text.Encoding encoding)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.StreamReader(stream, encoding);
        }

        /// <summary/>
        public StreamReaderSW(System.IO.Stream stream, System.Text.Encoding encoding, System.Boolean detectEncodingFromByteOrderMarks)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.StreamReader(stream, encoding, detectEncodingFromByteOrderMarks);
        }

        /// <summary/>
        public StreamReaderSW(System.String path)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.StreamReader(path);
        }

        /// <summary/>
        public StreamReaderSW(System.String path, System.Boolean detectEncodingFromByteOrderMarks)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.StreamReader(path, detectEncodingFromByteOrderMarks);
        }

        /// <summary/>
        public StreamReaderSW(System.String path, System.Text.Encoding encoding)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.StreamReader(path, encoding);
        }

        /// <summary/>
        public StreamReaderSW(System.String path, System.Text.Encoding encoding, System.Boolean detectEncodingFromByteOrderMarks)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.StreamReader(path, encoding, detectEncodingFromByteOrderMarks);
        }

        /// <summary/>
        public StreamReaderSW(System.String path, System.Text.Encoding encoding, System.Boolean detectEncodingFromByteOrderMarks, System.Int32 bufferSize)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.StreamReader(path, encoding, detectEncodingFromByteOrderMarks, bufferSize);
        }

        /// <summary/>
        public virtual System.Text.Encoding CurrentEncoding
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CurrentEncoding; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.StreamSW BaseStream
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.StreamSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.BaseStream); }
        }
        /// <summary/>
        public System.Boolean EndOfStream
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.EndOfStream; }
        }
        /// <summary/>
        public static new Microsoft.Test.Security.Wrappers.StreamReaderSW Null
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.StreamReaderSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.StreamReader.Null); }
        }
        /// <summary/>
        public override void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public void DiscardBufferedData()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.DiscardBufferedData();
        }

        /// <summary/>
        public override System.Int32 Peek()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Peek();
        }

        /// <summary/>
        public override System.Int32 Read()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Read();
        }

        /// <summary/>
        public override System.Int32 Read(System.Char[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Read(buffer, index, count);
        }

        /// <summary/>
        public override System.String ReadToEnd()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadToEnd();
        }

        /// <summary/>
        public override System.String ReadLine()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadLine();
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.IO.TextReader</summary>
    [System.CLSCompliant(false)]
    public class TextReaderSW : Microsoft.Test.Security.Wrappers.MarshalByRefObjectSW, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.TextReaderSW Wrap(System.IO.TextReader o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.TextReaderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.IO.TextReader InnerObject
        {
            get { return innerObject as System.IO.TextReader; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal TextReaderSW(System.IO.TextReader o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal TextReaderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected TextReaderSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TextReaderSW Null
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TextReaderSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.TextReader.Null); }
        }
        /// <summary/>
        public virtual void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public virtual void Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Dispose();
        }

        /// <summary/>
        public virtual System.Int32 Peek()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Peek();
        }

        /// <summary/>
        public virtual System.Int32 Read()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Read();
        }

        /// <summary/>
        public virtual System.Int32 Read(System.Char[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Read(buffer, index, count);
        }

        /// <summary/>
        public virtual System.String ReadToEnd()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadToEnd();
        }

        /// <summary/>
        public virtual System.Int32 ReadBlock(System.Char[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadBlock(buffer, index, count);
        }

        /// <summary/>
        public virtual System.String ReadLine()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadLine();
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TextReaderSW Synchronized(System.IO.TextReader reader)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TextReaderSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.TextReader.Synchronized(reader));
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.IO.StreamWriter</summary>
    [System.CLSCompliant(false)]
    public class StreamWriterSW : Microsoft.Test.Security.Wrappers.TextWriterSW, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.StreamWriterSW Wrap(System.IO.StreamWriter o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.StreamWriterSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.IO.StreamWriter InnerObject
        {
            get { return innerObject as System.IO.StreamWriter; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal StreamWriterSW(System.IO.StreamWriter o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal StreamWriterSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public StreamWriterSW(System.String path, System.Boolean append, System.Text.Encoding encoding)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.StreamWriter(path, append, encoding);
        }

        /// <summary/>
        public StreamWriterSW(System.IO.Stream stream)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.StreamWriter(stream);
        }

        /// <summary/>
        public StreamWriterSW(System.IO.Stream stream, System.Text.Encoding encoding)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.StreamWriter(stream, encoding);
        }

        /// <summary/>
        public StreamWriterSW(System.IO.Stream stream, System.Text.Encoding encoding, System.Int32 bufferSize)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.StreamWriter(stream, encoding, bufferSize);
        }

        /// <summary/>
        public StreamWriterSW(System.String path)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.StreamWriter(path);
        }

        /// <summary/>
        public StreamWriterSW(System.String path, System.Boolean append)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.StreamWriter(path, append);
        }

        /// <summary/>
        public StreamWriterSW(System.String path, System.Boolean append, System.Text.Encoding encoding, System.Int32 bufferSize)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.IO.StreamWriter(path, append, encoding, bufferSize);
        }

        /// <summary/>
        public virtual System.Boolean AutoFlush
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AutoFlush; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoFlush = value; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.StreamSW BaseStream
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.StreamSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.BaseStream); }
        }
        /// <summary/>
        public override System.Text.Encoding Encoding
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Encoding; }
        }
        /// <summary/>
        public static new Microsoft.Test.Security.Wrappers.StreamWriterSW Null
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.StreamWriterSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.StreamWriter.Null); }
        }
        /// <summary/>
        public override void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public override void Flush()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Flush();
        }

        /// <summary/>
        public override void Write(System.Char value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public override void Write(System.Char[] buffer)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(buffer);
        }

        /// <summary/>
        public override void Write(System.Char[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(buffer, index, count);
        }

        /// <summary/>
        public override void Write(System.String value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.IO.TextWriter</summary>
    [System.CLSCompliant(false)]
    public class TextWriterSW : Microsoft.Test.Security.Wrappers.MarshalByRefObjectSW, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.TextWriterSW Wrap(System.IO.TextWriter o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.TextWriterSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.IO.TextWriter InnerObject
        {
            get { return innerObject as System.IO.TextWriter; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal TextWriterSW(System.IO.TextWriter o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal TextWriterSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected TextWriterSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        protected TextWriterSW(System.IFormatProvider formatProvider)
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public virtual System.IFormatProvider FormatProvider
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FormatProvider; }
        }
        /// <summary/>
        public virtual System.Text.Encoding Encoding
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Encoding; }
        }
        /// <summary/>
        public virtual System.String NewLine
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.NewLine; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.NewLine = value; }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TextWriterSW Null
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TextWriterSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.TextWriter.Null); }
        }
        /// <summary/>
        public virtual void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public virtual void Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Dispose();
        }

        /// <summary/>
        public virtual void Flush()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Flush();
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TextWriterSW Synchronized(System.IO.TextWriter writer)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TextWriterSW)WrapperclassesSecurityWarehouse.Wrap(System.IO.TextWriter.Synchronized(writer));
        }

        /// <summary/>
        public virtual void Write(System.Char value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.Char[] buffer)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(buffer);
        }

        /// <summary/>
        public virtual void Write(System.Char[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(buffer, index, count);
        }

        /// <summary/>
        public virtual void Write(System.Boolean value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.Int32 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.UInt32 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.Int64 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.UInt64 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.Single value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.Double value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.Decimal value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.String value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.Object value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(value);
        }

        /// <summary/>
        public virtual void Write(System.String format, System.Object arg0)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(format, arg0);
        }

        /// <summary/>
        public virtual void Write(System.String format, System.Object arg0, System.Object arg1)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(format, arg0, arg1);
        }

        /// <summary/>
        public virtual void Write(System.String format, System.Object arg0, System.Object arg1, System.Object arg2)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(format, arg0, arg1, arg2);
        }

        /// <summary/>
        public virtual void Write(System.String format, System.Object[] arg)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Write(format, arg);
        }

        /// <summary/>
        public virtual void WriteLine()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine();
        }

        /// <summary/>
        public virtual void WriteLine(System.Char value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine(value);
        }

        /// <summary/>
        public virtual void WriteLine(System.Char[] buffer)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine(buffer);
        }

        /// <summary/>
        public virtual void WriteLine(System.Char[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine(buffer, index, count);
        }

        /// <summary/>
        public virtual void WriteLine(System.Boolean value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine(value);
        }

        /// <summary/>
        public virtual void WriteLine(System.Int32 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine(value);
        }

        /// <summary/>
        public virtual void WriteLine(System.UInt32 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine(value);
        }

        /// <summary/>
        public virtual void WriteLine(System.Int64 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine(value);
        }

        /// <summary/>
        public virtual void WriteLine(System.UInt64 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine(value);
        }

        /// <summary/>
        public virtual void WriteLine(System.Single value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine(value);
        }

        /// <summary/>
        public virtual void WriteLine(System.Double value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine(value);
        }

        /// <summary/>
        public virtual void WriteLine(System.Decimal value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine(value);
        }

        /// <summary/>
        public virtual void WriteLine(System.String value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine(value);
        }

        /// <summary/>
        public virtual void WriteLine(System.Object value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine(value);
        }

        /// <summary/>
        public virtual void WriteLine(System.String format, System.Object arg0)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine(format, arg0);
        }

        /// <summary/>
        public virtual void WriteLine(System.String format, System.Object arg0, System.Object arg1)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine(format, arg0, arg1);
        }

        /// <summary/>
        public virtual void WriteLine(System.String format, System.Object arg0, System.Object arg1, System.Object arg2)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine(format, arg0, arg1, arg2);
        }

        /// <summary/>
        public virtual void WriteLine(System.String format, System.Object[] arg)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteLine(format, arg);
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.Activator</summary>
    [System.CLSCompliant(false)]
    public class ActivatorSW : System.Object, System.Runtime.InteropServices._Activator
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ActivatorSW Wrap(System.Activator o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ActivatorSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Activator InnerObject
        {
            get { return innerObject as System.Activator; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ActivatorSW(System.Activator o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ActivatorSW(System.DayOfWeek day) { }

        /// <summary/>
        public static System.Object CreateInstance(System.Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture, System.Object[] activationAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstance(type, bindingAttr, binder, args, culture, activationAttributes);
        }

        /// <summary/>
        public static System.Runtime.Remoting.ObjectHandle CreateInstance(System.String assemblyName, System.String typeName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstance(assemblyName, typeName);
        }

        /// <summary/>
        public static System.Object CreateInstance(System.Type type, System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstance(type, nonPublic);
        }

        /// <summary/>
        public static System.Object CreateInstance(System.Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstance(type, bindingAttr, binder, args, culture);
        }

        /// <summary/>
        public static System.Object CreateInstance(System.Type type, System.Object[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstance(type, args);
        }

        /// <summary/>
        public static System.Object CreateInstance(System.Type type, System.Object[] args, System.Object[] activationAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstance(type, args, activationAttributes);
        }

        /// <summary/>
        public static System.Object CreateInstance(System.Type type)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstance(type);
        }

        /// <summary/>
        public static System.Runtime.Remoting.ObjectHandle CreateInstance(System.String assemblyName, System.String typeName, System.Object[] activationAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstance(assemblyName, typeName, activationAttributes);
        }

        /// <summary/>
        public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(System.String assemblyFile, System.String typeName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstanceFrom(assemblyFile, typeName);
        }

        /// <summary/>
        public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(System.String assemblyFile, System.String typeName, System.Object[] activationAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstanceFrom(assemblyFile, typeName, activationAttributes);
        }

        /// <summary/>
        public static System.Runtime.Remoting.ObjectHandle CreateInstance(System.String assemblyName, System.String typeName, System.Boolean ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture, System.Object[] activationAttributes, System.Security.Policy.Evidence securityInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstance(assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityInfo);
        }

        /// <summary/>
        public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(System.String assemblyFile, System.String typeName, System.Boolean ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture, System.Object[] activationAttributes, System.Security.Policy.Evidence securityInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstanceFrom(assemblyFile, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityInfo);
        }

        /// <summary/>
        public static System.Runtime.Remoting.ObjectHandle CreateInstance(System.AppDomain domain, System.String assemblyName, System.String typeName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstance(domain, assemblyName, typeName);
        }

        /// <summary/>
        public static System.Runtime.Remoting.ObjectHandle CreateInstance(System.AppDomain domain, System.String assemblyName, System.String typeName, System.Boolean ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture, System.Object[] activationAttributes, System.Security.Policy.Evidence securityAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstance(domain, assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes);
        }

        /// <summary/>
        public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(System.AppDomain domain, System.String assemblyFile, System.String typeName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstanceFrom(domain, assemblyFile, typeName);
        }

        /// <summary/>
        public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(System.AppDomain domain, System.String assemblyFile, System.String typeName, System.Boolean ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture, System.Object[] activationAttributes, System.Security.Policy.Evidence securityAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstanceFrom(domain, assemblyFile, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes);
        }

        /// <summary/>
        public static System.Runtime.Remoting.ObjectHandle CreateInstance(System.ActivationContext activationContext)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstance(activationContext);
        }

        /// <summary/>
        public static System.Runtime.Remoting.ObjectHandle CreateInstance(System.ActivationContext activationContext, System.String[] activationCustomData)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateInstance(activationContext, activationCustomData);
        }

        /// <summary/>
        public static System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom(System.String assemblyName, System.String typeName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateComInstanceFrom(assemblyName, typeName);
        }

        /// <summary/>
        public static System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom(System.String assemblyName, System.String typeName, System.Byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.CreateComInstanceFrom(assemblyName, typeName, hashValue, hashAlgorithm);
        }

        /// <summary/>
        public static System.Object GetObject(System.Type type, System.String url)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.GetObject(type, url);
        }

        /// <summary/>
        public static System.Object GetObject(System.Type type, System.String url, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Activator.GetObject(type, url, state);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Activator.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Activator)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Activator.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Activator)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Activator.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Activator)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Activator.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Activator)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }


    }

    /// <summary>Security Wrapper for Type: System.Type</summary>
    [System.CLSCompliant(false)]
    public class TypeSW : Microsoft.Test.Security.Wrappers.MemberInfoSW, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo, System.Runtime.InteropServices._Type, System.Reflection.IReflect
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.TypeSW Wrap(System.Type o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.TypeSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Type InnerObject
        {
            get { return innerObject as System.Type; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal TypeSW(System.Type o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal TypeSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected TypeSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public override System.Reflection.MemberTypes MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MemberType; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DeclaringType); }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodBaseSW DeclaringMethod
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.MethodBaseSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DeclaringMethod); }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ReflectedType); }
        }
        /// <summary/>
        public virtual System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.StructLayoutAttribute; }
        }
        /// <summary/>
        public virtual System.Guid GUID
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.GUID; }
        }
        /// <summary/>
        public static System.Reflection.Binder DefaultBinder
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Type.DefaultBinder; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.ModuleSW Module
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ModuleSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Module); }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblySW Assembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Assembly); }
        }
        /// <summary/>
        public virtual System.RuntimeTypeHandle TypeHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.TypeHandle; }
        }
        /// <summary/>
        public virtual System.String FullName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FullName; }
        }
        /// <summary/>
        public virtual System.String Namespace
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Namespace; }
        }
        /// <summary/>
        public virtual System.String AssemblyQualifiedName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AssemblyQualifiedName; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW BaseType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.BaseType); }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ConstructorInfoSW TypeInitializer
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ConstructorInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.TypeInitializer); }
        }
        /// <summary/>
        public System.Boolean IsNested
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsNested; }
        }
        /// <summary/>
        public virtual System.Reflection.TypeAttributes Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Attributes; }
        }
        /// <summary/>
        public virtual System.Reflection.GenericParameterAttributes GenericParameterAttributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.GenericParameterAttributes; }
        }
        /// <summary/>
        public System.Boolean IsVisible
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsVisible; }
        }
        /// <summary/>
        public virtual System.Boolean IsNotPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsNotPublic; }
        }
        /// <summary/>
        public virtual System.Boolean IsPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsPublic; }
        }
        /// <summary/>
        public virtual System.Boolean IsNestedPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsNestedPublic; }
        }
        /// <summary/>
        public virtual System.Boolean IsNestedPrivate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsNestedPrivate; }
        }
        /// <summary/>
        public virtual System.Boolean IsNestedFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsNestedFamily; }
        }
        /// <summary/>
        public virtual System.Boolean IsNestedAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsNestedAssembly; }
        }
        /// <summary/>
        public virtual System.Boolean IsNestedFamANDAssem
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsNestedFamANDAssem; }
        }
        /// <summary/>
        public virtual System.Boolean IsNestedFamORAssem
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsNestedFamORAssem; }
        }
        /// <summary/>
        public virtual System.Boolean IsAutoLayout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsAutoLayout; }
        }
        /// <summary/>
        public virtual System.Boolean IsLayoutSequential
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsLayoutSequential; }
        }
        /// <summary/>
        public virtual System.Boolean IsExplicitLayout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsExplicitLayout; }
        }
        /// <summary/>
        public virtual System.Boolean IsClass
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsClass; }
        }
        /// <summary/>
        public virtual System.Boolean IsInterface
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsInterface; }
        }
        /// <summary/>
        public virtual System.Boolean IsValueType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsValueType; }
        }
        /// <summary/>
        public virtual System.Boolean IsAbstract
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsAbstract; }
        }
        /// <summary/>
        public virtual System.Boolean IsSealed
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsSealed; }
        }
        /// <summary/>
        public virtual System.Boolean IsEnum
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsEnum; }
        }
        /// <summary/>
        public virtual System.Boolean IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsSpecialName; }
        }
        /// <summary/>
        public virtual System.Boolean IsImport
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsImport; }
        }
        /// <summary/>
        public virtual System.Boolean IsSerializable
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsSerializable; }
        }
        /// <summary/>
        public virtual System.Boolean IsAnsiClass
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsAnsiClass; }
        }
        /// <summary/>
        public virtual System.Boolean IsUnicodeClass
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsUnicodeClass; }
        }
        /// <summary/>
        public virtual System.Boolean IsAutoClass
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsAutoClass; }
        }
        /// <summary/>
        public virtual System.Boolean IsArray
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsArray; }
        }
        /// <summary/>
        public virtual System.Boolean IsGenericType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsGenericType; }
        }
        /// <summary/>
        public virtual System.Boolean IsGenericTypeDefinition
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsGenericTypeDefinition; }
        }
        /// <summary/>
        public virtual System.Boolean IsGenericParameter
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsGenericParameter; }
        }
        /// <summary/>
        public virtual System.Int32 GenericParameterPosition
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.GenericParameterPosition; }
        }
        /// <summary/>
        public virtual System.Boolean ContainsGenericParameters
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ContainsGenericParameters; }
        }
        /// <summary/>
        public virtual System.Boolean IsByRef
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsByRef; }
        }
        /// <summary/>
        public virtual System.Boolean IsPointer
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsPointer; }
        }
        /// <summary/>
        public virtual System.Boolean IsPrimitive
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsPrimitive; }
        }
        /// <summary/>
        public virtual System.Boolean IsCOMObject
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsCOMObject; }
        }
        /// <summary/>
        public virtual System.Boolean HasElementType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HasElementType; }
        }
        /// <summary/>
        public virtual System.Boolean IsContextful
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsContextful; }
        }
        /// <summary/>
        public virtual System.Boolean IsMarshalByRef
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsMarshalByRef; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW UnderlyingSystemType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.UnderlyingSystemType); }
        }
        /// <summary/>
        public static System.Reflection.MemberFilter FilterAttribute
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Type.FilterAttribute; }
        }
        /// <summary/>
        public static System.Reflection.MemberFilter FilterName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Type.FilterName; }
        }
        /// <summary/>
        public static System.Reflection.MemberFilter FilterNameIgnoreCase
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Type.FilterNameIgnoreCase; }
        }
        /// <summary/>
        public static System.Object Missing
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Type.Missing; }
        }
        /// <summary/>
        public static System.Char Delimiter
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Type.Delimiter; }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TypeSW[] EmptyTypes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(System.Type.EmptyTypes); }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TypeSW GetTypeFromHandle(System.RuntimeTypeHandle handle)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(System.Type.GetTypeFromHandle(handle));
        }

        /// <summary/>
        public static System.RuntimeTypeHandle GetTypeHandle(System.Object o)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Type.GetTypeHandle(o);
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.TypeSW GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetType());
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TypeSW GetType(System.String typeName, System.Boolean throwOnError, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(System.Type.GetType(typeName, throwOnError, ignoreCase));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TypeSW GetType(System.String typeName, System.Boolean throwOnError)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(System.Type.GetType(typeName, throwOnError));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TypeSW GetType(System.String typeName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(System.Type.GetType(typeName));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TypeSW ReflectionOnlyGetType(System.String typeName, System.Boolean throwIfNotFound, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(System.Type.ReflectionOnlyGetType(typeName, throwIfNotFound, ignoreCase));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW MakePointerType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.MakePointerType());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW MakeByRefType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.MakeByRefType());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW MakeArrayType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.MakeArrayType());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW MakeArrayType(System.Int32 rank)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.MakeArrayType(rank));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TypeSW GetTypeFromProgID(System.String progID)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(System.Type.GetTypeFromProgID(progID));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TypeSW GetTypeFromProgID(System.String progID, System.Boolean throwOnError)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(System.Type.GetTypeFromProgID(progID, throwOnError));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TypeSW GetTypeFromProgID(System.String progID, System.String server)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(System.Type.GetTypeFromProgID(progID, server));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TypeSW GetTypeFromProgID(System.String progID, System.String server, System.Boolean throwOnError)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(System.Type.GetTypeFromProgID(progID, server, throwOnError));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TypeSW GetTypeFromCLSID(System.Guid clsid)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(System.Type.GetTypeFromCLSID(clsid));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TypeSW GetTypeFromCLSID(System.Guid clsid, System.Boolean throwOnError)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(System.Type.GetTypeFromCLSID(clsid, throwOnError));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TypeSW GetTypeFromCLSID(System.Guid clsid, System.String server)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(System.Type.GetTypeFromCLSID(clsid, server));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TypeSW GetTypeFromCLSID(System.Guid clsid, System.String server, System.Boolean throwOnError)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(System.Type.GetTypeFromCLSID(clsid, server, throwOnError));
        }

        /// <summary/>
        public static System.TypeCode GetTypeCode(System.Type type)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Type.GetTypeCode(type);
        }

        /// <summary/>
        public virtual System.Object InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, System.String[] namedParameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.InvokeMember(name, invokeAttr, binder, target, args, modifiers, culture, namedParameters);
        }

        /// <summary/>
        public virtual System.Object InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.InvokeMember(name, invokeAttr, binder, target, args, culture);
        }

        /// <summary/>
        public virtual System.Object InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.InvokeMember(name, invokeAttr, binder, target, args);
        }

        /// <summary/>
        public virtual System.Int32 GetArrayRank()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetArrayRank();
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ConstructorInfoSW GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ConstructorInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetConstructor(bindingAttr, binder, callConvention, types, modifiers));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ConstructorInfoSW GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ConstructorInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetConstructor(bindingAttr, binder, types, modifiers));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ConstructorInfoSW GetConstructor(System.Type[] types)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ConstructorInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetConstructor(types));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ConstructorInfoSW[] GetConstructors()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ConstructorInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetConstructors());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ConstructorInfoSW[] GetConstructors(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ConstructorInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetConstructors(bindingAttr));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMethod(name, bindingAttr, binder, callConvention, types, modifiers));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMethod(name, bindingAttr, binder, types, modifiers));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetMethod(System.String name, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMethod(name, types, modifiers));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetMethod(System.String name, System.Type[] types)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMethod(name, types));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMethod(name, bindingAttr));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetMethod(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMethod(name));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW[] GetMethods()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMethods());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW[] GetMethods(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMethods(bindingAttr));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.FieldInfoSW GetField(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetField(name, bindingAttr));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.FieldInfoSW GetField(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetField(name));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.FieldInfoSW[] GetFields()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFields());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.FieldInfoSW[] GetFields(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFields(bindingAttr));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW GetInterface(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetInterface(name));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW GetInterface(System.String name, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetInterface(name, ignoreCase));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW[] GetInterfaces()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetInterfaces());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW[] FindInterfaces(System.Reflection.TypeFilter filter, System.Object filterCriteria)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.FindInterfaces(filter, filterCriteria));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.EventInfoSW GetEvent(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.EventInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetEvent(name));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.EventInfoSW GetEvent(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.EventInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetEvent(name, bindingAttr));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.EventInfoSW[] GetEvents()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.EventInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetEvents());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.EventInfoSW[] GetEvents(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.EventInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetEvents(bindingAttr));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.PropertyInfoSW GetProperty(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.PropertyInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetProperty(name, bindingAttr, binder, returnType, types, modifiers));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.PropertyInfoSW GetProperty(System.String name, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.PropertyInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetProperty(name, returnType, types, modifiers));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.PropertyInfoSW GetProperty(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.PropertyInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetProperty(name, bindingAttr));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.PropertyInfoSW GetProperty(System.String name, System.Type returnType, System.Type[] types)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.PropertyInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetProperty(name, returnType, types));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.PropertyInfoSW GetProperty(System.String name, System.Type[] types)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.PropertyInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetProperty(name, types));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.PropertyInfoSW GetProperty(System.String name, System.Type returnType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.PropertyInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetProperty(name, returnType));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.PropertyInfoSW GetProperty(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.PropertyInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetProperty(name));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.PropertyInfoSW[] GetProperties(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.PropertyInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetProperties(bindingAttr));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.PropertyInfoSW[] GetProperties()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.PropertyInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetProperties());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW[] GetNestedTypes()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetNestedTypes());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW[] GetNestedTypes(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetNestedTypes(bindingAttr));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW GetNestedType(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetNestedType(name));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW GetNestedType(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetNestedType(name, bindingAttr));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MemberInfoSW[] GetMember(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MemberInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMember(name));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MemberInfoSW[] GetMember(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MemberInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMember(name, bindingAttr));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MemberInfoSW[] GetMember(System.String name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MemberInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMember(name, type, bindingAttr));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MemberInfoSW[] GetMembers()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MemberInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMembers());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MemberInfoSW[] GetMembers(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MemberInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMembers(bindingAttr));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MemberInfoSW[] GetDefaultMembers()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MemberInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetDefaultMembers());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MemberInfoSW[] FindMembers(System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, System.Object filterCriteria)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MemberInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.FindMembers(memberType, bindingAttr, filter, filterCriteria));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW[] GetGenericParameterConstraints()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetGenericParameterConstraints());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW MakeGenericType(System.Type[] typeArguments)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.MakeGenericType(typeArguments));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW GetElementType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetElementType());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW[] GetGenericArguments()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetGenericArguments());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW GetGenericTypeDefinition()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetGenericTypeDefinition());
        }

        /// <summary/>
        public virtual System.Boolean IsSubclassOf(System.Type c)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsSubclassOf(c);
        }

        /// <summary/>
        public virtual System.Boolean IsInstanceOfType(System.Object o)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsInstanceOfType(o);
        }

        /// <summary/>
        public virtual System.Boolean IsAssignableFrom(System.Type c)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsAssignableFrom(c);
        }

        /// <summary/>
        public override System.String ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ToString();
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.TypeSW[] GetTypeArray(System.Object[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(System.Type.GetTypeArray(args));
        }

        /// <summary/>
        public override System.Boolean Equals(System.Object o)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Equals(o);
        }

        /// <summary/>
        public virtual System.Boolean Equals(System.Type o)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Equals(o);
        }

        /// <summary/>
        public override System.Int32 GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetHashCode();
        }

        /// <summary/>
        public virtual System.Reflection.InterfaceMapping GetInterfaceMap(System.Type interfaceType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetInterfaceMap(interfaceType);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MemberInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MemberInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name);
        }

        /// <summary/>
        System.Reflection.MethodInfo[] System.Runtime.InteropServices._Type.GetMethods()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethods();
        }

        /// <summary/>
        System.Reflection.FieldInfo System.Runtime.InteropServices._Type.GetField(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetField(name);
        }

        /// <summary/>
        System.Reflection.FieldInfo[] System.Runtime.InteropServices._Type.GetFields()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetFields();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetInterface(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetInterface(name);
        }

        /// <summary/>
        System.Reflection.EventInfo System.Runtime.InteropServices._Type.GetEvent(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetEvent(name);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, returnType, types, modifiers);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Type returnType, System.Type[] types)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, returnType, types);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Type[] types)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, types);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Type returnType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, returnType);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name);
        }

        /// <summary/>
        System.Reflection.PropertyInfo[] System.Runtime.InteropServices._Type.GetProperties()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperties();
        }

        /// <summary/>
        System.Type[] System.Runtime.InteropServices._Type.GetNestedTypes()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetNestedTypes();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetNestedType(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetNestedType(name);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetMember(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMember(name);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetMembers()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMembers();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.Equals(System.Type o)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).Equals(o);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Type.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Type)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Type)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Type.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Type)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Type.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Type)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._Type.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._Type.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._Type.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._Type.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._Type.GetArrayRank()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetArrayRank();
        }

        /// <summary/>
        System.Reflection.ConstructorInfo[] System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetConstructors(bindingAttr);
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetInterface(System.String name, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetInterface(name, ignoreCase);
        }

        /// <summary/>
        System.Type[] System.Runtime.InteropServices._Type.GetInterfaces()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetInterfaces();
        }

        /// <summary/>
        System.Type[] System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter filter, System.Object filterCriteria)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).FindInterfaces(filter, filterCriteria);
        }

        /// <summary/>
        System.Reflection.EventInfo System.Runtime.InteropServices._Type.GetEvent(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetEvent(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.EventInfo[] System.Runtime.InteropServices._Type.GetEvents()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetEvents();
        }

        /// <summary/>
        System.Reflection.EventInfo[] System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetEvents(bindingAttr);
        }

        /// <summary/>
        System.Type[] System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetNestedTypes(bindingAttr);
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetNestedType(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetNestedType(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetMember(System.String name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMember(name, type, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetDefaultMembers()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetDefaultMembers();
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, System.Object filterCriteria)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).FindMembers(memberType, bindingAttr, filter, filterCriteria);
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetElementType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetElementType();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsSubclassOf(System.Type c)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).IsSubclassOf(c);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object o)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).IsInstanceOfType(o);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type c)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).IsAssignableFrom(c);
        }

        /// <summary/>
        System.Reflection.InterfaceMapping System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type interfaceType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetInterfaceMap(interfaceType);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name, bindingAttr, binder, types, modifiers);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MethodInfo[] System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethods(bindingAttr);
        }

        /// <summary/>
        System.Reflection.FieldInfo System.Runtime.InteropServices._Type.GetField(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetField(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.FieldInfo[] System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetFields(bindingAttr);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, bindingAttr, binder, returnType, types, modifiers);
        }

        /// <summary/>
        System.Reflection.PropertyInfo[] System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperties(bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetMember(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMember(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMembers(bindingAttr);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._Type.InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, System.String[] namedParameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).InvokeMember(name, invokeAttr, binder, target, args, modifiers, culture, namedParameters);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._Type.InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).InvokeMember(name, invokeAttr, binder, target, args, culture);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._Type.InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).InvokeMember(name, invokeAttr, binder, target, args);
        }

        /// <summary/>
        System.Reflection.ConstructorInfo System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetConstructor(bindingAttr, binder, callConvention, types, modifiers);
        }

        /// <summary/>
        System.Reflection.ConstructorInfo System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetConstructor(bindingAttr, binder, types, modifiers);
        }

        /// <summary/>
        System.Reflection.ConstructorInfo System.Runtime.InteropServices._Type.GetConstructor(System.Type[] types)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetConstructor(types);
        }

        /// <summary/>
        System.Reflection.ConstructorInfo[] System.Runtime.InteropServices._Type.GetConstructors()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetConstructors();
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name, bindingAttr, binder, callConvention, types, modifiers);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name, types, modifiers);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name, System.Type[] types)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name, types);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._Type.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Type.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.Guid System.Runtime.InteropServices._Type.GUID
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).GUID; }
        }
        /// <summary/>
        System.Reflection.Module System.Runtime.InteropServices._Type.Module
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).Module; }
        }
        /// <summary/>
        System.Reflection.Assembly System.Runtime.InteropServices._Type.Assembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).Assembly; }
        }
        /// <summary/>
        System.RuntimeTypeHandle System.Runtime.InteropServices._Type.TypeHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).TypeHandle; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Type.FullName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).FullName; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Type.Namespace
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).Namespace; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Type.AssemblyQualifiedName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).AssemblyQualifiedName; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.BaseType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).BaseType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.UnderlyingSystemType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).UnderlyingSystemType; }
        }
        /// <summary/>
        System.Reflection.ConstructorInfo System.Runtime.InteropServices._Type.TypeInitializer
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).TypeInitializer; }
        }
        /// <summary/>
        System.Reflection.TypeAttributes System.Runtime.InteropServices._Type.Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).Attributes; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNotPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNotPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedPrivate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedPrivate; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedFamily; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedFamANDAssem
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedFamANDAssem; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedFamORAssem
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedFamORAssem; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsAutoLayout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsAutoLayout; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsLayoutSequential
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsLayoutSequential; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsExplicitLayout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsExplicitLayout; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsClass
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsClass; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsInterface
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsInterface; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsValueType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsValueType; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsAbstract
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsAbstract; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsSealed
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsSealed; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsEnum
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsEnum; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsSpecialName; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsImport
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsImport; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsSerializable
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsSerializable; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsAnsiClass
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsAnsiClass; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsUnicodeClass
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsUnicodeClass; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsAutoClass
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsAutoClass; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsArray
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsArray; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsByRef
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsByRef; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsPointer
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsPointer; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsPrimitive
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsPrimitive; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsCOMObject
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsCOMObject; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.HasElementType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).HasElementType; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsContextful
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsContextful; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsMarshalByRef
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsMarshalByRef; }
        }
        /// <summary/>
        System.Reflection.MethodInfo System.Reflection.IReflect.GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetMethod(name, bindingAttr, binder, types, modifiers);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Reflection.IReflect.GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetMethod(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MethodInfo[] System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetMethods(bindingAttr);
        }

        /// <summary/>
        System.Reflection.FieldInfo System.Reflection.IReflect.GetField(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetField(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.FieldInfo[] System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetFields(bindingAttr);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Reflection.IReflect.GetProperty(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetProperty(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Reflection.IReflect.GetProperty(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetProperty(name, bindingAttr, binder, returnType, types, modifiers);
        }

        /// <summary/>
        System.Reflection.PropertyInfo[] System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetProperties(bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Reflection.IReflect.GetMember(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetMember(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetMembers(bindingAttr);
        }

        /// <summary/>
        System.Object System.Reflection.IReflect.InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, System.String[] namedParameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).InvokeMember(name, invokeAttr, binder, target, args, modifiers, culture, namedParameters);
        }

        /// <summary/>
        System.Type System.Reflection.IReflect.UnderlyingSystemType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Reflection.IReflect)InnerObject).UnderlyingSystemType; }
        }

    }

    /// <summary>Security Wrapper for Type: System.Reflection.MemberInfo</summary>
    [System.CLSCompliant(false)]
    public class MemberInfoSW : System.Object, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.MemberInfoSW Wrap(System.Reflection.MemberInfo o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.MemberInfoSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Reflection.MemberInfo InnerObject
        {
            get { return innerObject as System.Reflection.MemberInfo; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal MemberInfoSW(System.Reflection.MemberInfo o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal MemberInfoSW(System.DayOfWeek day) { }

        /// <summary/>
        protected MemberInfoSW()
        {
        }

        /// <summary/>
        public virtual System.Reflection.MemberTypes MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MemberType; }
        }
        /// <summary/>
        public virtual System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DeclaringType); }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ReflectedType); }
        }
        /// <summary/>
        public virtual System.Int32 MetadataToken
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MetadataToken; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ModuleSW Module
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ModuleSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Module); }
        }
        /// <summary/>
        public virtual System.Object[] GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(inherit);
        }

        /// <summary/>
        public virtual System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        public virtual System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MemberInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MemberInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ReflectedType; }
        }

    }

    /// <summary>Security Wrapper for Type: System.Reflection.Assembly</summary>
    [System.CLSCompliant(false)]
    public class AssemblySW : System.Object, System.Runtime.InteropServices._Assembly, System.Security.IEvidenceFactory, System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.ISerializable
    {
        /// <summary>Wraps an Existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.AssemblySW Wrap(System.Reflection.Assembly o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.AssemblySW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Reflection.Assembly InnerObject
        {
            get { return innerObject as System.Reflection.Assembly; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal AssemblySW(System.Reflection.Assembly o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal AssemblySW(System.DayOfWeek day) { }

        /// <summary/>
        public virtual System.String CodeBase
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CodeBase; }
        }
        /// <summary/>
        public virtual System.String EscapedCodeBase
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.EscapedCodeBase; }
        }
        /// <summary/>
        public virtual System.String FullName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FullName; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW EntryPoint
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.EntryPoint); }
        }
        /// <summary/>
        public virtual System.Security.Policy.Evidence Evidence
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Evidence; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ModuleSW ManifestModule
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ModuleSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ManifestModule); }
        }
        /// <summary/>
        public virtual System.Boolean ReflectionOnly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ReflectionOnly; }
        }
        /// <summary/>
        public virtual System.String Location
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Location; }
        }
        /// <summary/>
        public virtual System.String ImageRuntimeVersion
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ImageRuntimeVersion; }
        }
        /// <summary/>
        public virtual System.Boolean GlobalAssemblyCache
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.GlobalAssemblyCache; }
        }
        /// <summary/>
        public System.Int64 HostContext
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HostContext; }
        }
        /// <summary/>
        public static System.String CreateQualifiedName(System.String assemblyName, System.String typeName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Reflection.Assembly.CreateQualifiedName(assemblyName, typeName);
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW GetType(System.String name, System.Boolean throwOnError, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetType(name, throwOnError, ignoreCase));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW[] GetExportedTypes()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetExportedTypes());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ModuleSW GetModule(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ModuleSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetModule(name));
        }

        /// <summary/>
        public virtual System.Reflection.AssemblyName[] GetReferencedAssemblies()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetReferencedAssemblies();
        }

        /// <summary/>
        public virtual System.Reflection.AssemblyName GetName()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetName();
        }

        /// <summary/>
        public virtual System.Reflection.AssemblyName GetName(System.Boolean copiedName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetName(copiedName);
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW GetAssembly(System.Type type)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.GetAssembly(type));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW GetType(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetType(name));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW GetType(System.String name, System.Boolean throwOnError)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetType(name, throwOnError));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW[] GetTypes()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetTypes());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.StreamSW GetManifestResourceStream(System.Type type, System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.StreamSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetManifestResourceStream(type, name));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.StreamSW GetManifestResourceStream(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.StreamSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetManifestResourceStream(name));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblySW GetSatelliteAssembly(System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetSatelliteAssembly(culture));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.AssemblySW GetSatelliteAssembly(System.Globalization.CultureInfo culture, System.Version version)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetSatelliteAssembly(culture, version));
        }

        /// <summary/>
        public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.GetObjectData(info, context);
        }

        /// <summary/>
        public virtual System.Object[] GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(inherit);
        }

        /// <summary/>
        public virtual System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        public virtual System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsDefined(attributeType, inherit);
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW LoadFrom(System.String assemblyFile)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.LoadFrom(assemblyFile));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW ReflectionOnlyLoadFrom(System.String assemblyFile)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.ReflectionOnlyLoadFrom(assemblyFile));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW LoadFrom(System.String assemblyFile, System.Security.Policy.Evidence securityEvidence)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.LoadFrom(assemblyFile, securityEvidence));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW LoadFrom(System.String assemblyFile, System.Security.Policy.Evidence securityEvidence, System.Byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.LoadFrom(assemblyFile, securityEvidence, hashValue, hashAlgorithm));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW Load(System.String assemblyString)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.Load(assemblyString));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW ReflectionOnlyLoad(System.String assemblyString)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.ReflectionOnlyLoad(assemblyString));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW Load(System.String assemblyString, System.Security.Policy.Evidence assemblySecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.Load(assemblyString, assemblySecurity));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW Load(System.Reflection.AssemblyName assemblyRef)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.Load(assemblyRef));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW Load(System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.Load(assemblyRef, assemblySecurity));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW Load(System.Byte[] rawAssembly)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.Load(rawAssembly));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW ReflectionOnlyLoad(System.Byte[] rawAssembly)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.ReflectionOnlyLoad(rawAssembly));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW Load(System.Byte[] rawAssembly, System.Byte[] rawSymbolStore)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.Load(rawAssembly, rawSymbolStore));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW Load(System.Byte[] rawAssembly, System.Byte[] rawSymbolStore, System.Security.Policy.Evidence securityEvidence)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.Load(rawAssembly, rawSymbolStore, securityEvidence));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW LoadFile(System.String path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.LoadFile(path));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW LoadFile(System.String path, System.Security.Policy.Evidence securityEvidence)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.LoadFile(path, securityEvidence));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ModuleSW LoadModule(System.String moduleName, System.Byte[] rawModule)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ModuleSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.LoadModule(moduleName, rawModule));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ModuleSW LoadModule(System.String moduleName, System.Byte[] rawModule, System.Byte[] rawSymbolStore)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ModuleSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.LoadModule(moduleName, rawModule, rawSymbolStore));
        }

        /// <summary/>
        public virtual System.Object CreateInstance(System.String typeName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateInstance(typeName);
        }

        /// <summary/>
        public virtual System.Object CreateInstance(System.String typeName, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateInstance(typeName, ignoreCase);
        }

        /// <summary/>
        public virtual System.Object CreateInstance(System.String typeName, System.Boolean ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture, System.Object[] activationAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateInstance(typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes);
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ModuleSW[] GetLoadedModules()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ModuleSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetLoadedModules());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ModuleSW[] GetLoadedModules(System.Boolean getResourceModules)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ModuleSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetLoadedModules(getResourceModules));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ModuleSW[] GetModules()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ModuleSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetModules());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ModuleSW[] GetModules(System.Boolean getResourceModules)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ModuleSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetModules(getResourceModules));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.FileStreamSW GetFile(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFile(name));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.FileStreamSW[] GetFiles()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFiles());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.FileStreamSW[] GetFiles(System.Boolean getResourceModules)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFiles(getResourceModules));
        }

        /// <summary/>
        public virtual System.String[] GetManifestResourceNames()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetManifestResourceNames();
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW GetExecutingAssembly()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.GetExecutingAssembly());
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW GetCallingAssembly()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.GetCallingAssembly());
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.AssemblySW GetEntryAssembly()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Assembly.GetEntryAssembly());
        }

        /// <summary/>
        public virtual System.Reflection.ManifestResourceInfo GetManifestResourceInfo(System.String resourceName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetManifestResourceInfo(resourceName);
        }

        /// <summary/>
        public override System.String ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ToString();
        }

        /// <summary/>
        public virtual event System.Reflection.ModuleResolveEventHandler ModuleResolve
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ModuleResolve += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ModuleResolve -= value; }
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._Assembly.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Assembly.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._Assembly.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Assembly.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetType();
        }

        /// <summary/>
        System.Reflection.AssemblyName System.Runtime.InteropServices._Assembly.GetName()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetName();
        }

        /// <summary/>
        System.Reflection.AssemblyName System.Runtime.InteropServices._Assembly.GetName(System.Boolean copiedName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetName(copiedName);
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Assembly.GetType(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetType(name);
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Assembly.GetType(System.String name, System.Boolean throwOnError)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetType(name, throwOnError);
        }

        /// <summary/>
        System.Type[] System.Runtime.InteropServices._Assembly.GetExportedTypes()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetExportedTypes();
        }

        /// <summary/>
        System.Type[] System.Runtime.InteropServices._Assembly.GetTypes()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetTypes();
        }

        /// <summary/>
        System.IO.Stream System.Runtime.InteropServices._Assembly.GetManifestResourceStream(System.Type type, System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetManifestResourceStream(type, name);
        }

        /// <summary/>
        System.IO.Stream System.Runtime.InteropServices._Assembly.GetManifestResourceStream(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetManifestResourceStream(name);
        }

        /// <summary/>
        System.IO.FileStream System.Runtime.InteropServices._Assembly.GetFile(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetFile(name);
        }

        /// <summary/>
        System.IO.FileStream[] System.Runtime.InteropServices._Assembly.GetFiles()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetFiles();
        }

        /// <summary/>
        System.IO.FileStream[] System.Runtime.InteropServices._Assembly.GetFiles(System.Boolean getResourceModules)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetFiles(getResourceModules);
        }

        /// <summary/>
        System.String[] System.Runtime.InteropServices._Assembly.GetManifestResourceNames()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetManifestResourceNames();
        }

        /// <summary/>
        System.Reflection.ManifestResourceInfo System.Runtime.InteropServices._Assembly.GetManifestResourceInfo(System.String resourceName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetManifestResourceInfo(resourceName);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._Assembly.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._Assembly.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Assembly.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Assembly)InnerObject).GetObjectData(info, context);
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Assembly.GetType(System.String name, System.Boolean throwOnError, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetType(name, throwOnError, ignoreCase);
        }

        /// <summary/>
        System.Reflection.Assembly System.Runtime.InteropServices._Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetSatelliteAssembly(culture);
        }

        /// <summary/>
        System.Reflection.Assembly System.Runtime.InteropServices._Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo culture, System.Version version)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetSatelliteAssembly(culture, version);
        }

        /// <summary/>
        System.Reflection.Module System.Runtime.InteropServices._Assembly.LoadModule(System.String moduleName, System.Byte[] rawModule)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).LoadModule(moduleName, rawModule);
        }

        /// <summary/>
        System.Reflection.Module System.Runtime.InteropServices._Assembly.LoadModule(System.String moduleName, System.Byte[] rawModule, System.Byte[] rawSymbolStore)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).LoadModule(moduleName, rawModule, rawSymbolStore);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._Assembly.CreateInstance(System.String typeName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).CreateInstance(typeName);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._Assembly.CreateInstance(System.String typeName, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).CreateInstance(typeName, ignoreCase);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._Assembly.CreateInstance(System.String typeName, System.Boolean ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture, System.Object[] activationAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).CreateInstance(typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes);
        }

        /// <summary/>
        System.Reflection.Module[] System.Runtime.InteropServices._Assembly.GetLoadedModules()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetLoadedModules();
        }

        /// <summary/>
        System.Reflection.Module[] System.Runtime.InteropServices._Assembly.GetLoadedModules(System.Boolean getResourceModules)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetLoadedModules(getResourceModules);
        }

        /// <summary/>
        System.Reflection.Module[] System.Runtime.InteropServices._Assembly.GetModules()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetModules();
        }

        /// <summary/>
        System.Reflection.Module[] System.Runtime.InteropServices._Assembly.GetModules(System.Boolean getResourceModules)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetModules(getResourceModules);
        }

        /// <summary/>
        System.Reflection.Module System.Runtime.InteropServices._Assembly.GetModule(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetModule(name);
        }

        /// <summary/>
        System.Reflection.AssemblyName[] System.Runtime.InteropServices._Assembly.GetReferencedAssemblies()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetReferencedAssemblies();
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._Assembly.CodeBase
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Assembly)InnerObject).CodeBase; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Assembly.EscapedCodeBase
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Assembly)InnerObject).EscapedCodeBase; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Assembly.FullName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Assembly)InnerObject).FullName; }
        }
        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Assembly.EntryPoint
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Assembly)InnerObject).EntryPoint; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Assembly.Location
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Assembly)InnerObject).Location; }
        }
        /// <summary/>
        System.Security.Policy.Evidence System.Runtime.InteropServices._Assembly.Evidence
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Assembly)InnerObject).Evidence; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Assembly.GlobalAssemblyCache
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Assembly)InnerObject).GlobalAssemblyCache; }
        }
        /// <summary/>
        System.Security.Policy.Evidence System.Security.IEvidenceFactory.Evidence
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Security.IEvidenceFactory)InnerObject).Evidence; }
        }
        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.Serialization.ISerializable)InnerObject).GetObjectData(info, context);
        }


    }

    /// <summary>Security Wrapper for Type: System.Reflection.EventInfo</summary>
    [System.CLSCompliant(false)]
    public class EventInfoSW : Microsoft.Test.Security.Wrappers.MemberInfoSW, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo, System.Runtime.InteropServices._EventInfo
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.EventInfoSW Wrap(System.Reflection.EventInfo o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.EventInfoSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Reflection.EventInfo InnerObject
        {
            get { return innerObject as System.Reflection.EventInfo; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal EventInfoSW(System.Reflection.EventInfo o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal EventInfoSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected EventInfoSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public override System.Reflection.MemberTypes MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MemberType; }
        }
        /// <summary/>
        public virtual System.Reflection.EventAttributes Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Attributes; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW EventHandlerType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.EventHandlerType); }
        }
        /// <summary/>
        public virtual System.Boolean IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsSpecialName; }
        }
        /// <summary/>
        public virtual System.Boolean IsMulticast
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsMulticast; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW[] GetOtherMethods(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetOtherMethods(nonPublic));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetAddMethod(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetAddMethod(nonPublic));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetRemoveMethod(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetRemoveMethod(nonPublic));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetRaiseMethod(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetRaiseMethod(nonPublic));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodInfoSW[] GetOtherMethods()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetOtherMethods());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetAddMethod()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetAddMethod());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetRemoveMethod()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetRemoveMethod());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetRaiseMethod()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetRaiseMethod());
        }

        /// <summary/>
        public virtual void AddEventHandler(System.Object target, System.Delegate handler)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.AddEventHandler(target, handler);
        }

        /// <summary/>
        public virtual void RemoveEventHandler(System.Object target, System.Delegate handler)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.RemoveEventHandler(target, handler);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MemberInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MemberInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._EventInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._EventInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._EventInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._EventInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._EventInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._EventInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._EventInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._EventInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._EventInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._EventInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._EventInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._EventInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._EventInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._EventInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._EventInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._EventInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._EventInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._EventInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._EventInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._EventInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._EventInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._EventInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._EventInfo.GetAddMethod(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._EventInfo)InnerObject).GetAddMethod(nonPublic);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._EventInfo.GetRemoveMethod(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._EventInfo)InnerObject).GetRemoveMethod(nonPublic);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._EventInfo.GetRaiseMethod(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._EventInfo)InnerObject).GetRaiseMethod(nonPublic);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._EventInfo.GetAddMethod()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._EventInfo)InnerObject).GetAddMethod();
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._EventInfo.GetRemoveMethod()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._EventInfo)InnerObject).GetRemoveMethod();
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._EventInfo.GetRaiseMethod()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._EventInfo)InnerObject).GetRaiseMethod();
        }

        /// <summary/>
        void System.Runtime.InteropServices._EventInfo.AddEventHandler(System.Object target, System.Delegate handler)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._EventInfo)InnerObject).AddEventHandler(target, handler);
        }

        /// <summary/>
        void System.Runtime.InteropServices._EventInfo.RemoveEventHandler(System.Object target, System.Delegate handler)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._EventInfo)InnerObject).RemoveEventHandler(target, handler);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._EventInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._EventInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._EventInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._EventInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._EventInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._EventInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._EventInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._EventInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.Reflection.EventAttributes System.Runtime.InteropServices._EventInfo.Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._EventInfo)InnerObject).Attributes; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._EventInfo.EventHandlerType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._EventInfo)InnerObject).EventHandlerType; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._EventInfo.IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._EventInfo)InnerObject).IsSpecialName; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._EventInfo.IsMulticast
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._EventInfo)InnerObject).IsMulticast; }
        }

    }

    /// <summary>Security Wrapper for Type: System.Reflection.FieldInfo</summary>
    [System.CLSCompliant(false)]
    public class FieldInfoSW : Microsoft.Test.Security.Wrappers.MemberInfoSW, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo, System.Runtime.InteropServices._FieldInfo
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.FieldInfoSW Wrap(System.Reflection.FieldInfo o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.FieldInfoSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Reflection.FieldInfo InnerObject
        {
            get { return innerObject as System.Reflection.FieldInfo; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal FieldInfoSW(System.Reflection.FieldInfo o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal FieldInfoSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected FieldInfoSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public override System.Reflection.MemberTypes MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MemberType; }
        }
        /// <summary/>
        public virtual System.RuntimeFieldHandle FieldHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FieldHandle; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW FieldType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.FieldType); }
        }
        /// <summary/>
        public virtual System.Reflection.FieldAttributes Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Attributes; }
        }
        /// <summary/>
        public virtual System.Boolean IsPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsPublic; }
        }
        /// <summary/>
        public virtual System.Boolean IsPrivate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsPrivate; }
        }
        /// <summary/>
        public virtual System.Boolean IsFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsFamily; }
        }
        /// <summary/>
        public virtual System.Boolean IsAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsAssembly; }
        }
        /// <summary/>
        public virtual System.Boolean IsFamilyAndAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsFamilyAndAssembly; }
        }
        /// <summary/>
        public virtual System.Boolean IsFamilyOrAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsFamilyOrAssembly; }
        }
        /// <summary/>
        public virtual System.Boolean IsStatic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsStatic; }
        }
        /// <summary/>
        public virtual System.Boolean IsInitOnly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsInitOnly; }
        }
        /// <summary/>
        public virtual System.Boolean IsLiteral
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsLiteral; }
        }
        /// <summary/>
        public virtual System.Boolean IsNotSerialized
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsNotSerialized; }
        }
        /// <summary/>
        public virtual System.Boolean IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsSpecialName; }
        }
        /// <summary/>
        public virtual System.Boolean IsPinvokeImpl
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsPinvokeImpl; }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.FieldInfoSW GetFieldFromHandle(System.RuntimeFieldHandle handle)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldInfoSW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.FieldInfo.GetFieldFromHandle(handle));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.FieldInfoSW GetFieldFromHandle(System.RuntimeFieldHandle handle, System.RuntimeTypeHandle declaringType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldInfoSW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.FieldInfo.GetFieldFromHandle(handle, declaringType));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW[] GetRequiredCustomModifiers()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetRequiredCustomModifiers());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW[] GetOptionalCustomModifiers()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetOptionalCustomModifiers());
        }

        /// <summary/>
        public virtual void SetValueDirect(System.TypedReference obj, System.Object value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetValueDirect(obj, value);
        }

        /// <summary/>
        public virtual System.Object GetValueDirect(System.TypedReference obj)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValueDirect(obj);
        }

        /// <summary/>
        public virtual System.Object GetValue(System.Object obj)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValue(obj);
        }

        /// <summary/>
        public virtual System.Object GetRawConstantValue()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetRawConstantValue();
        }

        /// <summary/>
        public virtual void SetValue(System.Object obj, System.Object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetValue(obj, value, invokeAttr, binder, culture);
        }

        /// <summary/>
        public virtual void SetValue(System.Object obj, System.Object value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetValue(obj, value);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MemberInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MemberInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._FieldInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._FieldInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._FieldInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._FieldInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._FieldInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._FieldInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._FieldInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._FieldInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._FieldInfo.GetValue(System.Object obj)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetValue(obj);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._FieldInfo.GetValueDirect(System.TypedReference obj)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetValueDirect(obj);
        }

        /// <summary/>
        void System.Runtime.InteropServices._FieldInfo.SetValue(System.Object obj, System.Object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldInfo)InnerObject).SetValue(obj, value, invokeAttr, binder, culture);
        }

        /// <summary/>
        void System.Runtime.InteropServices._FieldInfo.SetValueDirect(System.TypedReference obj, System.Object value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldInfo)InnerObject).SetValueDirect(obj, value);
        }

        /// <summary/>
        void System.Runtime.InteropServices._FieldInfo.SetValue(System.Object obj, System.Object value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldInfo)InnerObject).SetValue(obj, value);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._FieldInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._FieldInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._FieldInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._FieldInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._FieldInfo.FieldType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).FieldType; }
        }
        /// <summary/>
        System.RuntimeFieldHandle System.Runtime.InteropServices._FieldInfo.FieldHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).FieldHandle; }
        }
        /// <summary/>
        System.Reflection.FieldAttributes System.Runtime.InteropServices._FieldInfo.Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).Attributes; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsPrivate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsPrivate; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsFamily; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsFamilyAndAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsFamilyAndAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsFamilyOrAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsFamilyOrAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsStatic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsStatic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsInitOnly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsInitOnly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsLiteral
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsLiteral; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsNotSerialized
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsNotSerialized; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsSpecialName; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsPinvokeImpl
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsPinvokeImpl; }
        }

    }

    /// <summary>Security Wrapper for Type: System.Reflection.MethodInfo</summary>
    [System.CLSCompliant(false)]
    public class MethodInfoSW : Microsoft.Test.Security.Wrappers.MethodBaseSW, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo, System.Runtime.InteropServices._MethodBase, System.Runtime.InteropServices._MethodInfo
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.MethodInfoSW Wrap(System.Reflection.MethodInfo o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.MethodInfoSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Reflection.MethodInfo InnerObject
        {
            get { return innerObject as System.Reflection.MethodInfo; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal MethodInfoSW(System.Reflection.MethodInfo o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal MethodInfoSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected MethodInfoSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public override System.Reflection.MemberTypes MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MemberType; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW ReturnType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ReturnType); }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ParameterInfoSW ReturnParameter
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ParameterInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ReturnParameter); }
        }
        /// <summary/>
        public virtual System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ReturnTypeCustomAttributes; }
        }
        /// <summary/>
        public override System.Boolean IsGenericMethodDefinition
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsGenericMethodDefinition; }
        }
        /// <summary/>
        public override System.Boolean ContainsGenericParameters
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ContainsGenericParameters; }
        }
        /// <summary/>
        public override System.Boolean IsGenericMethod
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsGenericMethod; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetBaseDefinition()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetBaseDefinition());
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW[] GetGenericArguments()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetGenericArguments());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetGenericMethodDefinition()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetGenericMethodDefinition());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW MakeGenericMethod(System.Type[] typeArguments)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.MakeGenericMethod(typeArguments));
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MemberInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MemberInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MethodBase.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MethodBase.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodBase.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MethodBase.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MethodBase.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.ParameterInfo[] System.Runtime.InteropServices._MethodBase.GetParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetParameters();
        }

        /// <summary/>
        System.Reflection.MethodImplAttributes System.Runtime.InteropServices._MethodBase.GetMethodImplementationFlags()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetMethodImplementationFlags();
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._MethodBase.Invoke(System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).Invoke(obj, invokeAttr, binder, parameters, culture);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._MethodBase.Invoke(System.Object obj, System.Object[] parameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).Invoke(obj, parameters);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MethodBase.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MethodBase.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodBase.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodBase.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.RuntimeMethodHandle System.Runtime.InteropServices._MethodBase.MethodHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).MethodHandle; }
        }
        /// <summary/>
        System.Reflection.MethodAttributes System.Runtime.InteropServices._MethodBase.Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).Attributes; }
        }
        /// <summary/>
        System.Reflection.CallingConventions System.Runtime.InteropServices._MethodBase.CallingConvention
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).CallingConvention; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsPrivate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsPrivate; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFamily; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFamilyAndAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFamilyOrAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsStatic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsStatic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFinal
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFinal; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsVirtual
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsVirtual; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsHideBySig
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsHideBySig; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsAbstract
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsAbstract; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsSpecialName; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsConstructor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsConstructor; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MethodInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MethodInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MethodInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MethodInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.ParameterInfo[] System.Runtime.InteropServices._MethodInfo.GetParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetParameters();
        }

        /// <summary/>
        System.Reflection.MethodImplAttributes System.Runtime.InteropServices._MethodInfo.GetMethodImplementationFlags()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetMethodImplementationFlags();
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._MethodInfo.Invoke(System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).Invoke(obj, invokeAttr, binder, parameters, culture);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._MethodInfo.Invoke(System.Object obj, System.Object[] parameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).Invoke(obj, parameters);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._MethodInfo.GetBaseDefinition()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetBaseDefinition();
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MethodInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MethodInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.RuntimeMethodHandle System.Runtime.InteropServices._MethodInfo.MethodHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).MethodHandle; }
        }
        /// <summary/>
        System.Reflection.MethodAttributes System.Runtime.InteropServices._MethodInfo.Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).Attributes; }
        }
        /// <summary/>
        System.Reflection.CallingConventions System.Runtime.InteropServices._MethodInfo.CallingConvention
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).CallingConvention; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsPrivate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsPrivate; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsFamily; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsFamilyAndAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsFamilyAndAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsFamilyOrAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsFamilyOrAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsStatic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsStatic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsFinal
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsFinal; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsVirtual
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsVirtual; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsHideBySig
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsHideBySig; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsAbstract
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsAbstract; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsSpecialName; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsConstructor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsConstructor; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodInfo.ReturnType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).ReturnType; }
        }
        /// <summary/>
        System.Reflection.ICustomAttributeProvider System.Runtime.InteropServices._MethodInfo.ReturnTypeCustomAttributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).ReturnTypeCustomAttributes; }
        }

    }

    /// <summary>Security Wrapper for Type: System.Reflection.MethodBase</summary>
    [System.CLSCompliant(false)]
    public class MethodBaseSW : Microsoft.Test.Security.Wrappers.MemberInfoSW, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo, System.Runtime.InteropServices._MethodBase
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.MethodBaseSW Wrap(System.Reflection.MethodBase o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.MethodBaseSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Reflection.MethodBase InnerObject
        {
            get { return innerObject as System.Reflection.MethodBase; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal MethodBaseSW(System.Reflection.MethodBase o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal MethodBaseSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected MethodBaseSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public virtual System.RuntimeMethodHandle MethodHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MethodHandle; }
        }
        /// <summary/>
        public virtual System.Reflection.MethodAttributes Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Attributes; }
        }
        /// <summary/>
        public virtual System.Reflection.CallingConventions CallingConvention
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CallingConvention; }
        }
        /// <summary/>
        public virtual System.Boolean IsGenericMethodDefinition
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsGenericMethodDefinition; }
        }
        /// <summary/>
        public virtual System.Boolean ContainsGenericParameters
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ContainsGenericParameters; }
        }
        /// <summary/>
        public virtual System.Boolean IsGenericMethod
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsGenericMethod; }
        }
        /// <summary/>
        public virtual System.Boolean IsPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsPublic; }
        }
        /// <summary/>
        public virtual System.Boolean IsPrivate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsPrivate; }
        }
        /// <summary/>
        public virtual System.Boolean IsFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsFamily; }
        }
        /// <summary/>
        public virtual System.Boolean IsAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsAssembly; }
        }
        /// <summary/>
        public virtual System.Boolean IsFamilyAndAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsFamilyAndAssembly; }
        }
        /// <summary/>
        public virtual System.Boolean IsFamilyOrAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsFamilyOrAssembly; }
        }
        /// <summary/>
        public virtual System.Boolean IsStatic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsStatic; }
        }
        /// <summary/>
        public virtual System.Boolean IsFinal
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsFinal; }
        }
        /// <summary/>
        public virtual System.Boolean IsVirtual
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsVirtual; }
        }
        /// <summary/>
        public virtual System.Boolean IsHideBySig
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsHideBySig; }
        }
        /// <summary/>
        public virtual System.Boolean IsAbstract
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsAbstract; }
        }
        /// <summary/>
        public virtual System.Boolean IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsSpecialName; }
        }
        /// <summary/>
        public virtual System.Boolean IsConstructor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsConstructor; }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.MethodBaseSW GetMethodFromHandle(System.RuntimeMethodHandle handle)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBaseSW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.MethodBase.GetMethodFromHandle(handle));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.MethodBaseSW GetMethodFromHandle(System.RuntimeMethodHandle handle, System.RuntimeTypeHandle declaringType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBaseSW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.MethodBase.GetMethodFromHandle(handle, declaringType));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.MethodBaseSW GetCurrentMethod()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBaseSW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.MethodBase.GetCurrentMethod());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ParameterInfoSW[] GetParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ParameterInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetParameters());
        }

        /// <summary/>
        public virtual System.Reflection.MethodImplAttributes GetMethodImplementationFlags()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetMethodImplementationFlags();
        }

        /// <summary/>
        public virtual System.Object Invoke(System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Invoke(obj, invokeAttr, binder, parameters, culture);
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW[] GetGenericArguments()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetGenericArguments());
        }

        /// <summary/>
        public virtual System.Object Invoke(System.Object obj, System.Object[] parameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Invoke(obj, parameters);
        }

        /// <summary/>
        public virtual System.Reflection.MethodBody GetMethodBody()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetMethodBody();
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MemberInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MemberInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MethodBase.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MethodBase.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodBase.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MethodBase.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MethodBase.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.ParameterInfo[] System.Runtime.InteropServices._MethodBase.GetParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetParameters();
        }

        /// <summary/>
        System.Reflection.MethodImplAttributes System.Runtime.InteropServices._MethodBase.GetMethodImplementationFlags()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetMethodImplementationFlags();
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._MethodBase.Invoke(System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).Invoke(obj, invokeAttr, binder, parameters, culture);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._MethodBase.Invoke(System.Object obj, System.Object[] parameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).Invoke(obj, parameters);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MethodBase.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MethodBase.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodBase.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodBase.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.RuntimeMethodHandle System.Runtime.InteropServices._MethodBase.MethodHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).MethodHandle; }
        }
        /// <summary/>
        System.Reflection.MethodAttributes System.Runtime.InteropServices._MethodBase.Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).Attributes; }
        }
        /// <summary/>
        System.Reflection.CallingConventions System.Runtime.InteropServices._MethodBase.CallingConvention
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).CallingConvention; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsPrivate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsPrivate; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFamily; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFamilyAndAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFamilyOrAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsStatic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsStatic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFinal
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFinal; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsVirtual
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsVirtual; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsHideBySig
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsHideBySig; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsAbstract
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsAbstract; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsSpecialName; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsConstructor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsConstructor; }
        }

    }

    /// <summary>Security Wrapper for Type: System.Reflection.Module</summary>
    [System.CLSCompliant(false)]
    public class ModuleSW : System.Object, System.Runtime.InteropServices._Module, System.Runtime.Serialization.ISerializable, System.Reflection.ICustomAttributeProvider
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ModuleSW Wrap(System.Reflection.Module o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ModuleSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Reflection.Module InnerObject
        {
            get { return innerObject as System.Reflection.Module; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ModuleSW(System.Reflection.Module o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ModuleSW(System.DayOfWeek day) { }

        /// <summary/>
        public System.Int32 MDStreamVersion
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MDStreamVersion; }
        }
        /// <summary/>
        public virtual System.String FullyQualifiedName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FullyQualifiedName; }
        }
        /// <summary/>
        public System.Guid ModuleVersionId
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ModuleVersionId; }
        }
        /// <summary/>
        public System.Int32 MetadataToken
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MetadataToken; }
        }
        /// <summary/>
        public System.String ScopeName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ScopeName; }
        }
        /// <summary/>
        public System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.AssemblySW Assembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Assembly); }
        }
        /// <summary/>
        public System.ModuleHandle ModuleHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ModuleHandle; }
        }
        /// <summary/>
        public static System.Reflection.TypeFilter FilterTypeName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Reflection.Module.FilterTypeName; }
        }
        /// <summary/>
        public static System.Reflection.TypeFilter FilterTypeNameIgnoreCase
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Reflection.Module.FilterTypeNameIgnoreCase; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodBaseSW ResolveMethod(System.Int32 metadataToken)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBaseSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ResolveMethod(metadataToken));
        }

        /// <summary/>
        public System.Byte[] ResolveSignature(System.Int32 metadataToken)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ResolveSignature(metadataToken);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodBaseSW ResolveMethod(System.Int32 metadataToken, System.Type[] genericTypeArguments, System.Type[] genericMethodArguments)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBaseSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ResolveMethod(metadataToken, genericTypeArguments, genericMethodArguments));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FieldInfoSW ResolveField(System.Int32 metadataToken)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ResolveField(metadataToken));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FieldInfoSW ResolveField(System.Int32 metadataToken, System.Type[] genericTypeArguments, System.Type[] genericMethodArguments)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ResolveField(metadataToken, genericTypeArguments, genericMethodArguments));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TypeSW ResolveType(System.Int32 metadataToken)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ResolveType(metadataToken));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TypeSW ResolveType(System.Int32 metadataToken, System.Type[] genericTypeArguments, System.Type[] genericMethodArguments)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ResolveType(metadataToken, genericTypeArguments, genericMethodArguments));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MemberInfoSW ResolveMember(System.Int32 metadataToken)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MemberInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ResolveMember(metadataToken));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MemberInfoSW ResolveMember(System.Int32 metadataToken, System.Type[] genericTypeArguments, System.Type[] genericMethodArguments)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MemberInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ResolveMember(metadataToken, genericTypeArguments, genericMethodArguments));
        }

        /// <summary/>
        public System.String ResolveString(System.Int32 metadataToken)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ResolveString(metadataToken);
        }

        /// <summary/>
        public void GetPEKind(out System.Reflection.PortableExecutableKinds peKind, out System.Reflection.ImageFileMachine machine)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.GetPEKind(out peKind, out machine);
        }

        /// <summary/>
        public virtual System.Object[] GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(inherit);
        }

        /// <summary/>
        public virtual System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        public virtual System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsDefined(attributeType, inherit);
        }

        /// <summary/>
        public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.GetObjectData(info, context);
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW GetType(System.String className, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetType(className, ignoreCase));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW GetType(System.String className)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetType(className));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW GetType(System.String className, System.Boolean throwOnError, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetType(className, throwOnError, ignoreCase));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW[] FindTypes(System.Reflection.TypeFilter filter, System.Object filterCriteria)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.FindTypes(filter, filterCriteria));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW[] GetTypes()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetTypes());
        }

        /// <summary/>
        public System.Boolean IsResource()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsResource();
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FieldInfoSW[] GetFields()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFields());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FieldInfoSW[] GetFields(System.Reflection.BindingFlags bindingFlags)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFields(bindingFlags));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FieldInfoSW GetField(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetField(name));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FieldInfoSW GetField(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetField(name, bindingAttr));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodInfoSW[] GetMethods()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMethods());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodInfoSW[] GetMethods(System.Reflection.BindingFlags bindingFlags)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMethods(bindingFlags));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodInfoSW GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMethod(name, bindingAttr, binder, callConvention, types, modifiers));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodInfoSW GetMethod(System.String name, System.Type[] types)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMethod(name, types));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodInfoSW GetMethod(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMethod(name));
        }

        /// <summary/>
        public override System.String ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ToString();
        }

        /// <summary/>
        public System.Security.Cryptography.X509Certificates.X509Certificate GetSignerCertificate()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSignerCertificate();
        }

        /// <summary/>
        void System.Runtime.InteropServices._Module.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Module)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Module.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Module)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Module.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Module)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Module.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Module)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.Serialization.ISerializable)InnerObject).GetObjectData(info, context);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }


    }

    /// <summary>Security Wrapper for Type: System.Reflection.ParameterInfo</summary>
    [System.CLSCompliant(false)]
    public class ParameterInfoSW : System.Object, System.Runtime.InteropServices._ParameterInfo, System.Reflection.ICustomAttributeProvider
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ParameterInfoSW Wrap(System.Reflection.ParameterInfo o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ParameterInfoSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Reflection.ParameterInfo InnerObject
        {
            get { return innerObject as System.Reflection.ParameterInfo; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ParameterInfoSW(System.Reflection.ParameterInfo o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ParameterInfoSW(System.DayOfWeek day) { }

        /// <summary/>
        protected ParameterInfoSW()
        {
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW ParameterType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ParameterType); }
        }
        /// <summary/>
        public virtual System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public virtual System.Object DefaultValue
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DefaultValue; }
        }
        /// <summary/>
        public virtual System.Object RawDefaultValue
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.RawDefaultValue; }
        }
        /// <summary/>
        public virtual System.Int32 Position
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Position; }
        }
        /// <summary/>
        public virtual System.Reflection.ParameterAttributes Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Attributes; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MemberInfoSW Member
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.MemberInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Member); }
        }
        /// <summary/>
        public System.Boolean IsIn
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsIn; }
        }
        /// <summary/>
        public System.Boolean IsOut
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsOut; }
        }
        /// <summary/>
        public System.Boolean IsLcid
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsLcid; }
        }
        /// <summary/>
        public System.Boolean IsRetval
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsRetval; }
        }
        /// <summary/>
        public System.Boolean IsOptional
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsOptional; }
        }
        /// <summary/>
        public System.Int32 MetadataToken
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MetadataToken; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW[] GetRequiredCustomModifiers()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetRequiredCustomModifiers());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW[] GetOptionalCustomModifiers()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetOptionalCustomModifiers());
        }

        /// <summary/>
        public override System.String ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ToString();
        }

        /// <summary/>
        public virtual System.Object[] GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(inherit);
        }

        /// <summary/>
        public virtual System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        public virtual System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ParameterInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ParameterInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ParameterInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ParameterInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ParameterInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }


    }

    /// <summary>Security Wrapper for Type: System.Reflection.Emit.AssemblyBuilder</summary>
    [System.CLSCompliant(false)]
    public class AssemblyBuilderSW : Microsoft.Test.Security.Wrappers.AssemblySW, System.Runtime.InteropServices._Assembly, System.Security.IEvidenceFactory, System.Reflection.ICustomAttributeProvider, System.Runtime.Serialization.ISerializable, System.Runtime.InteropServices._AssemblyBuilder
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.AssemblyBuilderSW Wrap(System.Reflection.Emit.AssemblyBuilder o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.AssemblyBuilderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Reflection.Emit.AssemblyBuilder InnerObject
        {
            get { return innerObject as System.Reflection.Emit.AssemblyBuilder; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal AssemblyBuilderSW(System.Reflection.Emit.AssemblyBuilder o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal AssemblyBuilderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public override System.Boolean ReflectionOnly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ReflectionOnly; }
        }
        /// <summary/>
        public override System.String Location
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Location; }
        }
        /// <summary/>
        public override System.String ImageRuntimeVersion
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ImageRuntimeVersion; }
        }
        /// <summary/>
        public override System.String CodeBase
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CodeBase; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.MethodInfoSW EntryPoint
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.EntryPoint); }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ModuleBuilderSW DefineDynamicModule(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ModuleBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineDynamicModule(name));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ModuleBuilderSW DefineDynamicModule(System.String name, System.Boolean emitSymbolInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ModuleBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineDynamicModule(name, emitSymbolInfo));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ModuleBuilderSW DefineDynamicModule(System.String name, System.String fileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ModuleBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineDynamicModule(name, fileName));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ModuleBuilderSW DefineDynamicModule(System.String name, System.String fileName, System.Boolean emitSymbolInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ModuleBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineDynamicModule(name, fileName, emitSymbolInfo));
        }

        /// <summary/>
        public System.Resources.IResourceWriter DefineResource(System.String name, System.String description, System.String fileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.DefineResource(name, description, fileName);
        }

        /// <summary/>
        public System.Resources.IResourceWriter DefineResource(System.String name, System.String description, System.String fileName, System.Reflection.ResourceAttributes attribute)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.DefineResource(name, description, fileName, attribute);
        }

        /// <summary/>
        public void AddResourceFile(System.String name, System.String fileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.AddResourceFile(name, fileName);
        }

        /// <summary/>
        public void AddResourceFile(System.String name, System.String fileName, System.Reflection.ResourceAttributes attribute)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.AddResourceFile(name, fileName, attribute);
        }

        /// <summary/>
        public override System.String[] GetManifestResourceNames()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetManifestResourceNames();
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.FileStreamSW GetFile(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFile(name));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.FileStreamSW[] GetFiles(System.Boolean getResourceModules)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FileStreamSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFiles(getResourceModules));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.StreamSW GetManifestResourceStream(System.Type type, System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.StreamSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetManifestResourceStream(type, name));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.StreamSW GetManifestResourceStream(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.StreamSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetManifestResourceStream(name));
        }

        /// <summary/>
        public override System.Reflection.ManifestResourceInfo GetManifestResourceInfo(System.String resourceName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetManifestResourceInfo(resourceName);
        }

        /// <summary/>
        public void DefineVersionInfoResource(System.String product, System.String productVersion, System.String company, System.String copyright, System.String trademark)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.DefineVersionInfoResource(product, productVersion, company, copyright, trademark);
        }

        /// <summary/>
        public void DefineVersionInfoResource()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.DefineVersionInfoResource();
        }

        /// <summary/>
        public void DefineUnmanagedResource(System.Byte[] resource)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.DefineUnmanagedResource(resource);
        }

        /// <summary/>
        public void DefineUnmanagedResource(System.String resourceFileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.DefineUnmanagedResource(resourceFileName);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ModuleBuilderSW GetDynamicModule(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ModuleBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetDynamicModule(name));
        }

        /// <summary/>
        public void SetEntryPoint(System.Reflection.MethodInfo entryMethod)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetEntryPoint(entryMethod);
        }

        /// <summary/>
        public void SetEntryPoint(System.Reflection.MethodInfo entryMethod, System.Reflection.Emit.PEFileKinds fileKind)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetEntryPoint(entryMethod, fileKind);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(con, binaryAttribute);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder customBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(customBuilder);
        }

        /// <summary/>
        public void Save(System.String assemblyFileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Save(assemblyFileName);
        }

        /// <summary/>
        public void Save(System.String assemblyFileName, System.Reflection.PortableExecutableKinds portableExecutableKind, System.Reflection.ImageFileMachine imageFileMachine)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Save(assemblyFileName, portableExecutableKind, imageFileMachine);
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW[] GetExportedTypes()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetExportedTypes());
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._Assembly.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Assembly.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._Assembly.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Assembly.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetType();
        }

        /// <summary/>
        System.Reflection.AssemblyName System.Runtime.InteropServices._Assembly.GetName()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetName();
        }

        /// <summary/>
        System.Reflection.AssemblyName System.Runtime.InteropServices._Assembly.GetName(System.Boolean copiedName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetName(copiedName);
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Assembly.GetType(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetType(name);
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Assembly.GetType(System.String name, System.Boolean throwOnError)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetType(name, throwOnError);
        }

        /// <summary/>
        System.Type[] System.Runtime.InteropServices._Assembly.GetExportedTypes()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetExportedTypes();
        }

        /// <summary/>
        System.Type[] System.Runtime.InteropServices._Assembly.GetTypes()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetTypes();
        }

        /// <summary/>
        System.IO.Stream System.Runtime.InteropServices._Assembly.GetManifestResourceStream(System.Type type, System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetManifestResourceStream(type, name);
        }

        /// <summary/>
        System.IO.Stream System.Runtime.InteropServices._Assembly.GetManifestResourceStream(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetManifestResourceStream(name);
        }

        /// <summary/>
        System.IO.FileStream System.Runtime.InteropServices._Assembly.GetFile(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetFile(name);
        }

        /// <summary/>
        System.IO.FileStream[] System.Runtime.InteropServices._Assembly.GetFiles()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetFiles();
        }

        /// <summary/>
        System.IO.FileStream[] System.Runtime.InteropServices._Assembly.GetFiles(System.Boolean getResourceModules)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetFiles(getResourceModules);
        }

        /// <summary/>
        System.String[] System.Runtime.InteropServices._Assembly.GetManifestResourceNames()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetManifestResourceNames();
        }

        /// <summary/>
        System.Reflection.ManifestResourceInfo System.Runtime.InteropServices._Assembly.GetManifestResourceInfo(System.String resourceName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetManifestResourceInfo(resourceName);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._Assembly.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._Assembly.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Assembly.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Assembly)InnerObject).GetObjectData(info, context);
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Assembly.GetType(System.String name, System.Boolean throwOnError, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetType(name, throwOnError, ignoreCase);
        }

        /// <summary/>
        System.Reflection.Assembly System.Runtime.InteropServices._Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetSatelliteAssembly(culture);
        }

        /// <summary/>
        System.Reflection.Assembly System.Runtime.InteropServices._Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo culture, System.Version version)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetSatelliteAssembly(culture, version);
        }

        /// <summary/>
        System.Reflection.Module System.Runtime.InteropServices._Assembly.LoadModule(System.String moduleName, System.Byte[] rawModule)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).LoadModule(moduleName, rawModule);
        }

        /// <summary/>
        System.Reflection.Module System.Runtime.InteropServices._Assembly.LoadModule(System.String moduleName, System.Byte[] rawModule, System.Byte[] rawSymbolStore)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).LoadModule(moduleName, rawModule, rawSymbolStore);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._Assembly.CreateInstance(System.String typeName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).CreateInstance(typeName);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._Assembly.CreateInstance(System.String typeName, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).CreateInstance(typeName, ignoreCase);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._Assembly.CreateInstance(System.String typeName, System.Boolean ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture, System.Object[] activationAttributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).CreateInstance(typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes);
        }

        /// <summary/>
        System.Reflection.Module[] System.Runtime.InteropServices._Assembly.GetLoadedModules()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetLoadedModules();
        }

        /// <summary/>
        System.Reflection.Module[] System.Runtime.InteropServices._Assembly.GetLoadedModules(System.Boolean getResourceModules)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetLoadedModules(getResourceModules);
        }

        /// <summary/>
        System.Reflection.Module[] System.Runtime.InteropServices._Assembly.GetModules()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetModules();
        }

        /// <summary/>
        System.Reflection.Module[] System.Runtime.InteropServices._Assembly.GetModules(System.Boolean getResourceModules)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetModules(getResourceModules);
        }

        /// <summary/>
        System.Reflection.Module System.Runtime.InteropServices._Assembly.GetModule(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetModule(name);
        }

        /// <summary/>
        System.Reflection.AssemblyName[] System.Runtime.InteropServices._Assembly.GetReferencedAssemblies()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Assembly)InnerObject).GetReferencedAssemblies();
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._Assembly.CodeBase
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Assembly)InnerObject).CodeBase; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Assembly.EscapedCodeBase
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Assembly)InnerObject).EscapedCodeBase; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Assembly.FullName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Assembly)InnerObject).FullName; }
        }
        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Assembly.EntryPoint
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Assembly)InnerObject).EntryPoint; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Assembly.Location
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Assembly)InnerObject).Location; }
        }
        /// <summary/>
        System.Security.Policy.Evidence System.Runtime.InteropServices._Assembly.Evidence
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Assembly)InnerObject).Evidence; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Assembly.GlobalAssemblyCache
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Assembly)InnerObject).GlobalAssemblyCache; }
        }
        /// <summary/>
        System.Security.Policy.Evidence System.Security.IEvidenceFactory.Evidence
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Security.IEvidenceFactory)InnerObject).Evidence; }
        }
        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.Serialization.ISerializable)InnerObject).GetObjectData(info, context);
        }

        /// <summary/>
        void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._AssemblyBuilder)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._AssemblyBuilder)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._AssemblyBuilder)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._AssemblyBuilder.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._AssemblyBuilder)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }


    }

    /// <summary>Security Wrapper for Type: System.Reflection.Emit.ConstructorBuilder</summary>
    [System.CLSCompliant(false)]
    public class ConstructorBuilderSW : Microsoft.Test.Security.Wrappers.ConstructorInfoSW, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo, System.Runtime.InteropServices._MethodBase, System.Runtime.InteropServices._ConstructorInfo, System.Runtime.InteropServices._ConstructorBuilder
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ConstructorBuilderSW Wrap(System.Reflection.Emit.ConstructorBuilder o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ConstructorBuilderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Reflection.Emit.ConstructorBuilder InnerObject
        {
            get { return innerObject as System.Reflection.Emit.ConstructorBuilder; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ConstructorBuilderSW(System.Reflection.Emit.ConstructorBuilder o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ConstructorBuilderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.ModuleSW Module
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ModuleSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Module); }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ReflectedType); }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DeclaringType); }
        }
        /// <summary/>
        public override System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public override System.Reflection.MethodAttributes Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Attributes; }
        }
        /// <summary/>
        public override System.RuntimeMethodHandle MethodHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MethodHandle; }
        }
        /// <summary/>
        public override System.Reflection.CallingConventions CallingConvention
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CallingConvention; }
        }
        /// <summary/>

#pragma warning disable 0618
        public Microsoft.Test.Security.Wrappers.TypeSW ReturnType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ReturnType); }
        }
#pragma warning restore 0618
        /// <summary/>
        public System.String Signature
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Signature; }
        }
        /// <summary/>
        public System.Boolean InitLocals
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.InitLocals; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.InitLocals = value; }
        }
        /// <summary/>
        public override System.String ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ToString();
        }

        /// <summary/>
        public override System.Object Invoke(System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Invoke(obj, invokeAttr, binder, parameters, culture);
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.ParameterInfoSW[] GetParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ParameterInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetParameters());
        }

        /// <summary/>
        public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetMethodImplementationFlags();
        }

        /// <summary/>
        public override System.Object Invoke(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Invoke(invokeAttr, binder, parameters, culture);
        }

        /// <summary/>
        public override System.Object[] GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(inherit);
        }

        /// <summary/>
        public override System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        public override System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsDefined(attributeType, inherit);
        }

        /// <summary/>
        public System.Reflection.Emit.MethodToken GetToken()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetToken();
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ParameterBuilderSW DefineParameter(System.Int32 iSequence, System.Reflection.ParameterAttributes attributes, System.String strParamName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ParameterBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineParameter(iSequence, attributes, strParamName));
        }

        /// <summary/>
        public void SetSymCustomAttribute(System.String name, System.Byte[] data)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetSymCustomAttribute(name, data);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ILGeneratorSW GetILGenerator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ILGeneratorSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetILGenerator());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ILGeneratorSW GetILGenerator(System.Int32 streamSize)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ILGeneratorSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetILGenerator(streamSize));
        }

        /// <summary/>
        public void AddDeclarativeSecurity(System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.AddDeclarativeSecurity(action, pset);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ModuleSW GetModule()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ModuleSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetModule());
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(con, binaryAttribute);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder customBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(customBuilder);
        }

        /// <summary/>
        public void SetImplementationFlags(System.Reflection.MethodImplAttributes attributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetImplementationFlags(attributes);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MemberInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MemberInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MethodBase.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MethodBase.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodBase.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MethodBase.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MethodBase.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.ParameterInfo[] System.Runtime.InteropServices._MethodBase.GetParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetParameters();
        }

        /// <summary/>
        System.Reflection.MethodImplAttributes System.Runtime.InteropServices._MethodBase.GetMethodImplementationFlags()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetMethodImplementationFlags();
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._MethodBase.Invoke(System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).Invoke(obj, invokeAttr, binder, parameters, culture);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._MethodBase.Invoke(System.Object obj, System.Object[] parameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).Invoke(obj, parameters);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MethodBase.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MethodBase.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodBase.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodBase.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.RuntimeMethodHandle System.Runtime.InteropServices._MethodBase.MethodHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).MethodHandle; }
        }
        /// <summary/>
        System.Reflection.MethodAttributes System.Runtime.InteropServices._MethodBase.Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).Attributes; }
        }
        /// <summary/>
        System.Reflection.CallingConventions System.Runtime.InteropServices._MethodBase.CallingConvention
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).CallingConvention; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsPrivate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsPrivate; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFamily; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFamilyAndAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFamilyOrAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsStatic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsStatic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFinal
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFinal; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsVirtual
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsVirtual; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsHideBySig
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsHideBySig; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsAbstract
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsAbstract; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsSpecialName; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsConstructor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsConstructor; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._ConstructorInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ConstructorInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ConstructorInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ConstructorInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._ConstructorInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._ConstructorInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._ConstructorInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._ConstructorInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._ConstructorInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.ParameterInfo[] System.Runtime.InteropServices._ConstructorInfo.GetParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetParameters();
        }

        /// <summary/>
        System.Reflection.MethodImplAttributes System.Runtime.InteropServices._ConstructorInfo.GetMethodImplementationFlags()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetMethodImplementationFlags();
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._ConstructorInfo.Invoke_2(System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).Invoke_2(obj, invokeAttr, binder, parameters, culture);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._ConstructorInfo.Invoke_3(System.Object obj, System.Object[] parameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).Invoke_3(obj, parameters);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._ConstructorInfo.Invoke_4(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).Invoke_4(invokeAttr, binder, parameters, culture);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._ConstructorInfo.Invoke_5(System.Object[] parameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).Invoke_5(parameters);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._ConstructorInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._ConstructorInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._ConstructorInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._ConstructorInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.RuntimeMethodHandle System.Runtime.InteropServices._ConstructorInfo.MethodHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).MethodHandle; }
        }
        /// <summary/>
        System.Reflection.MethodAttributes System.Runtime.InteropServices._ConstructorInfo.Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).Attributes; }
        }
        /// <summary/>
        System.Reflection.CallingConventions System.Runtime.InteropServices._ConstructorInfo.CallingConvention
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).CallingConvention; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsPrivate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsPrivate; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsFamily; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsFamilyAndAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsFamilyAndAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsFamilyOrAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsFamilyOrAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsStatic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsStatic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsFinal
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsFinal; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsVirtual
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsVirtual; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsHideBySig
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsHideBySig; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsAbstract
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsAbstract; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsSpecialName; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsConstructor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsConstructor; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ConstructorBuilder)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ConstructorBuilder)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ConstructorBuilder.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ConstructorBuilder)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ConstructorBuilder.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ConstructorBuilder)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }


    }

    /// <summary>Security Wrapper for Type: System.Reflection.ConstructorInfo</summary>
    [System.CLSCompliant(false)]
    public class ConstructorInfoSW : Microsoft.Test.Security.Wrappers.MethodBaseSW, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo, System.Runtime.InteropServices._MethodBase, System.Runtime.InteropServices._ConstructorInfo
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ConstructorInfoSW Wrap(System.Reflection.ConstructorInfo o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ConstructorInfoSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Reflection.ConstructorInfo InnerObject
        {
            get { return innerObject as System.Reflection.ConstructorInfo; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ConstructorInfoSW(System.Reflection.ConstructorInfo o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ConstructorInfoSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected ConstructorInfoSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public override System.Reflection.MemberTypes MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MemberType; }
        }
        /// <summary/>
        public static System.String ConstructorName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Reflection.ConstructorInfo.ConstructorName; }
        }
        /// <summary/>
        public static System.String TypeConstructorName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Reflection.ConstructorInfo.TypeConstructorName; }
        }
        /// <summary/>
        public System.Object Invoke(System.Object[] parameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Invoke(parameters);
        }

        /// <summary/>
        public virtual System.Object Invoke(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Invoke(invokeAttr, binder, parameters, culture);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MemberInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MemberInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MethodBase.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MethodBase.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodBase.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MethodBase.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MethodBase.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.ParameterInfo[] System.Runtime.InteropServices._MethodBase.GetParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetParameters();
        }

        /// <summary/>
        System.Reflection.MethodImplAttributes System.Runtime.InteropServices._MethodBase.GetMethodImplementationFlags()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetMethodImplementationFlags();
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._MethodBase.Invoke(System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).Invoke(obj, invokeAttr, binder, parameters, culture);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._MethodBase.Invoke(System.Object obj, System.Object[] parameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).Invoke(obj, parameters);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MethodBase.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MethodBase.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodBase.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodBase.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.RuntimeMethodHandle System.Runtime.InteropServices._MethodBase.MethodHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).MethodHandle; }
        }
        /// <summary/>
        System.Reflection.MethodAttributes System.Runtime.InteropServices._MethodBase.Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).Attributes; }
        }
        /// <summary/>
        System.Reflection.CallingConventions System.Runtime.InteropServices._MethodBase.CallingConvention
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).CallingConvention; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsPrivate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsPrivate; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFamily; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFamilyAndAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFamilyOrAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsStatic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsStatic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFinal
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFinal; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsVirtual
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsVirtual; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsHideBySig
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsHideBySig; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsAbstract
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsAbstract; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsSpecialName; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsConstructor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsConstructor; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._ConstructorInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ConstructorInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ConstructorInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ConstructorInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._ConstructorInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._ConstructorInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._ConstructorInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._ConstructorInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._ConstructorInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.ParameterInfo[] System.Runtime.InteropServices._ConstructorInfo.GetParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetParameters();
        }

        /// <summary/>
        System.Reflection.MethodImplAttributes System.Runtime.InteropServices._ConstructorInfo.GetMethodImplementationFlags()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).GetMethodImplementationFlags();
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._ConstructorInfo.Invoke_2(System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).Invoke_2(obj, invokeAttr, binder, parameters, culture);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._ConstructorInfo.Invoke_3(System.Object obj, System.Object[] parameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).Invoke_3(obj, parameters);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._ConstructorInfo.Invoke_4(System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).Invoke_4(invokeAttr, binder, parameters, culture);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._ConstructorInfo.Invoke_5(System.Object[] parameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).Invoke_5(parameters);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._ConstructorInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._ConstructorInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._ConstructorInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._ConstructorInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.RuntimeMethodHandle System.Runtime.InteropServices._ConstructorInfo.MethodHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).MethodHandle; }
        }
        /// <summary/>
        System.Reflection.MethodAttributes System.Runtime.InteropServices._ConstructorInfo.Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).Attributes; }
        }
        /// <summary/>
        System.Reflection.CallingConventions System.Runtime.InteropServices._ConstructorInfo.CallingConvention
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).CallingConvention; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsPrivate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsPrivate; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsFamily; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsFamilyAndAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsFamilyAndAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsFamilyOrAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsFamilyOrAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsStatic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsStatic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsFinal
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsFinal; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsVirtual
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsVirtual; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsHideBySig
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsHideBySig; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsAbstract
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsAbstract; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsSpecialName; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._ConstructorInfo.IsConstructor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._ConstructorInfo)InnerObject).IsConstructor; }
        }

    }

    /// <summary>Security Wrapper for Type: System.Reflection.Emit.EnumBuilder</summary>
    [System.CLSCompliant(false)]
    public class EnumBuilderSW : Microsoft.Test.Security.Wrappers.TypeSW, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo, System.Runtime.InteropServices._Type, System.Reflection.IReflect, System.Runtime.InteropServices._EnumBuilder
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.EnumBuilderSW Wrap(System.Reflection.Emit.EnumBuilder o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.EnumBuilderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Reflection.Emit.EnumBuilder InnerObject
        {
            get { return innerObject as System.Reflection.Emit.EnumBuilder; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal EnumBuilderSW(System.Reflection.Emit.EnumBuilder o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal EnumBuilderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public System.Reflection.Emit.TypeToken TypeToken
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.TypeToken; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FieldBuilderSW UnderlyingField
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.FieldBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.UnderlyingField); }
        }
        /// <summary/>
        public override System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public override System.Guid GUID
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.GUID; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.ModuleSW Module
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ModuleSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Module); }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.AssemblySW Assembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Assembly); }
        }
        /// <summary/>
        public override System.RuntimeTypeHandle TypeHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.TypeHandle; }
        }
        /// <summary/>
        public override System.String FullName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FullName; }
        }
        /// <summary/>
        public override System.String AssemblyQualifiedName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AssemblyQualifiedName; }
        }
        /// <summary/>
        public override System.String Namespace
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Namespace; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW BaseType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.BaseType); }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW UnderlyingSystemType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.UnderlyingSystemType); }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DeclaringType); }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ReflectedType); }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FieldBuilderSW DefineLiteral(System.String literalName, System.Object literalValue)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineLiteral(literalName, literalValue));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TypeSW CreateType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CreateType());
        }

        /// <summary/>
        public override System.Object InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, System.String[] namedParameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.InvokeMember(name, invokeAttr, binder, target, args, modifiers, culture, namedParameters);
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.ConstructorInfoSW[] GetConstructors(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ConstructorInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetConstructors(bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.MethodInfoSW[] GetMethods(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMethods(bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.FieldInfoSW GetField(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetField(name, bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.FieldInfoSW[] GetFields(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFields(bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW GetInterface(System.String name, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetInterface(name, ignoreCase));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW[] GetInterfaces()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetInterfaces());
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.EventInfoSW GetEvent(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.EventInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetEvent(name, bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.EventInfoSW[] GetEvents()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.EventInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetEvents());
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.PropertyInfoSW[] GetProperties(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.PropertyInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetProperties(bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW[] GetNestedTypes(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetNestedTypes(bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW GetNestedType(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetNestedType(name, bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.MemberInfoSW[] GetMember(System.String name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MemberInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMember(name, type, bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.MemberInfoSW[] GetMembers(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MemberInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMembers(bindingAttr));
        }

        /// <summary/>
        public override System.Reflection.InterfaceMapping GetInterfaceMap(System.Type interfaceType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetInterfaceMap(interfaceType);
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.EventInfoSW[] GetEvents(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.EventInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetEvents(bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW GetElementType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetElementType());
        }

        /// <summary/>
        public override System.Object[] GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(inherit);
        }

        /// <summary/>
        public override System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(con, binaryAttribute);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder customBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(customBuilder);
        }

        /// <summary/>
        public override System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsDefined(attributeType, inherit);
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW MakePointerType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.MakePointerType());
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW MakeByRefType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.MakeByRefType());
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW MakeArrayType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.MakeArrayType());
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW MakeArrayType(System.Int32 rank)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.MakeArrayType(rank));
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MemberInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MemberInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name);
        }

        /// <summary/>
        System.Reflection.MethodInfo[] System.Runtime.InteropServices._Type.GetMethods()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethods();
        }

        /// <summary/>
        System.Reflection.FieldInfo System.Runtime.InteropServices._Type.GetField(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetField(name);
        }

        /// <summary/>
        System.Reflection.FieldInfo[] System.Runtime.InteropServices._Type.GetFields()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetFields();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetInterface(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetInterface(name);
        }

        /// <summary/>
        System.Reflection.EventInfo System.Runtime.InteropServices._Type.GetEvent(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetEvent(name);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, returnType, types, modifiers);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Type returnType, System.Type[] types)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, returnType, types);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Type[] types)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, types);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Type returnType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, returnType);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name);
        }

        /// <summary/>
        System.Reflection.PropertyInfo[] System.Runtime.InteropServices._Type.GetProperties()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperties();
        }

        /// <summary/>
        System.Type[] System.Runtime.InteropServices._Type.GetNestedTypes()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetNestedTypes();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetNestedType(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetNestedType(name);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetMember(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMember(name);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetMembers()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMembers();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.Equals(System.Type o)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).Equals(o);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Type.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Type)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Type)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Type.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Type)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Type.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Type)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._Type.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._Type.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._Type.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._Type.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._Type.GetArrayRank()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetArrayRank();
        }

        /// <summary/>
        System.Reflection.ConstructorInfo[] System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetConstructors(bindingAttr);
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetInterface(System.String name, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetInterface(name, ignoreCase);
        }

        /// <summary/>
        System.Type[] System.Runtime.InteropServices._Type.GetInterfaces()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetInterfaces();
        }

        /// <summary/>
        System.Type[] System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter filter, System.Object filterCriteria)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).FindInterfaces(filter, filterCriteria);
        }

        /// <summary/>
        System.Reflection.EventInfo System.Runtime.InteropServices._Type.GetEvent(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetEvent(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.EventInfo[] System.Runtime.InteropServices._Type.GetEvents()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetEvents();
        }

        /// <summary/>
        System.Reflection.EventInfo[] System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetEvents(bindingAttr);
        }

        /// <summary/>
        System.Type[] System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetNestedTypes(bindingAttr);
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetNestedType(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetNestedType(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetMember(System.String name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMember(name, type, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetDefaultMembers()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetDefaultMembers();
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, System.Object filterCriteria)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).FindMembers(memberType, bindingAttr, filter, filterCriteria);
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetElementType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetElementType();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsSubclassOf(System.Type c)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).IsSubclassOf(c);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object o)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).IsInstanceOfType(o);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type c)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).IsAssignableFrom(c);
        }

        /// <summary/>
        System.Reflection.InterfaceMapping System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type interfaceType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetInterfaceMap(interfaceType);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name, bindingAttr, binder, types, modifiers);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MethodInfo[] System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethods(bindingAttr);
        }

        /// <summary/>
        System.Reflection.FieldInfo System.Runtime.InteropServices._Type.GetField(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetField(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.FieldInfo[] System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetFields(bindingAttr);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, bindingAttr, binder, returnType, types, modifiers);
        }

        /// <summary/>
        System.Reflection.PropertyInfo[] System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperties(bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetMember(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMember(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMembers(bindingAttr);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._Type.InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, System.String[] namedParameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).InvokeMember(name, invokeAttr, binder, target, args, modifiers, culture, namedParameters);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._Type.InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).InvokeMember(name, invokeAttr, binder, target, args, culture);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._Type.InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).InvokeMember(name, invokeAttr, binder, target, args);
        }

        /// <summary/>
        System.Reflection.ConstructorInfo System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetConstructor(bindingAttr, binder, callConvention, types, modifiers);
        }

        /// <summary/>
        System.Reflection.ConstructorInfo System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetConstructor(bindingAttr, binder, types, modifiers);
        }

        /// <summary/>
        System.Reflection.ConstructorInfo System.Runtime.InteropServices._Type.GetConstructor(System.Type[] types)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetConstructor(types);
        }

        /// <summary/>
        System.Reflection.ConstructorInfo[] System.Runtime.InteropServices._Type.GetConstructors()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetConstructors();
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name, bindingAttr, binder, callConvention, types, modifiers);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name, types, modifiers);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name, System.Type[] types)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name, types);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._Type.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Type.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.Guid System.Runtime.InteropServices._Type.GUID
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).GUID; }
        }
        /// <summary/>
        System.Reflection.Module System.Runtime.InteropServices._Type.Module
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).Module; }
        }
        /// <summary/>
        System.Reflection.Assembly System.Runtime.InteropServices._Type.Assembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).Assembly; }
        }
        /// <summary/>
        System.RuntimeTypeHandle System.Runtime.InteropServices._Type.TypeHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).TypeHandle; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Type.FullName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).FullName; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Type.Namespace
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).Namespace; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Type.AssemblyQualifiedName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).AssemblyQualifiedName; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.BaseType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).BaseType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.UnderlyingSystemType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).UnderlyingSystemType; }
        }
        /// <summary/>
        System.Reflection.ConstructorInfo System.Runtime.InteropServices._Type.TypeInitializer
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).TypeInitializer; }
        }
        /// <summary/>
        System.Reflection.TypeAttributes System.Runtime.InteropServices._Type.Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).Attributes; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNotPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNotPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedPrivate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedPrivate; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedFamily; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedFamANDAssem
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedFamANDAssem; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedFamORAssem
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedFamORAssem; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsAutoLayout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsAutoLayout; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsLayoutSequential
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsLayoutSequential; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsExplicitLayout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsExplicitLayout; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsClass
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsClass; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsInterface
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsInterface; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsValueType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsValueType; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsAbstract
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsAbstract; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsSealed
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsSealed; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsEnum
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsEnum; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsSpecialName; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsImport
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsImport; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsSerializable
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsSerializable; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsAnsiClass
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsAnsiClass; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsUnicodeClass
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsUnicodeClass; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsAutoClass
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsAutoClass; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsArray
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsArray; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsByRef
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsByRef; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsPointer
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsPointer; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsPrimitive
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsPrimitive; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsCOMObject
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsCOMObject; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.HasElementType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).HasElementType; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsContextful
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsContextful; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsMarshalByRef
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsMarshalByRef; }
        }
        /// <summary/>
        System.Reflection.MethodInfo System.Reflection.IReflect.GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetMethod(name, bindingAttr, binder, types, modifiers);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Reflection.IReflect.GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetMethod(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MethodInfo[] System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetMethods(bindingAttr);
        }

        /// <summary/>
        System.Reflection.FieldInfo System.Reflection.IReflect.GetField(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetField(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.FieldInfo[] System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetFields(bindingAttr);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Reflection.IReflect.GetProperty(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetProperty(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Reflection.IReflect.GetProperty(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetProperty(name, bindingAttr, binder, returnType, types, modifiers);
        }

        /// <summary/>
        System.Reflection.PropertyInfo[] System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetProperties(bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Reflection.IReflect.GetMember(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetMember(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetMembers(bindingAttr);
        }

        /// <summary/>
        System.Object System.Reflection.IReflect.InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, System.String[] namedParameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).InvokeMember(name, invokeAttr, binder, target, args, modifiers, culture, namedParameters);
        }

        /// <summary/>
        System.Type System.Reflection.IReflect.UnderlyingSystemType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Reflection.IReflect)InnerObject).UnderlyingSystemType; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._EnumBuilder)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._EnumBuilder)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._EnumBuilder)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._EnumBuilder.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._EnumBuilder)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }


    }

    /// <summary>Security Wrapper for Type: System.Reflection.Emit.EventBuilder</summary>
    [System.CLSCompliant(false)]
    public class EventBuilderSW : System.Object, System.Runtime.InteropServices._EventBuilder
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.EventBuilderSW Wrap(System.Reflection.Emit.EventBuilder o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.EventBuilderSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Reflection.Emit.EventBuilder InnerObject
        {
            get { return innerObject as System.Reflection.Emit.EventBuilder; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal EventBuilderSW(System.Reflection.Emit.EventBuilder o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal EventBuilderSW(System.DayOfWeek day) { }

        /// <summary/>
        public System.Reflection.Emit.EventToken GetEventToken()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetEventToken();
        }

        /// <summary/>
        public void SetAddOnMethod(System.Reflection.Emit.MethodBuilder mdBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetAddOnMethod(mdBuilder);
        }

        /// <summary/>
        public void SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder mdBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetRemoveOnMethod(mdBuilder);
        }

        /// <summary/>
        public void SetRaiseMethod(System.Reflection.Emit.MethodBuilder mdBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetRaiseMethod(mdBuilder);
        }

        /// <summary/>
        public void AddOtherMethod(System.Reflection.Emit.MethodBuilder mdBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.AddOtherMethod(mdBuilder);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(con, binaryAttribute);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder customBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(customBuilder);
        }

        /// <summary/>
        void System.Runtime.InteropServices._EventBuilder.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._EventBuilder)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._EventBuilder.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._EventBuilder)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._EventBuilder.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._EventBuilder)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._EventBuilder.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._EventBuilder)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }


    }

    /// <summary>Security Wrapper for Type: System.Reflection.Emit.FieldBuilder</summary>
    [System.CLSCompliant(false)]
    public class FieldBuilderSW : Microsoft.Test.Security.Wrappers.FieldInfoSW, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo, System.Runtime.InteropServices._FieldInfo, System.Runtime.InteropServices._FieldBuilder
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.FieldBuilderSW Wrap(System.Reflection.Emit.FieldBuilder o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.FieldBuilderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Reflection.Emit.FieldBuilder InnerObject
        {
            get { return innerObject as System.Reflection.Emit.FieldBuilder; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal FieldBuilderSW(System.Reflection.Emit.FieldBuilder o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal FieldBuilderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.ModuleSW Module
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ModuleSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Module); }
        }
        /// <summary/>
        public override System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DeclaringType); }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ReflectedType); }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW FieldType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.FieldType); }
        }
        /// <summary/>
        public override System.RuntimeFieldHandle FieldHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FieldHandle; }
        }
        /// <summary/>
        public override System.Reflection.FieldAttributes Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Attributes; }
        }
        /// <summary/>
        public override System.Object GetValue(System.Object obj)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValue(obj);
        }

        /// <summary/>
        public override void SetValue(System.Object obj, System.Object val, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetValue(obj, val, invokeAttr, binder, culture);
        }

        /// <summary/>
        public override System.Object[] GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(inherit);
        }

        /// <summary/>
        public override System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        public override System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsDefined(attributeType, inherit);
        }

        /// <summary/>
        public System.Reflection.Emit.FieldToken GetToken()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetToken();
        }

        /// <summary/>
        public void SetOffset(System.Int32 iOffset)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetOffset(iOffset);
        }

        /// <summary/>
        public void SetConstant(System.Object defaultValue)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetConstant(defaultValue);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(con, binaryAttribute);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder customBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(customBuilder);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MemberInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MemberInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._FieldInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._FieldInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._FieldInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._FieldInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._FieldInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._FieldInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._FieldInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._FieldInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._FieldInfo.GetValue(System.Object obj)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetValue(obj);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._FieldInfo.GetValueDirect(System.TypedReference obj)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._FieldInfo)InnerObject).GetValueDirect(obj);
        }

        /// <summary/>
        void System.Runtime.InteropServices._FieldInfo.SetValue(System.Object obj, System.Object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldInfo)InnerObject).SetValue(obj, value, invokeAttr, binder, culture);
        }

        /// <summary/>
        void System.Runtime.InteropServices._FieldInfo.SetValueDirect(System.TypedReference obj, System.Object value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldInfo)InnerObject).SetValueDirect(obj, value);
        }

        /// <summary/>
        void System.Runtime.InteropServices._FieldInfo.SetValue(System.Object obj, System.Object value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldInfo)InnerObject).SetValue(obj, value);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._FieldInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._FieldInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._FieldInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._FieldInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._FieldInfo.FieldType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).FieldType; }
        }
        /// <summary/>
        System.RuntimeFieldHandle System.Runtime.InteropServices._FieldInfo.FieldHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).FieldHandle; }
        }
        /// <summary/>
        System.Reflection.FieldAttributes System.Runtime.InteropServices._FieldInfo.Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).Attributes; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsPrivate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsPrivate; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsFamily; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsFamilyAndAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsFamilyAndAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsFamilyOrAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsFamilyOrAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsStatic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsStatic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsInitOnly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsInitOnly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsLiteral
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsLiteral; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsNotSerialized
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsNotSerialized; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsSpecialName; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._FieldInfo.IsPinvokeImpl
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._FieldInfo)InnerObject).IsPinvokeImpl; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._FieldBuilder.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldBuilder)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._FieldBuilder.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldBuilder)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._FieldBuilder.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldBuilder)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._FieldBuilder.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._FieldBuilder)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }


    }

    /// <summary>Security Wrapper for Type: System.Reflection.Emit.ILGenerator</summary>
    [System.CLSCompliant(false)]
    public class ILGeneratorSW : System.Object, System.Runtime.InteropServices._ILGenerator
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ILGeneratorSW Wrap(System.Reflection.Emit.ILGenerator o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ILGeneratorSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Reflection.Emit.ILGenerator InnerObject
        {
            get { return innerObject as System.Reflection.Emit.ILGenerator; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ILGeneratorSW(System.Reflection.Emit.ILGenerator o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ILGeneratorSW(System.DayOfWeek day) { }

        /// <summary/>
        public virtual void Emit(System.Reflection.Emit.OpCode opcode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Emit(opcode);
        }

        /// <summary/>
        public virtual void Emit(System.Reflection.Emit.OpCode opcode, System.Byte arg)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Emit(opcode, arg);
        }

        /// <summary/>
        public void Emit(System.Reflection.Emit.OpCode opcode, System.SByte arg)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Emit(opcode, arg);
        }

        /// <summary/>
        public virtual void Emit(System.Reflection.Emit.OpCode opcode, System.Int16 arg)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Emit(opcode, arg);
        }

        /// <summary/>
        public virtual void Emit(System.Reflection.Emit.OpCode opcode, System.Int32 arg)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Emit(opcode, arg);
        }

        /// <summary/>
        public virtual void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo meth)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Emit(opcode, meth);
        }

        /// <summary/>
        public virtual void EmitCalli(System.Reflection.Emit.OpCode opcode, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes, System.Type[] optionalParameterTypes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EmitCalli(opcode, callingConvention, returnType, parameterTypes, optionalParameterTypes);
        }

        /// <summary/>
        public virtual void EmitCalli(System.Reflection.Emit.OpCode opcode, System.Runtime.InteropServices.CallingConvention unmanagedCallConv, System.Type returnType, System.Type[] parameterTypes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EmitCalli(opcode, unmanagedCallConv, returnType, parameterTypes);
        }

        /// <summary/>
        public virtual void EmitCall(System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo methodInfo, System.Type[] optionalParameterTypes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EmitCall(opcode, methodInfo, optionalParameterTypes);
        }

        /// <summary/>
        public virtual void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.SignatureHelper signature)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Emit(opcode, signature);
        }

        /// <summary/>
        public virtual void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.ConstructorInfo con)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Emit(opcode, con);
        }

        /// <summary/>
        public virtual void Emit(System.Reflection.Emit.OpCode opcode, System.Type cls)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Emit(opcode, cls);
        }

        /// <summary/>
        public virtual void Emit(System.Reflection.Emit.OpCode opcode, System.Int64 arg)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Emit(opcode, arg);
        }

        /// <summary/>
        public virtual void Emit(System.Reflection.Emit.OpCode opcode, System.Single arg)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Emit(opcode, arg);
        }

        /// <summary/>
        public virtual void Emit(System.Reflection.Emit.OpCode opcode, System.Double arg)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Emit(opcode, arg);
        }

        /// <summary/>
        public virtual void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label label)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Emit(opcode, label);
        }

        /// <summary/>
        public virtual void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label[] labels)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Emit(opcode, labels);
        }

        /// <summary/>
        public virtual void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.FieldInfo field)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Emit(opcode, field);
        }

        /// <summary/>
        public virtual void Emit(System.Reflection.Emit.OpCode opcode, System.String str)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Emit(opcode, str);
        }

        /// <summary/>
        public virtual void Emit(System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.LocalBuilder local)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Emit(opcode, local);
        }

        /// <summary/>
        public virtual System.Reflection.Emit.Label BeginExceptionBlock()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginExceptionBlock();
        }

        /// <summary/>
        public virtual void EndExceptionBlock()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EndExceptionBlock();
        }

        /// <summary/>
        public virtual void BeginExceptFilterBlock()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.BeginExceptFilterBlock();
        }

        /// <summary/>
        public virtual void BeginCatchBlock(System.Type exceptionType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.BeginCatchBlock(exceptionType);
        }

        /// <summary/>
        public virtual void BeginFaultBlock()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.BeginFaultBlock();
        }

        /// <summary/>
        public virtual void BeginFinallyBlock()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.BeginFinallyBlock();
        }

        /// <summary/>
        public virtual System.Reflection.Emit.Label DefineLabel()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.DefineLabel();
        }

        /// <summary/>
        public virtual void MarkLabel(System.Reflection.Emit.Label loc)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.MarkLabel(loc);
        }

        /// <summary/>
        public virtual void ThrowException(System.Type excType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ThrowException(excType);
        }

        /// <summary/>
        public virtual void EmitWriteLine(System.String value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EmitWriteLine(value);
        }

        /// <summary/>
        public virtual void EmitWriteLine(System.Reflection.Emit.LocalBuilder localBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EmitWriteLine(localBuilder);
        }

        /// <summary/>
        public virtual void EmitWriteLine(System.Reflection.FieldInfo fld)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EmitWriteLine(fld);
        }

        /// <summary/>
        public virtual System.Reflection.Emit.LocalBuilder DeclareLocal(System.Type localType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.DeclareLocal(localType);
        }

        /// <summary/>
        public virtual System.Reflection.Emit.LocalBuilder DeclareLocal(System.Type localType, System.Boolean pinned)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.DeclareLocal(localType, pinned);
        }

        /// <summary/>
        public virtual void UsingNamespace(System.String usingNamespace)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.UsingNamespace(usingNamespace);
        }

        /// <summary/>
        public virtual void MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter document, System.Int32 startLine, System.Int32 startColumn, System.Int32 endLine, System.Int32 endColumn)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.MarkSequencePoint(document, startLine, startColumn, endLine, endColumn);
        }

        /// <summary/>
        public virtual void BeginScope()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.BeginScope();
        }

        /// <summary/>
        public virtual void EndScope()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EndScope();
        }

        /// <summary/>
        void System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ILGenerator)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ILGenerator.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ILGenerator)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ILGenerator)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ILGenerator.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ILGenerator)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }


    }

    /// <summary>Security Wrapper for Type: System.Reflection.Emit.MethodBuilder</summary>
    [System.CLSCompliant(false)]
    public class MethodBuilderSW : Microsoft.Test.Security.Wrappers.MethodInfoSW, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo, System.Runtime.InteropServices._MethodBase, System.Runtime.InteropServices._MethodInfo, System.Runtime.InteropServices._MethodBuilder
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.MethodBuilderSW Wrap(System.Reflection.Emit.MethodBuilder o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.MethodBuilderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Reflection.Emit.MethodBuilder InnerObject
        {
            get { return innerObject as System.Reflection.Emit.MethodBuilder; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal MethodBuilderSW(System.Reflection.Emit.MethodBuilder o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal MethodBuilderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public override System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.ModuleSW Module
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ModuleSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Module); }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DeclaringType); }
        }
        /// <summary/>
        public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ReturnTypeCustomAttributes; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ReflectedType); }
        }
        /// <summary/>
        public override System.Reflection.MethodAttributes Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Attributes; }
        }
        /// <summary/>
        public override System.Reflection.CallingConventions CallingConvention
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CallingConvention; }
        }
        /// <summary/>
        public override System.RuntimeMethodHandle MethodHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MethodHandle; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.ParameterInfoSW ReturnParameter
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ParameterInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ReturnParameter); }
        }
        /// <summary/>
        public override System.Boolean IsGenericMethodDefinition
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsGenericMethodDefinition; }
        }
        /// <summary/>
        public override System.Boolean ContainsGenericParameters
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ContainsGenericParameters; }
        }
        /// <summary/>
        public override System.Boolean IsGenericMethod
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsGenericMethod; }
        }
        /// <summary/>
        public System.Boolean InitLocals
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.InitLocals; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.InitLocals = value; }
        }
        /// <summary/>
        public System.String Signature
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Signature; }
        }
        /// <summary/>
        public override System.Boolean Equals(System.Object obj)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Equals(obj);
        }

        /// <summary/>
        public override System.Int32 GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetHashCode();
        }

        /// <summary/>
        public override System.String ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ToString();
        }

        /// <summary/>
        public override System.Object Invoke(System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Invoke(obj, invokeAttr, binder, parameters, culture);
        }

        /// <summary/>
        public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetMethodImplementationFlags();
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.MethodInfoSW GetBaseDefinition()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetBaseDefinition());
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.ParameterInfoSW[] GetParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ParameterInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetParameters());
        }

        /// <summary/>
        public override System.Object[] GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(inherit);
        }

        /// <summary/>
        public override System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        public override System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsDefined(attributeType, inherit);
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.MethodInfoSW GetGenericMethodDefinition()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetGenericMethodDefinition());
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW[] GetGenericArguments()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetGenericArguments());
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.MethodInfoSW MakeGenericMethod(System.Type[] typeArguments)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.MakeGenericMethod(typeArguments));
        }

        /// <summary/>
        public System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters(System.String[] names)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.DefineGenericParameters(names);
        }

        /// <summary/>
        public System.Reflection.Emit.MethodToken GetToken()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetToken();
        }

        /// <summary/>
        public void SetParameters(System.Type[] parameterTypes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetParameters(parameterTypes);
        }

        /// <summary/>
        public void SetReturnType(System.Type returnType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetReturnType(returnType);
        }

        /// <summary/>
        public void SetSignature(System.Type returnType, System.Type[] returnTypeRequiredCustomModifiers, System.Type[] returnTypeOptionalCustomModifiers, System.Type[] parameterTypes, System.Type[][] parameterTypeRequiredCustomModifiers, System.Type[][] parameterTypeOptionalCustomModifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetSignature(returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ParameterBuilderSW DefineParameter(System.Int32 position, System.Reflection.ParameterAttributes attributes, System.String strParamName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ParameterBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineParameter(position, attributes, strParamName));
        }

        /// <summary/>
        public void SetSymCustomAttribute(System.String name, System.Byte[] data)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetSymCustomAttribute(name, data);
        }

        /// <summary/>
        public void AddDeclarativeSecurity(System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.AddDeclarativeSecurity(action, pset);
        }

        /// <summary/>
        public void CreateMethodBody(System.Byte[] il, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.CreateMethodBody(il, count);
        }

        /// <summary/>
        public void SetImplementationFlags(System.Reflection.MethodImplAttributes attributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetImplementationFlags(attributes);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ILGeneratorSW GetILGenerator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ILGeneratorSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetILGenerator());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ILGeneratorSW GetILGenerator(System.Int32 size)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ILGeneratorSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetILGenerator(size));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ModuleSW GetModule()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ModuleSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetModule());
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(con, binaryAttribute);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder customBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(customBuilder);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MemberInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MemberInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBase.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBase)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MethodBase.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MethodBase.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodBase.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MethodBase.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MethodBase.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.ParameterInfo[] System.Runtime.InteropServices._MethodBase.GetParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetParameters();
        }

        /// <summary/>
        System.Reflection.MethodImplAttributes System.Runtime.InteropServices._MethodBase.GetMethodImplementationFlags()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).GetMethodImplementationFlags();
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._MethodBase.Invoke(System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).Invoke(obj, invokeAttr, binder, parameters, culture);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._MethodBase.Invoke(System.Object obj, System.Object[] parameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodBase)InnerObject).Invoke(obj, parameters);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MethodBase.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MethodBase.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodBase.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodBase.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.RuntimeMethodHandle System.Runtime.InteropServices._MethodBase.MethodHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).MethodHandle; }
        }
        /// <summary/>
        System.Reflection.MethodAttributes System.Runtime.InteropServices._MethodBase.Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).Attributes; }
        }
        /// <summary/>
        System.Reflection.CallingConventions System.Runtime.InteropServices._MethodBase.CallingConvention
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).CallingConvention; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsPrivate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsPrivate; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFamily; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFamilyAndAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFamilyOrAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsStatic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsStatic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsFinal
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsFinal; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsVirtual
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsVirtual; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsHideBySig
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsHideBySig; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsAbstract
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsAbstract; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsSpecialName; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodBase.IsConstructor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodBase)InnerObject).IsConstructor; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MethodInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MethodInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MethodInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MethodInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.ParameterInfo[] System.Runtime.InteropServices._MethodInfo.GetParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetParameters();
        }

        /// <summary/>
        System.Reflection.MethodImplAttributes System.Runtime.InteropServices._MethodInfo.GetMethodImplementationFlags()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetMethodImplementationFlags();
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._MethodInfo.Invoke(System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).Invoke(obj, invokeAttr, binder, parameters, culture);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._MethodInfo.Invoke(System.Object obj, System.Object[] parameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).Invoke(obj, parameters);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._MethodInfo.GetBaseDefinition()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MethodInfo)InnerObject).GetBaseDefinition();
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MethodInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MethodInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.RuntimeMethodHandle System.Runtime.InteropServices._MethodInfo.MethodHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).MethodHandle; }
        }
        /// <summary/>
        System.Reflection.MethodAttributes System.Runtime.InteropServices._MethodInfo.Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).Attributes; }
        }
        /// <summary/>
        System.Reflection.CallingConventions System.Runtime.InteropServices._MethodInfo.CallingConvention
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).CallingConvention; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsPrivate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsPrivate; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsFamily; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsFamilyAndAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsFamilyAndAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsFamilyOrAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsFamilyOrAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsStatic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsStatic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsFinal
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsFinal; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsVirtual
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsVirtual; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsHideBySig
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsHideBySig; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsAbstract
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsAbstract; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsSpecialName; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MethodInfo.IsConstructor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).IsConstructor; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MethodInfo.ReturnType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).ReturnType; }
        }
        /// <summary/>
        System.Reflection.ICustomAttributeProvider System.Runtime.InteropServices._MethodInfo.ReturnTypeCustomAttributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MethodInfo)InnerObject).ReturnTypeCustomAttributes; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBuilder)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBuilder)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBuilder)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodBuilder.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodBuilder)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }


    }

    /// <summary>Security Wrapper for Type: System.Reflection.Emit.MethodRental</summary>
    [System.CLSCompliant(false)]
    public class MethodRentalSW : System.Object, System.Runtime.InteropServices._MethodRental
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.MethodRentalSW Wrap(System.Reflection.Emit.MethodRental o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.MethodRentalSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Reflection.Emit.MethodRental InnerObject
        {
            get { return innerObject as System.Reflection.Emit.MethodRental; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal MethodRentalSW(System.Reflection.Emit.MethodRental o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal MethodRentalSW(System.DayOfWeek day) { }

        /// <summary/>
        public static System.Int32 JitOnDemand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Reflection.Emit.MethodRental.JitOnDemand; }
        }
        /// <summary/>
        public static System.Int32 JitImmediate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Reflection.Emit.MethodRental.JitImmediate; }
        }
        /// <summary/>
        public static void SwapMethodBody(System.Type cls, System.Int32 methodtoken, System.IntPtr rgIL, System.Int32 methodSize, System.Int32 flags)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Reflection.Emit.MethodRental.SwapMethodBody(cls, methodtoken, rgIL, methodSize, flags);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodRental.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodRental)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodRental.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodRental)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodRental.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodRental)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MethodRental.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MethodRental)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }


    }

    /// <summary>Security Wrapper for Type: System.Reflection.Emit.ModuleBuilder</summary>
    [System.CLSCompliant(false)]
    public class ModuleBuilderSW : Microsoft.Test.Security.Wrappers.ModuleSW, System.Runtime.InteropServices._Module, System.Runtime.Serialization.ISerializable, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._ModuleBuilder
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ModuleBuilderSW Wrap(System.Reflection.Emit.ModuleBuilder o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ModuleBuilderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Reflection.Emit.ModuleBuilder InnerObject
        {
            get { return innerObject as System.Reflection.Emit.ModuleBuilder; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ModuleBuilderSW(System.Reflection.Emit.ModuleBuilder o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ModuleBuilderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public override System.String FullyQualifiedName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FullyQualifiedName; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TypeBuilderSW DefineType(System.String name, System.Reflection.TypeAttributes attr, System.Type parent, System.Type[] interfaces)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineType(name, attr, parent, interfaces));
        }

        /// <summary/>
        public System.Diagnostics.SymbolStore.ISymbolWriter GetSymWriter()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSymWriter();
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW[] GetTypes()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetTypes());
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW GetType(System.String className)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetType(className));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW GetType(System.String className, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetType(className, ignoreCase));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW GetType(System.String className, System.Boolean throwOnError, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetType(className, throwOnError, ignoreCase));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TypeBuilderSW DefineType(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineType(name));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TypeBuilderSW DefineType(System.String name, System.Reflection.TypeAttributes attr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineType(name, attr));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TypeBuilderSW DefineType(System.String name, System.Reflection.TypeAttributes attr, System.Type parent)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineType(name, attr, parent));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TypeBuilderSW DefineType(System.String name, System.Reflection.TypeAttributes attr, System.Type parent, System.Int32 typesize)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineType(name, attr, parent, typesize));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TypeBuilderSW DefineType(System.String name, System.Reflection.TypeAttributes attr, System.Type parent, System.Reflection.Emit.PackingSize packingSize, System.Int32 typesize)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineType(name, attr, parent, packingSize, typesize));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TypeBuilderSW DefineType(System.String name, System.Reflection.TypeAttributes attr, System.Type parent, System.Reflection.Emit.PackingSize packsize)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineType(name, attr, parent, packsize));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.EnumBuilderSW DefineEnum(System.String name, System.Reflection.TypeAttributes visibility, System.Type underlyingType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.EnumBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineEnum(name, visibility, underlyingType));
        }

        /// <summary/>
        public System.Resources.IResourceWriter DefineResource(System.String name, System.String description)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.DefineResource(name, description);
        }

        /// <summary/>
        public System.Resources.IResourceWriter DefineResource(System.String name, System.String description, System.Reflection.ResourceAttributes attribute)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.DefineResource(name, description, attribute);
        }

        /// <summary/>
        public void DefineManifestResource(System.String name, System.IO.Stream stream, System.Reflection.ResourceAttributes attribute)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.DefineManifestResource(name, stream, attribute);
        }

        /// <summary/>
        public void DefineUnmanagedResource(System.Byte[] resource)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.DefineUnmanagedResource(resource);
        }

        /// <summary/>
        public void DefineUnmanagedResource(System.String resourceFileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.DefineUnmanagedResource(resourceFileName);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodBuilderSW DefineGlobalMethod(System.String name, System.Reflection.MethodAttributes attributes, System.Type returnType, System.Type[] parameterTypes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineGlobalMethod(name, attributes, returnType, parameterTypes));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodBuilderSW DefineGlobalMethod(System.String name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineGlobalMethod(name, attributes, callingConvention, returnType, parameterTypes));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodBuilderSW DefineGlobalMethod(System.String name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] requiredReturnTypeCustomModifiers, System.Type[] optionalReturnTypeCustomModifiers, System.Type[] parameterTypes, System.Type[][] requiredParameterTypeCustomModifiers, System.Type[][] optionalParameterTypeCustomModifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineGlobalMethod(name, attributes, callingConvention, returnType, requiredReturnTypeCustomModifiers, optionalReturnTypeCustomModifiers, parameterTypes, requiredParameterTypeCustomModifiers, optionalParameterTypeCustomModifiers));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodBuilderSW DefinePInvokeMethod(System.String name, System.String dllName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefinePInvokeMethod(name, dllName, attributes, callingConvention, returnType, parameterTypes, nativeCallConv, nativeCharSet));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodBuilderSW DefinePInvokeMethod(System.String name, System.String dllName, System.String entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefinePInvokeMethod(name, dllName, entryName, attributes, callingConvention, returnType, parameterTypes, nativeCallConv, nativeCharSet));
        }

        /// <summary/>
        public void CreateGlobalFunctions()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.CreateGlobalFunctions();
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FieldBuilderSW DefineInitializedData(System.String name, System.Byte[] data, System.Reflection.FieldAttributes attributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineInitializedData(name, data, attributes));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FieldBuilderSW DefineUninitializedData(System.String name, System.Int32 size, System.Reflection.FieldAttributes attributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineUninitializedData(name, size, attributes));
        }

        /// <summary/>
        public System.Reflection.Emit.TypeToken GetTypeToken(System.Type type)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetTypeToken(type);
        }

        /// <summary/>
        public System.Reflection.Emit.TypeToken GetTypeToken(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetTypeToken(name);
        }

        /// <summary/>
        public System.Reflection.Emit.MethodToken GetMethodToken(System.Reflection.MethodInfo method)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetMethodToken(method);
        }

        /// <summary/>
        public System.Reflection.Emit.MethodToken GetArrayMethodToken(System.Type arrayClass, System.String methodName, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetArrayMethodToken(arrayClass, methodName, callingConvention, returnType, parameterTypes);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodInfoSW GetArrayMethod(System.Type arrayClass, System.String methodName, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetArrayMethod(arrayClass, methodName, callingConvention, returnType, parameterTypes));
        }

        /// <summary/>
        public System.Reflection.Emit.MethodToken GetConstructorToken(System.Reflection.ConstructorInfo con)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetConstructorToken(con);
        }

        /// <summary/>
        public System.Reflection.Emit.FieldToken GetFieldToken(System.Reflection.FieldInfo field)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetFieldToken(field);
        }

        /// <summary/>
        public System.Reflection.Emit.StringToken GetStringConstant(System.String str)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetStringConstant(str);
        }

        /// <summary/>
        public System.Reflection.Emit.SignatureToken GetSignatureToken(System.Reflection.Emit.SignatureHelper sigHelper)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSignatureToken(sigHelper);
        }

        /// <summary/>
        public System.Reflection.Emit.SignatureToken GetSignatureToken(System.Byte[] sigBytes, System.Int32 sigLength)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSignatureToken(sigBytes, sigLength);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(con, binaryAttribute);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder customBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(customBuilder);
        }

        /// <summary/>
        public System.Diagnostics.SymbolStore.ISymbolDocumentWriter DefineDocument(System.String url, System.Guid language, System.Guid languageVendor, System.Guid documentType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.DefineDocument(url, language, languageVendor, documentType);
        }

        /// <summary/>
        public void SetUserEntryPoint(System.Reflection.MethodInfo entryPoint)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetUserEntryPoint(entryPoint);
        }

        /// <summary/>
        public void SetSymCustomAttribute(System.String name, System.Byte[] data)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetSymCustomAttribute(name, data);
        }

        /// <summary/>
        public System.Boolean IsTransient()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsTransient();
        }

        /// <summary/>
        void System.Runtime.InteropServices._Module.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Module)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Module.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Module)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Module.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Module)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Module.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Module)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.Serialization.ISerializable)InnerObject).GetObjectData(info, context);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ModuleBuilder)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ModuleBuilder)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ModuleBuilder)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ModuleBuilder.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ModuleBuilder)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }


    }

    /// <summary>Security Wrapper for Type: System.Reflection.Emit.ParameterBuilder</summary>
    [System.CLSCompliant(false)]
    public class ParameterBuilderSW : System.Object, System.Runtime.InteropServices._ParameterBuilder
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ParameterBuilderSW Wrap(System.Reflection.Emit.ParameterBuilder o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ParameterBuilderSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Reflection.Emit.ParameterBuilder InnerObject
        {
            get { return innerObject as System.Reflection.Emit.ParameterBuilder; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ParameterBuilderSW(System.Reflection.Emit.ParameterBuilder o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ParameterBuilderSW(System.DayOfWeek day) { }

        /// <summary/>
        public virtual System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public virtual System.Int32 Position
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Position; }
        }
        /// <summary/>
        public virtual System.Int32 Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Attributes; }
        }
        /// <summary/>
        public System.Boolean IsIn
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsIn; }
        }
        /// <summary/>
        public System.Boolean IsOut
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsOut; }
        }
        /// <summary/>
        public System.Boolean IsOptional
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsOptional; }
        }
        /// <summary/>
        public virtual void SetConstant(System.Object defaultValue)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetConstant(defaultValue);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(con, binaryAttribute);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder customBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(customBuilder);
        }

        /// <summary/>
        public virtual System.Reflection.Emit.ParameterToken GetToken()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetToken();
        }

        /// <summary/>
        void System.Runtime.InteropServices._ParameterBuilder.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ParameterBuilder)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ParameterBuilder.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ParameterBuilder)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ParameterBuilder.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ParameterBuilder)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._ParameterBuilder.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._ParameterBuilder)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }


    }

    /// <summary>Security Wrapper for Type: System.Reflection.Emit.PropertyBuilder</summary>
    [System.CLSCompliant(false)]
    public class PropertyBuilderSW : Microsoft.Test.Security.Wrappers.PropertyInfoSW, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo, System.Runtime.InteropServices._PropertyInfo, System.Runtime.InteropServices._PropertyBuilder
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.PropertyBuilderSW Wrap(System.Reflection.Emit.PropertyBuilder o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.PropertyBuilderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Reflection.Emit.PropertyBuilder InnerObject
        {
            get { return innerObject as System.Reflection.Emit.PropertyBuilder; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal PropertyBuilderSW(System.Reflection.Emit.PropertyBuilder o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal PropertyBuilderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public System.Reflection.Emit.PropertyToken PropertyToken
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PropertyToken; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.ModuleSW Module
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ModuleSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Module); }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW PropertyType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.PropertyType); }
        }
        /// <summary/>
        public override System.Reflection.PropertyAttributes Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Attributes; }
        }
        /// <summary/>
        public override System.Boolean CanRead
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanRead; }
        }
        /// <summary/>
        public override System.Boolean CanWrite
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanWrite; }
        }
        /// <summary/>
        public override System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DeclaringType); }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ReflectedType); }
        }
        /// <summary/>
        public void SetConstant(System.Object defaultValue)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetConstant(defaultValue);
        }

        /// <summary/>
        public void SetGetMethod(System.Reflection.Emit.MethodBuilder mdBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetGetMethod(mdBuilder);
        }

        /// <summary/>
        public void SetSetMethod(System.Reflection.Emit.MethodBuilder mdBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetSetMethod(mdBuilder);
        }

        /// <summary/>
        public void AddOtherMethod(System.Reflection.Emit.MethodBuilder mdBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.AddOtherMethod(mdBuilder);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(con, binaryAttribute);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder customBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(customBuilder);
        }

        /// <summary/>
        public override System.Object GetValue(System.Object obj, System.Object[] index)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValue(obj, index);
        }

        /// <summary/>
        public override System.Object GetValue(System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] index, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValue(obj, invokeAttr, binder, index, culture);
        }

        /// <summary/>
        public override void SetValue(System.Object obj, System.Object value, System.Object[] index)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetValue(obj, value, index);
        }

        /// <summary/>
        public override void SetValue(System.Object obj, System.Object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] index, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetValue(obj, value, invokeAttr, binder, index, culture);
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.MethodInfoSW[] GetAccessors(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetAccessors(nonPublic));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.MethodInfoSW GetGetMethod(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetGetMethod(nonPublic));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.MethodInfoSW GetSetMethod(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetSetMethod(nonPublic));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.ParameterInfoSW[] GetIndexParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ParameterInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetIndexParameters());
        }

        /// <summary/>
        public override System.Object[] GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(inherit);
        }

        /// <summary/>
        public override System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        public override System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MemberInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MemberInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._PropertyInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._PropertyInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._PropertyInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._PropertyInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._PropertyInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._PropertyInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._PropertyInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._PropertyInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._PropertyInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object obj, System.Object[] index)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetValue(obj, index);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] index, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetValue(obj, invokeAttr, binder, index, culture);
        }

        /// <summary/>
        void System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object obj, System.Object value, System.Object[] index)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._PropertyInfo)InnerObject).SetValue(obj, value, index);
        }

        /// <summary/>
        void System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object obj, System.Object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] index, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._PropertyInfo)InnerObject).SetValue(obj, value, invokeAttr, binder, index, culture);
        }

        /// <summary/>
        System.Reflection.MethodInfo[] System.Runtime.InteropServices._PropertyInfo.GetAccessors(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetAccessors(nonPublic);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._PropertyInfo.GetGetMethod(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetGetMethod(nonPublic);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._PropertyInfo.GetSetMethod(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetSetMethod(nonPublic);
        }

        /// <summary/>
        System.Reflection.ParameterInfo[] System.Runtime.InteropServices._PropertyInfo.GetIndexParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetIndexParameters();
        }

        /// <summary/>
        System.Reflection.MethodInfo[] System.Runtime.InteropServices._PropertyInfo.GetAccessors()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetAccessors();
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._PropertyInfo.GetGetMethod()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetGetMethod();
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._PropertyInfo.GetSetMethod()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetSetMethod();
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._PropertyInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._PropertyInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._PropertyInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._PropertyInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._PropertyInfo.PropertyType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).PropertyType; }
        }
        /// <summary/>
        System.Reflection.PropertyAttributes System.Runtime.InteropServices._PropertyInfo.Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).Attributes; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._PropertyInfo.CanRead
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).CanRead; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._PropertyInfo.CanWrite
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).CanWrite; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._PropertyInfo.IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).IsSpecialName; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._PropertyBuilder.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._PropertyBuilder)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._PropertyBuilder.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._PropertyBuilder)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._PropertyBuilder.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._PropertyBuilder)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._PropertyBuilder.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._PropertyBuilder)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }


    }

    /// <summary>Security Wrapper for Type: System.Reflection.PropertyInfo</summary>
    [System.CLSCompliant(false)]
    public class PropertyInfoSW : Microsoft.Test.Security.Wrappers.MemberInfoSW, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo, System.Runtime.InteropServices._PropertyInfo
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.PropertyInfoSW Wrap(System.Reflection.PropertyInfo o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.PropertyInfoSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Reflection.PropertyInfo InnerObject
        {
            get { return innerObject as System.Reflection.PropertyInfo; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal PropertyInfoSW(System.Reflection.PropertyInfo o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal PropertyInfoSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected PropertyInfoSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public override System.Reflection.MemberTypes MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MemberType; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW PropertyType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.PropertyType); }
        }
        /// <summary/>
        public virtual System.Reflection.PropertyAttributes Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Attributes; }
        }
        /// <summary/>
        public virtual System.Boolean CanRead
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanRead; }
        }
        /// <summary/>
        public virtual System.Boolean CanWrite
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanWrite; }
        }
        /// <summary/>
        public virtual System.Boolean IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsSpecialName; }
        }
        /// <summary/>
        public virtual System.Object GetConstantValue()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetConstantValue();
        }

        /// <summary/>
        public virtual System.Object GetRawConstantValue()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetRawConstantValue();
        }

        /// <summary/>
        public virtual void SetValue(System.Object obj, System.Object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] index, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetValue(obj, value, invokeAttr, binder, index, culture);
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW[] GetAccessors(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetAccessors(nonPublic));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetGetMethod(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetGetMethod(nonPublic));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetSetMethod(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetSetMethod(nonPublic));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ParameterInfoSW[] GetIndexParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ParameterInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetIndexParameters());
        }

        /// <summary/>
        public virtual System.Object GetValue(System.Object obj, System.Object[] index)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValue(obj, index);
        }

        /// <summary/>
        public virtual System.Object GetValue(System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] index, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValue(obj, invokeAttr, binder, index, culture);
        }

        /// <summary/>
        public virtual void SetValue(System.Object obj, System.Object value, System.Object[] index)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetValue(obj, value, index);
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW[] GetRequiredCustomModifiers()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetRequiredCustomModifiers());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW[] GetOptionalCustomModifiers()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetOptionalCustomModifiers());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW[] GetAccessors()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetAccessors());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetGetMethod()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetGetMethod());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.MethodInfoSW GetSetMethod()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetSetMethod());
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MemberInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MemberInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._PropertyInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._PropertyInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._PropertyInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._PropertyInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._PropertyInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._PropertyInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._PropertyInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._PropertyInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._PropertyInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object obj, System.Object[] index)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetValue(obj, index);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._PropertyInfo.GetValue(System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] index, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetValue(obj, invokeAttr, binder, index, culture);
        }

        /// <summary/>
        void System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object obj, System.Object value, System.Object[] index)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._PropertyInfo)InnerObject).SetValue(obj, value, index);
        }

        /// <summary/>
        void System.Runtime.InteropServices._PropertyInfo.SetValue(System.Object obj, System.Object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] index, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._PropertyInfo)InnerObject).SetValue(obj, value, invokeAttr, binder, index, culture);
        }

        /// <summary/>
        System.Reflection.MethodInfo[] System.Runtime.InteropServices._PropertyInfo.GetAccessors(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetAccessors(nonPublic);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._PropertyInfo.GetGetMethod(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetGetMethod(nonPublic);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._PropertyInfo.GetSetMethod(System.Boolean nonPublic)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetSetMethod(nonPublic);
        }

        /// <summary/>
        System.Reflection.ParameterInfo[] System.Runtime.InteropServices._PropertyInfo.GetIndexParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetIndexParameters();
        }

        /// <summary/>
        System.Reflection.MethodInfo[] System.Runtime.InteropServices._PropertyInfo.GetAccessors()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetAccessors();
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._PropertyInfo.GetGetMethod()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetGetMethod();
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._PropertyInfo.GetSetMethod()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).GetSetMethod();
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._PropertyInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._PropertyInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._PropertyInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._PropertyInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._PropertyInfo.PropertyType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).PropertyType; }
        }
        /// <summary/>
        System.Reflection.PropertyAttributes System.Runtime.InteropServices._PropertyInfo.Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).Attributes; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._PropertyInfo.CanRead
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).CanRead; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._PropertyInfo.CanWrite
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).CanWrite; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._PropertyInfo.IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._PropertyInfo)InnerObject).IsSpecialName; }
        }

    }

    /// <summary>Security Wrapper for Type: System.Reflection.Emit.TypeBuilder</summary>
    [System.CLSCompliant(false)]
    public class TypeBuilderSW : Microsoft.Test.Security.Wrappers.TypeSW, System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo, System.Runtime.InteropServices._Type, System.Reflection.IReflect, System.Runtime.InteropServices._TypeBuilder
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.TypeBuilderSW Wrap(System.Reflection.Emit.TypeBuilder o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.TypeBuilderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Reflection.Emit.TypeBuilder InnerObject
        {
            get { return innerObject as System.Reflection.Emit.TypeBuilder; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal TypeBuilderSW(System.Reflection.Emit.TypeBuilder o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal TypeBuilderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DeclaringType); }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ReflectedType); }
        }
        /// <summary/>
        public override System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.ModuleSW Module
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ModuleSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Module); }
        }
        /// <summary/>
        public override System.Guid GUID
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.GUID; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.AssemblySW Assembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.AssemblySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Assembly); }
        }
        /// <summary/>
        public override System.RuntimeTypeHandle TypeHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.TypeHandle; }
        }
        /// <summary/>
        public override System.String FullName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FullName; }
        }
        /// <summary/>
        public override System.String Namespace
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Namespace; }
        }
        /// <summary/>
        public override System.String AssemblyQualifiedName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AssemblyQualifiedName; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW BaseType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.BaseType); }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW UnderlyingSystemType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.UnderlyingSystemType); }
        }
        /// <summary/>
        public override System.Reflection.GenericParameterAttributes GenericParameterAttributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.GenericParameterAttributes; }
        }
        /// <summary/>
        public override System.Boolean IsGenericTypeDefinition
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsGenericTypeDefinition; }
        }
        /// <summary/>
        public override System.Boolean IsGenericType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsGenericType; }
        }
        /// <summary/>
        public override System.Boolean IsGenericParameter
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsGenericParameter; }
        }
        /// <summary/>
        public override System.Int32 GenericParameterPosition
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.GenericParameterPosition; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.MethodBaseSW DeclaringMethod
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.MethodBaseSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DeclaringMethod); }
        }
        /// <summary/>
        public System.Int32 Size
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Size; }
        }
        /// <summary/>
        public System.Reflection.Emit.PackingSize PackingSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PackingSize; }
        }
        /// <summary/>
        public System.Reflection.Emit.TypeToken TypeToken
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.TypeToken; }
        }
        /// <summary/>
        public static System.Int32 UnspecifiedTypeSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize; }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.MethodInfoSW GetMethod(System.Type type, System.Reflection.MethodInfo method)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Emit.TypeBuilder.GetMethod(type, method));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ConstructorInfoSW GetConstructor(System.Type type, System.Reflection.ConstructorInfo constructor)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ConstructorInfoSW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Emit.TypeBuilder.GetConstructor(type, constructor));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.FieldInfoSW GetField(System.Type type, System.Reflection.FieldInfo field)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldInfoSW)WrapperclassesSecurityWarehouse.Wrap(System.Reflection.Emit.TypeBuilder.GetField(type, field));
        }

        /// <summary/>
        public System.Boolean IsCreated()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsCreated();
        }

        /// <summary/>
        public override System.String ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ToString();
        }

        /// <summary/>
        public override System.Object InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, System.String[] namedParameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.InvokeMember(name, invokeAttr, binder, target, args, modifiers, culture, namedParameters);
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.ConstructorInfoSW[] GetConstructors(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ConstructorInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetConstructors(bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.MethodInfoSW[] GetMethods(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMethods(bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.FieldInfoSW GetField(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetField(name, bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.FieldInfoSW[] GetFields(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFields(bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW GetInterface(System.String name, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetInterface(name, ignoreCase));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW[] GetInterfaces()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetInterfaces());
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.EventInfoSW GetEvent(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.EventInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetEvent(name, bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.EventInfoSW[] GetEvents()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.EventInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetEvents());
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.PropertyInfoSW[] GetProperties(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.PropertyInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetProperties(bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW[] GetNestedTypes(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetNestedTypes(bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW GetNestedType(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetNestedType(name, bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.MemberInfoSW[] GetMember(System.String name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MemberInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMember(name, type, bindingAttr));
        }

        /// <summary/>
        public override System.Reflection.InterfaceMapping GetInterfaceMap(System.Type interfaceType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetInterfaceMap(interfaceType);
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.EventInfoSW[] GetEvents(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.EventInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetEvents(bindingAttr));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.MemberInfoSW[] GetMembers(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MemberInfoSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetMembers(bindingAttr));
        }

        /// <summary/>
        public override System.Boolean IsAssignableFrom(System.Type c)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsAssignableFrom(c);
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW GetElementType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetElementType());
        }

        /// <summary/>
        public override System.Boolean IsSubclassOf(System.Type c)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsSubclassOf(c);
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW MakePointerType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.MakePointerType());
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW MakeByRefType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.MakeByRefType());
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW MakeArrayType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.MakeArrayType());
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW MakeArrayType(System.Int32 rank)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.MakeArrayType(rank));
        }

        /// <summary/>
        public override System.Object[] GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(inherit);
        }

        /// <summary/>
        public override System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        public override System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsDefined(attributeType, inherit);
        }

        /// <summary/>
        public System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters(System.String[] names)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.DefineGenericParameters(names);
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW MakeGenericType(System.Type[] typeArguments)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.MakeGenericType(typeArguments));
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW[] GetGenericArguments()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetGenericArguments());
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW GetGenericTypeDefinition()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetGenericTypeDefinition());
        }

        /// <summary/>
        public void DefineMethodOverride(System.Reflection.MethodInfo methodInfoBody, System.Reflection.MethodInfo methodInfoDeclaration)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.DefineMethodOverride(methodInfoBody, methodInfoDeclaration);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodBuilderSW DefineMethod(System.String name, System.Reflection.MethodAttributes attributes, System.Type returnType, System.Type[] parameterTypes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineMethod(name, attributes, returnType, parameterTypes));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodBuilderSW DefineMethod(System.String name, System.Reflection.MethodAttributes attributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineMethod(name, attributes));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodBuilderSW DefineMethod(System.String name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineMethod(name, attributes, callingConvention));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodBuilderSW DefineMethod(System.String name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineMethod(name, attributes, callingConvention, returnType, parameterTypes));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodBuilderSW DefineMethod(System.String name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] returnTypeRequiredCustomModifiers, System.Type[] returnTypeOptionalCustomModifiers, System.Type[] parameterTypes, System.Type[][] parameterTypeRequiredCustomModifiers, System.Type[][] parameterTypeOptionalCustomModifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineMethod(name, attributes, callingConvention, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ConstructorBuilderSW DefineTypeInitializer()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ConstructorBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineTypeInitializer());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ConstructorBuilderSW DefineDefaultConstructor(System.Reflection.MethodAttributes attributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ConstructorBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineDefaultConstructor(attributes));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ConstructorBuilderSW DefineConstructor(System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type[] parameterTypes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ConstructorBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineConstructor(attributes, callingConvention, parameterTypes));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ConstructorBuilderSW DefineConstructor(System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type[] parameterTypes, System.Type[][] requiredCustomModifiers, System.Type[][] optionalCustomModifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ConstructorBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineConstructor(attributes, callingConvention, parameterTypes, requiredCustomModifiers, optionalCustomModifiers));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodBuilderSW DefinePInvokeMethod(System.String name, System.String dllName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefinePInvokeMethod(name, dllName, attributes, callingConvention, returnType, parameterTypes, nativeCallConv, nativeCharSet));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodBuilderSW DefinePInvokeMethod(System.String name, System.String dllName, System.String entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefinePInvokeMethod(name, dllName, entryName, attributes, callingConvention, returnType, parameterTypes, nativeCallConv, nativeCharSet));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodBuilderSW DefinePInvokeMethod(System.String name, System.String dllName, System.String entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, System.Type returnType, System.Type[] returnTypeRequiredCustomModifiers, System.Type[] returnTypeOptionalCustomModifiers, System.Type[] parameterTypes, System.Type[][] parameterTypeRequiredCustomModifiers, System.Type[][] parameterTypeOptionalCustomModifiers, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.MethodBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefinePInvokeMethod(name, dllName, entryName, attributes, callingConvention, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers, nativeCallConv, nativeCharSet));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TypeBuilderSW DefineNestedType(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineNestedType(name));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TypeBuilderSW DefineNestedType(System.String name, System.Reflection.TypeAttributes attr, System.Type parent, System.Type[] interfaces)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineNestedType(name, attr, parent, interfaces));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TypeBuilderSW DefineNestedType(System.String name, System.Reflection.TypeAttributes attr, System.Type parent)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineNestedType(name, attr, parent));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TypeBuilderSW DefineNestedType(System.String name, System.Reflection.TypeAttributes attr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineNestedType(name, attr));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TypeBuilderSW DefineNestedType(System.String name, System.Reflection.TypeAttributes attr, System.Type parent, System.Int32 typeSize)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineNestedType(name, attr, parent, typeSize));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TypeBuilderSW DefineNestedType(System.String name, System.Reflection.TypeAttributes attr, System.Type parent, System.Reflection.Emit.PackingSize packSize)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineNestedType(name, attr, parent, packSize));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FieldBuilderSW DefineField(System.String fieldName, System.Type type, System.Reflection.FieldAttributes attributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineField(fieldName, type, attributes));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FieldBuilderSW DefineField(System.String fieldName, System.Type type, System.Type[] requiredCustomModifiers, System.Type[] optionalCustomModifiers, System.Reflection.FieldAttributes attributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineField(fieldName, type, requiredCustomModifiers, optionalCustomModifiers, attributes));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FieldBuilderSW DefineInitializedData(System.String name, System.Byte[] data, System.Reflection.FieldAttributes attributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineInitializedData(name, data, attributes));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FieldBuilderSW DefineUninitializedData(System.String name, System.Int32 size, System.Reflection.FieldAttributes attributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FieldBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineUninitializedData(name, size, attributes));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.PropertyBuilderSW DefineProperty(System.String name, System.Reflection.PropertyAttributes attributes, System.Type returnType, System.Type[] parameterTypes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.PropertyBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineProperty(name, attributes, returnType, parameterTypes));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.PropertyBuilderSW DefineProperty(System.String name, System.Reflection.PropertyAttributes attributes, System.Type returnType, System.Type[] returnTypeRequiredCustomModifiers, System.Type[] returnTypeOptionalCustomModifiers, System.Type[] parameterTypes, System.Type[][] parameterTypeRequiredCustomModifiers, System.Type[][] parameterTypeOptionalCustomModifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.PropertyBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineProperty(name, attributes, returnType, returnTypeRequiredCustomModifiers, returnTypeOptionalCustomModifiers, parameterTypes, parameterTypeRequiredCustomModifiers, parameterTypeOptionalCustomModifiers));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.EventBuilderSW DefineEvent(System.String name, System.Reflection.EventAttributes attributes, System.Type eventtype)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.EventBuilderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DefineEvent(name, attributes, eventtype));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TypeSW CreateType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CreateType());
        }

        /// <summary/>
        public void SetParent(System.Type parent)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetParent(parent);
        }

        /// <summary/>
        public void AddInterfaceImplementation(System.Type interfaceType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.AddInterfaceImplementation(interfaceType);
        }

        /// <summary/>
        public void AddDeclarativeSecurity(System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.AddDeclarativeSecurity(action, pset);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.ConstructorInfo con, System.Byte[] binaryAttribute)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(con, binaryAttribute);
        }

        /// <summary/>
        public void SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder customBuilder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetCustomAttribute(customBuilder);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Reflection.ICustomAttributeProvider.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.ICustomAttributeProvider)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._MemberInfo)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._MemberInfo.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._MemberInfo)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._MemberInfo.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._MemberInfo.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._MemberInfo.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._MemberInfo)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name);
        }

        /// <summary/>
        System.Reflection.MethodInfo[] System.Runtime.InteropServices._Type.GetMethods()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethods();
        }

        /// <summary/>
        System.Reflection.FieldInfo System.Runtime.InteropServices._Type.GetField(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetField(name);
        }

        /// <summary/>
        System.Reflection.FieldInfo[] System.Runtime.InteropServices._Type.GetFields()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetFields();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetInterface(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetInterface(name);
        }

        /// <summary/>
        System.Reflection.EventInfo System.Runtime.InteropServices._Type.GetEvent(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetEvent(name);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, returnType, types, modifiers);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Type returnType, System.Type[] types)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, returnType, types);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Type[] types)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, types);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Type returnType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, returnType);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name);
        }

        /// <summary/>
        System.Reflection.PropertyInfo[] System.Runtime.InteropServices._Type.GetProperties()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperties();
        }

        /// <summary/>
        System.Type[] System.Runtime.InteropServices._Type.GetNestedTypes()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetNestedTypes();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetNestedType(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetNestedType(name);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetMember(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMember(name);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetMembers()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMembers();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.Equals(System.Type o)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).Equals(o);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Type.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Type)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Type)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Type.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Type)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._Type.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._Type)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }

        /// <summary/>
        System.String System.Runtime.InteropServices._Type.ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).ToString();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.Equals(System.Object other)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).Equals(other);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._Type.GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetHashCode();
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetType();
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._Type.GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetCustomAttributes(attributeType, inherit);
        }

        /// <summary/>
        System.Object[] System.Runtime.InteropServices._Type.GetCustomAttributes(System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetCustomAttributes(inherit);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsDefined(System.Type attributeType, System.Boolean inherit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).IsDefined(attributeType, inherit);
        }

        /// <summary/>
        System.Int32 System.Runtime.InteropServices._Type.GetArrayRank()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetArrayRank();
        }

        /// <summary/>
        System.Reflection.ConstructorInfo[] System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetConstructors(bindingAttr);
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetInterface(System.String name, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetInterface(name, ignoreCase);
        }

        /// <summary/>
        System.Type[] System.Runtime.InteropServices._Type.GetInterfaces()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetInterfaces();
        }

        /// <summary/>
        System.Type[] System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter filter, System.Object filterCriteria)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).FindInterfaces(filter, filterCriteria);
        }

        /// <summary/>
        System.Reflection.EventInfo System.Runtime.InteropServices._Type.GetEvent(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetEvent(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.EventInfo[] System.Runtime.InteropServices._Type.GetEvents()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetEvents();
        }

        /// <summary/>
        System.Reflection.EventInfo[] System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetEvents(bindingAttr);
        }

        /// <summary/>
        System.Type[] System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetNestedTypes(bindingAttr);
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetNestedType(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetNestedType(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetMember(System.String name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMember(name, type, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetDefaultMembers()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetDefaultMembers();
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, System.Object filterCriteria)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).FindMembers(memberType, bindingAttr, filter, filterCriteria);
        }

        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.GetElementType()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetElementType();
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsSubclassOf(System.Type c)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).IsSubclassOf(c);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object o)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).IsInstanceOfType(o);
        }

        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type c)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).IsAssignableFrom(c);
        }

        /// <summary/>
        System.Reflection.InterfaceMapping System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type interfaceType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetInterfaceMap(interfaceType);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name, bindingAttr, binder, types, modifiers);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MethodInfo[] System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethods(bindingAttr);
        }

        /// <summary/>
        System.Reflection.FieldInfo System.Runtime.InteropServices._Type.GetField(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetField(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.FieldInfo[] System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetFields(bindingAttr);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Runtime.InteropServices._Type.GetProperty(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperty(name, bindingAttr, binder, returnType, types, modifiers);
        }

        /// <summary/>
        System.Reflection.PropertyInfo[] System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetProperties(bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetMember(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMember(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMembers(bindingAttr);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._Type.InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, System.String[] namedParameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).InvokeMember(name, invokeAttr, binder, target, args, modifiers, culture, namedParameters);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._Type.InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args, System.Globalization.CultureInfo culture)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).InvokeMember(name, invokeAttr, binder, target, args, culture);
        }

        /// <summary/>
        System.Object System.Runtime.InteropServices._Type.InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).InvokeMember(name, invokeAttr, binder, target, args);
        }

        /// <summary/>
        System.Reflection.ConstructorInfo System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetConstructor(bindingAttr, binder, callConvention, types, modifiers);
        }

        /// <summary/>
        System.Reflection.ConstructorInfo System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetConstructor(bindingAttr, binder, types, modifiers);
        }

        /// <summary/>
        System.Reflection.ConstructorInfo System.Runtime.InteropServices._Type.GetConstructor(System.Type[] types)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetConstructor(types);
        }

        /// <summary/>
        System.Reflection.ConstructorInfo[] System.Runtime.InteropServices._Type.GetConstructors()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetConstructors();
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name, bindingAttr, binder, callConvention, types, modifiers);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name, types, modifiers);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Runtime.InteropServices._Type.GetMethod(System.String name, System.Type[] types)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Runtime.InteropServices._Type)InnerObject).GetMethod(name, types);
        }

        /// <summary/>
        System.Reflection.MemberTypes System.Runtime.InteropServices._Type.MemberType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).MemberType; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Type.Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).Name; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.DeclaringType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).DeclaringType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.ReflectedType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).ReflectedType; }
        }
        /// <summary/>
        System.Guid System.Runtime.InteropServices._Type.GUID
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).GUID; }
        }
        /// <summary/>
        System.Reflection.Module System.Runtime.InteropServices._Type.Module
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).Module; }
        }
        /// <summary/>
        System.Reflection.Assembly System.Runtime.InteropServices._Type.Assembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).Assembly; }
        }
        /// <summary/>
        System.RuntimeTypeHandle System.Runtime.InteropServices._Type.TypeHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).TypeHandle; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Type.FullName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).FullName; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Type.Namespace
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).Namespace; }
        }
        /// <summary/>
        System.String System.Runtime.InteropServices._Type.AssemblyQualifiedName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).AssemblyQualifiedName; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.BaseType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).BaseType; }
        }
        /// <summary/>
        System.Type System.Runtime.InteropServices._Type.UnderlyingSystemType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).UnderlyingSystemType; }
        }
        /// <summary/>
        System.Reflection.ConstructorInfo System.Runtime.InteropServices._Type.TypeInitializer
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).TypeInitializer; }
        }
        /// <summary/>
        System.Reflection.TypeAttributes System.Runtime.InteropServices._Type.Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).Attributes; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNotPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNotPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedPublic
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedPublic; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedPrivate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedPrivate; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedFamily; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedAssembly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedAssembly; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedFamANDAssem
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedFamANDAssem; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsNestedFamORAssem
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsNestedFamORAssem; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsAutoLayout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsAutoLayout; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsLayoutSequential
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsLayoutSequential; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsExplicitLayout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsExplicitLayout; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsClass
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsClass; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsInterface
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsInterface; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsValueType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsValueType; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsAbstract
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsAbstract; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsSealed
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsSealed; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsEnum
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsEnum; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsSpecialName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsSpecialName; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsImport
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsImport; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsSerializable
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsSerializable; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsAnsiClass
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsAnsiClass; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsUnicodeClass
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsUnicodeClass; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsAutoClass
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsAutoClass; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsArray
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsArray; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsByRef
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsByRef; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsPointer
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsPointer; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsPrimitive
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsPrimitive; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsCOMObject
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsCOMObject; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.HasElementType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).HasElementType; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsContextful
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsContextful; }
        }
        /// <summary/>
        System.Boolean System.Runtime.InteropServices._Type.IsMarshalByRef
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Runtime.InteropServices._Type)InnerObject).IsMarshalByRef; }
        }
        /// <summary/>
        System.Reflection.MethodInfo System.Reflection.IReflect.GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetMethod(name, bindingAttr, binder, types, modifiers);
        }

        /// <summary/>
        System.Reflection.MethodInfo System.Reflection.IReflect.GetMethod(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetMethod(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MethodInfo[] System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetMethods(bindingAttr);
        }

        /// <summary/>
        System.Reflection.FieldInfo System.Reflection.IReflect.GetField(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetField(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.FieldInfo[] System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetFields(bindingAttr);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Reflection.IReflect.GetProperty(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetProperty(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.PropertyInfo System.Reflection.IReflect.GetProperty(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetProperty(name, bindingAttr, binder, returnType, types, modifiers);
        }

        /// <summary/>
        System.Reflection.PropertyInfo[] System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetProperties(bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Reflection.IReflect.GetMember(System.String name, System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetMember(name, bindingAttr);
        }

        /// <summary/>
        System.Reflection.MemberInfo[] System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags bindingAttr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).GetMembers(bindingAttr);
        }

        /// <summary/>
        System.Object System.Reflection.IReflect.InvokeMember(System.String name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object target, System.Object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, System.String[] namedParameters)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Reflection.IReflect)InnerObject).InvokeMember(name, invokeAttr, binder, target, args, modifiers, culture, namedParameters);
        }

        /// <summary/>
        System.Type System.Reflection.IReflect.UnderlyingSystemType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Reflection.IReflect)InnerObject).UnderlyingSystemType; }
        }
        /// <summary/>
        void System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount(out System.UInt32 pcTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._TypeBuilder)InnerObject).GetTypeInfoCount(out pcTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(System.UInt32 iTInfo, System.UInt32 lcid, System.IntPtr ppTInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._TypeBuilder)InnerObject).GetTypeInfo(iTInfo, lcid, ppTInfo);
        }

        /// <summary/>
        void System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames(ref System.Guid riid, System.IntPtr rgszNames, System.UInt32 cNames, System.UInt32 lcid, System.IntPtr rgDispId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._TypeBuilder)InnerObject).GetIDsOfNames(ref riid, rgszNames, cNames, lcid, rgDispId);
        }

        /// <summary/>
        void System.Runtime.InteropServices._TypeBuilder.Invoke(System.UInt32 dispIdMember, ref System.Guid riid, System.UInt32 lcid, System.Int16 wFlags, System.IntPtr pDispParams, System.IntPtr pVarResult, System.IntPtr pExcepInfo, System.IntPtr puArgErr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.InteropServices._TypeBuilder)InnerObject).Invoke(dispIdMember, ref riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr);
        }


    }

    /// <summary>Security Wrapper for Type: Microsoft.Win32.Registry</summary>
    [System.CLSCompliant(false)]
    public static class RegistrySW : System.Object
    {

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.RegistryKeySW CurrentUser
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.RegistryKeySW)WrapperclassesSecurityWarehouse.Wrap(Microsoft.Win32.Registry.CurrentUser); }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.RegistryKeySW LocalMachine
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.RegistryKeySW)WrapperclassesSecurityWarehouse.Wrap(Microsoft.Win32.Registry.LocalMachine); }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.RegistryKeySW ClassesRoot
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.RegistryKeySW)WrapperclassesSecurityWarehouse.Wrap(Microsoft.Win32.Registry.ClassesRoot); }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.RegistryKeySW Users
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.RegistryKeySW)WrapperclassesSecurityWarehouse.Wrap(Microsoft.Win32.Registry.Users); }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.RegistryKeySW PerformanceData
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.RegistryKeySW)WrapperclassesSecurityWarehouse.Wrap(Microsoft.Win32.Registry.PerformanceData); }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.RegistryKeySW CurrentConfig
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.RegistryKeySW)WrapperclassesSecurityWarehouse.Wrap(Microsoft.Win32.Registry.CurrentConfig); }
        }
        /// <summary/>
        public static System.Object GetValue(System.String keyName, System.String valueName, System.Object defaultValue)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.Win32.Registry.GetValue(keyName, valueName, defaultValue);
        }

        /// <summary/>
        public static void SetValue(System.String keyName, System.String valueName, System.Object value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.Win32.Registry.SetValue(keyName, valueName, value);
        }

        /// <summary/>
        public static void SetValue(System.String keyName, System.String valueName, System.Object value, Microsoft.Win32.RegistryValueKind valueKind)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.Win32.Registry.SetValue(keyName, valueName, value, valueKind);
        }


    }

    /// <summary>Security Wrapper for Type: Microsoft.Win32.RegistryKey</summary>
    [System.CLSCompliant(false)]
    public class RegistryKeySW : Microsoft.Test.Security.Wrappers.MarshalByRefObjectSW, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.RegistryKeySW Wrap(Microsoft.Win32.RegistryKey o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.RegistryKeySW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new Microsoft.Win32.RegistryKey InnerObject
        {
            get { return innerObject as Microsoft.Win32.RegistryKey; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal RegistryKeySW(Microsoft.Win32.RegistryKey o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal RegistryKeySW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public System.Int32 SubKeyCount
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.SubKeyCount; }
        }
        /// <summary/>
        public System.Int32 ValueCount
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ValueCount; }
        }
        /// <summary/>
        public System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.RegistryKeySW OpenSubKey(System.String name, System.Boolean writable)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.RegistryKeySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.OpenSubKey(name, writable));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.RegistryKeySW OpenSubKey(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.RegistryKeySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.OpenSubKey(name));
        }

        /// <summary/>
        public System.Object GetValue(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValue(name);
        }

        /// <summary/>
        public System.Object GetValue(System.String name, System.Object defaultValue)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValue(name, defaultValue);
        }

        /// <summary/>
        public void Flush()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Flush();
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.RegistryKeySW CreateSubKey(System.String subkey)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.RegistryKeySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CreateSubKey(subkey));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.RegistryKeySW CreateSubKey(System.String subkey, Microsoft.Win32.RegistryKeyPermissionCheck permissionCheck)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.RegistryKeySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CreateSubKey(subkey, permissionCheck));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.RegistryKeySW CreateSubKey(System.String subkey, Microsoft.Win32.RegistryKeyPermissionCheck permissionCheck, System.Security.AccessControl.RegistrySecurity registrySecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.RegistryKeySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CreateSubKey(subkey, permissionCheck, registrySecurity));
        }

        /// <summary/>
        public void DeleteSubKey(System.String subkey)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.DeleteSubKey(subkey);
        }

        /// <summary/>
        public void DeleteSubKey(System.String subkey, System.Boolean throwOnMissingSubKey)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.DeleteSubKey(subkey, throwOnMissingSubKey);
        }

        /// <summary/>
        public void DeleteSubKeyTree(System.String subkey)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.DeleteSubKeyTree(subkey);
        }

        /// <summary/>
        public void DeleteValue(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.DeleteValue(name);
        }

        /// <summary/>
        public void DeleteValue(System.String name, System.Boolean throwOnMissingValue)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.DeleteValue(name, throwOnMissingValue);
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.RegistryKeySW OpenRemoteBaseKey(Microsoft.Win32.RegistryHive hKey, System.String machineName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.RegistryKeySW)WrapperclassesSecurityWarehouse.Wrap(Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(hKey, machineName));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.RegistryKeySW OpenSubKey(System.String name, Microsoft.Win32.RegistryKeyPermissionCheck permissionCheck)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.RegistryKeySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.OpenSubKey(name, permissionCheck));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.RegistryKeySW OpenSubKey(System.String name, Microsoft.Win32.RegistryKeyPermissionCheck permissionCheck, System.Security.AccessControl.RegistryRights rights)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.RegistryKeySW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.OpenSubKey(name, permissionCheck, rights));
        }

        /// <summary/>
        public System.String[] GetSubKeyNames()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSubKeyNames();
        }

        /// <summary/>
        public System.String[] GetValueNames()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValueNames();
        }

        /// <summary/>
        public System.Object GetValue(System.String name, System.Object defaultValue, Microsoft.Win32.RegistryValueOptions options)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValue(name, defaultValue, options);
        }

        /// <summary/>
        public Microsoft.Win32.RegistryValueKind GetValueKind(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValueKind(name);
        }

        /// <summary/>
        public void SetValue(System.String name, System.Object value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetValue(name, value);
        }

        /// <summary/>
        public void SetValue(System.String name, System.Object value, Microsoft.Win32.RegistryValueKind valueKind)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetValue(name, value, valueKind);
        }

        /// <summary/>
        public override System.String ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ToString();
        }

        /// <summary/>
        public System.Security.AccessControl.RegistrySecurity GetAccessControl()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetAccessControl();
        }

        /// <summary/>
        public System.Security.AccessControl.RegistrySecurity GetAccessControl(System.Security.AccessControl.AccessControlSections includeSections)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetAccessControl(includeSections);
        }

        /// <summary/>
        public void SetAccessControl(System.Security.AccessControl.RegistrySecurity registrySecurity)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetAccessControl(registrySecurity);
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.Delegate</summary>
    [System.CLSCompliant(false)]
    public class DelegateSW : System.Object, System.ICloneable, System.Runtime.Serialization.ISerializable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.DelegateSW Wrap(System.Delegate o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.DelegateSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Delegate InnerObject
        {
            get { return innerObject as System.Delegate; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal DelegateSW(System.Delegate o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal DelegateSW(System.DayOfWeek day) { }

        /// <summary/>
        protected DelegateSW(System.Object target, System.String method)
        {
        }

        /// <summary/>
        protected DelegateSW(System.Type target, System.String method)
        {
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.MethodInfoSW Method
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.MethodInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Method); }
        }
        /// <summary/>
        public System.Object Target
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Target; }
        }
        /// <summary/>
        public System.Object DynamicInvoke(System.Object[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.DynamicInvoke(args);
        }

        /// <summary/>
        public override System.Boolean Equals(System.Object obj)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Equals(obj);
        }

        /// <summary/>
        public override System.Int32 GetHashCode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetHashCode();
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.DelegateSW Combine(System.Delegate a, System.Delegate b)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DelegateSW)WrapperclassesSecurityWarehouse.Wrap(System.Delegate.Combine(a, b));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.DelegateSW Combine(System.Delegate[] delegates)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DelegateSW)WrapperclassesSecurityWarehouse.Wrap(System.Delegate.Combine(delegates));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.DelegateSW[] GetInvocationList()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DelegateSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetInvocationList());
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.DelegateSW Remove(System.Delegate source, System.Delegate value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DelegateSW)WrapperclassesSecurityWarehouse.Wrap(System.Delegate.Remove(source, value));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.DelegateSW RemoveAll(System.Delegate source, System.Delegate value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DelegateSW)WrapperclassesSecurityWarehouse.Wrap(System.Delegate.RemoveAll(source, value));
        }

        /// <summary/>
        public virtual System.Object Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Clone();
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.DelegateSW CreateDelegate(System.Type type, System.Object target, System.String method)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DelegateSW)WrapperclassesSecurityWarehouse.Wrap(System.Delegate.CreateDelegate(type, target, method));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.DelegateSW CreateDelegate(System.Type type, System.Object target, System.String method, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DelegateSW)WrapperclassesSecurityWarehouse.Wrap(System.Delegate.CreateDelegate(type, target, method, ignoreCase));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.DelegateSW CreateDelegate(System.Type type, System.Object target, System.String method, System.Boolean ignoreCase, System.Boolean throwOnBindFailure)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DelegateSW)WrapperclassesSecurityWarehouse.Wrap(System.Delegate.CreateDelegate(type, target, method, ignoreCase, throwOnBindFailure));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.DelegateSW CreateDelegate(System.Type type, System.Type target, System.String method)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DelegateSW)WrapperclassesSecurityWarehouse.Wrap(System.Delegate.CreateDelegate(type, target, method));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.DelegateSW CreateDelegate(System.Type type, System.Type target, System.String method, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DelegateSW)WrapperclassesSecurityWarehouse.Wrap(System.Delegate.CreateDelegate(type, target, method, ignoreCase));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.DelegateSW CreateDelegate(System.Type type, System.Type target, System.String method, System.Boolean ignoreCase, System.Boolean throwOnBindFailure)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DelegateSW)WrapperclassesSecurityWarehouse.Wrap(System.Delegate.CreateDelegate(type, target, method, ignoreCase, throwOnBindFailure));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.DelegateSW CreateDelegate(System.Type type, System.Reflection.MethodInfo method)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DelegateSW)WrapperclassesSecurityWarehouse.Wrap(System.Delegate.CreateDelegate(type, method));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.DelegateSW CreateDelegate(System.Type type, System.Reflection.MethodInfo method, System.Boolean throwOnBindFailure)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DelegateSW)WrapperclassesSecurityWarehouse.Wrap(System.Delegate.CreateDelegate(type, method, throwOnBindFailure));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.DelegateSW CreateDelegate(System.Type type, System.Object firstArgument, System.Reflection.MethodInfo method)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DelegateSW)WrapperclassesSecurityWarehouse.Wrap(System.Delegate.CreateDelegate(type, firstArgument, method));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.DelegateSW CreateDelegate(System.Type type, System.Object firstArgument, System.Reflection.MethodInfo method, System.Boolean throwOnBindFailure)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DelegateSW)WrapperclassesSecurityWarehouse.Wrap(System.Delegate.CreateDelegate(type, firstArgument, method, throwOnBindFailure));
        }

        /// <summary/>
        public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.GetObjectData(info, context);
        }

        /// <summary/>
        System.Object System.ICloneable.Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ICloneable)InnerObject).Clone();
        }

        /// <summary/>
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.Serialization.ISerializable)InnerObject).GetObjectData(info, context);
        }


    }

    /// <summary>Security Wrapper for Type: System.Resources.ResourceSet</summary>
    [System.CLSCompliant(false)]
    public class ResourceSetSW : System.Object, System.IDisposable, System.Collections.IEnumerable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ResourceSetSW Wrap(System.Resources.ResourceSet o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ResourceSetSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Resources.ResourceSet InnerObject
        {
            get { return innerObject as System.Resources.ResourceSet; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ResourceSetSW(System.Resources.ResourceSet o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ResourceSetSW(System.DayOfWeek day) { }

        /// <summary/>
        protected ResourceSetSW()
        {
        }

        /// <summary/>
        public ResourceSetSW(System.String fileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Resources.ResourceSet(fileName);
        }

        /// <summary/>
        public ResourceSetSW(System.IO.Stream stream)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Resources.ResourceSet(stream);
        }

        /// <summary/>
        public ResourceSetSW(System.Resources.IResourceReader reader)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Resources.ResourceSet(reader);
        }

        /// <summary/>
        public virtual void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public virtual void Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Dispose();
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW GetDefaultReader()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetDefaultReader());
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW GetDefaultWriter()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetDefaultWriter());
        }

        /// <summary/>
        public virtual System.Collections.IDictionaryEnumerator GetEnumerator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetEnumerator();
        }

        /// <summary/>
        public virtual System.String GetString(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetString(name);
        }

        /// <summary/>
        public virtual System.String GetString(System.String name, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetString(name, ignoreCase);
        }

        /// <summary/>
        public virtual System.Object GetObject(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetObject(name);
        }

        /// <summary/>
        public virtual System.Object GetObject(System.String name, System.Boolean ignoreCase)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetObject(name, ignoreCase);
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Collections.IEnumerable)InnerObject).GetEnumerator();
        }


    }

    /// <summary>Security Wrapper for Type: System.Diagnostics.Process</summary>
    [System.CLSCompliant(false)]
    public class ProcessSW : Microsoft.Test.Security.Wrappers.ComponentSW, System.ComponentModel.IComponent, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ProcessSW Wrap(System.Diagnostics.Process o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ProcessSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Diagnostics.Process InnerObject
        {
            get { return innerObject as System.Diagnostics.Process; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ProcessSW(System.Diagnostics.Process o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ProcessSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public ProcessSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Diagnostics.Process();
        }

        /// <summary/>
        public System.Int32 BasePriority
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.BasePriority; }
        }
        /// <summary/>
        public System.Int32 ExitCode
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ExitCode; }
        }
        /// <summary/>
        public System.Boolean HasExited
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HasExited; }
        }
        /// <summary/>
        public System.DateTime ExitTime
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ExitTime; }
        }
        /// <summary/>
        public System.IntPtr Handle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Handle; }
        }
        /// <summary/>
        public System.Int32 HandleCount
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HandleCount; }
        }
        /// <summary/>
        public System.Int32 Id
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Id; }
        }
        /// <summary/>
        public System.String MachineName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MachineName; }
        }
        /// <summary/>
        public System.IntPtr MainWindowHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MainWindowHandle; }
        }
        /// <summary/>
        public System.String MainWindowTitle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MainWindowTitle; }
        }
        /// <summary/>
        public System.Diagnostics.ProcessModule MainModule
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MainModule; }
        }
        /// <summary/>
        public System.IntPtr MaxWorkingSet
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MaxWorkingSet; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MaxWorkingSet = value; }
        }
        /// <summary/>
        public System.IntPtr MinWorkingSet
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MinWorkingSet; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MinWorkingSet = value; }
        }
        /// <summary/>
        public System.Diagnostics.ProcessModuleCollection Modules
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Modules; }
        }
        /// <summary/>
        public System.Int64 NonpagedSystemMemorySize64
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.NonpagedSystemMemorySize64; }
        }
        /// <summary/>
        public System.Int64 PagedMemorySize64
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PagedMemorySize64; }
        }
        /// <summary/>
        public System.Int64 PagedSystemMemorySize64
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PagedSystemMemorySize64; }
        }
        /// <summary/>
        public System.Int64 PeakPagedMemorySize64
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PeakPagedMemorySize64; }
        }
        /// <summary/>
        public System.Int64 PeakWorkingSet64
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PeakWorkingSet64; }
        }
        /// <summary/>
        public System.Int64 PeakVirtualMemorySize64
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PeakVirtualMemorySize64; }
        }
        /// <summary/>
        public System.Boolean PriorityBoostEnabled
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PriorityBoostEnabled; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.PriorityBoostEnabled = value; }
        }
        /// <summary/>
        public System.Diagnostics.ProcessPriorityClass PriorityClass
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PriorityClass; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.PriorityClass = value; }
        }
        /// <summary/>
        public System.Int64 PrivateMemorySize64
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PrivateMemorySize64; }
        }
        /// <summary/>
        public System.TimeSpan PrivilegedProcessorTime
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PrivilegedProcessorTime; }
        }
        /// <summary/>
        public System.String ProcessName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ProcessName; }
        }
        /// <summary/>
        public System.IntPtr ProcessorAffinity
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ProcessorAffinity; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ProcessorAffinity = value; }
        }
        /// <summary/>
        public System.Boolean Responding
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Responding; }
        }
        /// <summary/>
        public System.Int32 SessionId
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.SessionId; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ProcessStartInfoSW StartInfo
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ProcessStartInfoSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.StartInfo); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.StartInfo = value.InnerObject; }
        }
        /// <summary/>
        public System.DateTime StartTime
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.StartTime; }
        }
        /// <summary/>
        public System.ComponentModel.ISynchronizeInvoke SynchronizingObject
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.SynchronizingObject; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.SynchronizingObject = value; }
        }
        /// <summary/>
        public System.Diagnostics.ProcessThreadCollection Threads
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Threads; }
        }
        /// <summary/>
        public System.TimeSpan TotalProcessorTime
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.TotalProcessorTime; }
        }
        /// <summary/>
        public System.TimeSpan UserProcessorTime
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.UserProcessorTime; }
        }
        /// <summary/>
        public System.Int64 VirtualMemorySize64
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.VirtualMemorySize64; }
        }
        /// <summary/>
        public System.Boolean EnableRaisingEvents
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.EnableRaisingEvents; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.EnableRaisingEvents = value; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.StreamWriterSW StandardInput
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.StreamWriterSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.StandardInput); }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.StreamReaderSW StandardOutput
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.StreamReaderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.StandardOutput); }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.StreamReaderSW StandardError
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.StreamReaderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.StandardError); }
        }
        /// <summary/>
        public System.Int64 WorkingSet64
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.WorkingSet64; }
        }
        /// <summary/>
        public System.Boolean CloseMainWindow()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CloseMainWindow();
        }

        /// <summary/>
        public void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public static void EnterDebugMode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Diagnostics.Process.EnterDebugMode();
        }

        /// <summary/>
        public static void LeaveDebugMode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Diagnostics.Process.LeaveDebugMode();
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ProcessSW GetProcessById(System.Int32 processId, System.String machineName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ProcessSW)WrapperclassesSecurityWarehouse.Wrap(System.Diagnostics.Process.GetProcessById(processId, machineName));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ProcessSW GetProcessById(System.Int32 processId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ProcessSW)WrapperclassesSecurityWarehouse.Wrap(System.Diagnostics.Process.GetProcessById(processId));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ProcessSW[] GetProcessesByName(System.String processName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ProcessSW[])WrapperclassesSecurityWarehouse.Wrap(System.Diagnostics.Process.GetProcessesByName(processName));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ProcessSW[] GetProcessesByName(System.String processName, System.String machineName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ProcessSW[])WrapperclassesSecurityWarehouse.Wrap(System.Diagnostics.Process.GetProcessesByName(processName, machineName));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ProcessSW[] GetProcesses()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ProcessSW[])WrapperclassesSecurityWarehouse.Wrap(System.Diagnostics.Process.GetProcesses());
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ProcessSW[] GetProcesses(System.String machineName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ProcessSW[])WrapperclassesSecurityWarehouse.Wrap(System.Diagnostics.Process.GetProcesses(machineName));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ProcessSW GetCurrentProcess()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ProcessSW)WrapperclassesSecurityWarehouse.Wrap(System.Diagnostics.Process.GetCurrentProcess());
        }

        /// <summary/>
        public void Refresh()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Refresh();
        }

        /// <summary/>
        public System.Boolean Start()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Start();
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ProcessSW Start(System.String fileName, System.String userName, System.Security.SecureString password, System.String domain)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ProcessSW)WrapperclassesSecurityWarehouse.Wrap(System.Diagnostics.Process.Start(fileName, userName, password, domain));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ProcessSW Start(System.String fileName, System.String arguments, System.String userName, System.Security.SecureString password, System.String domain)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ProcessSW)WrapperclassesSecurityWarehouse.Wrap(System.Diagnostics.Process.Start(fileName, arguments, userName, password, domain));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ProcessSW Start(System.String fileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ProcessSW)WrapperclassesSecurityWarehouse.Wrap(System.Diagnostics.Process.Start(fileName));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ProcessSW Start(System.String fileName, System.String arguments)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ProcessSW)WrapperclassesSecurityWarehouse.Wrap(System.Diagnostics.Process.Start(fileName, arguments));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ProcessSW Start(System.Diagnostics.ProcessStartInfo startInfo)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ProcessSW)WrapperclassesSecurityWarehouse.Wrap(System.Diagnostics.Process.Start(startInfo));
        }

        /// <summary/>
        public void Kill()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Kill();
        }

        /// <summary/>
        public override System.String ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ToString();
        }

        /// <summary/>
        public System.Boolean WaitForExit(System.Int32 milliseconds)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.WaitForExit(milliseconds);
        }

        /// <summary/>
        public void WaitForExit()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WaitForExit();
        }

        /// <summary/>
        public System.Boolean WaitForInputIdle(System.Int32 milliseconds)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.WaitForInputIdle(milliseconds);
        }

        /// <summary/>
        public System.Boolean WaitForInputIdle()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.WaitForInputIdle();
        }

        /// <summary/>
        public void BeginOutputReadLine()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.BeginOutputReadLine();
        }

        /// <summary/>
        public void BeginErrorReadLine()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.BeginErrorReadLine();
        }

        /// <summary/>
        public void CancelOutputRead()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.CancelOutputRead();
        }

        /// <summary/>
        public void CancelErrorRead()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.CancelErrorRead();
        }

        /// <summary/>
        public event System.Diagnostics.DataReceivedEventHandler OutputDataReceived
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.OutputDataReceived += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.OutputDataReceived -= value; }
        }

        /// <summary/>
        public event System.Diagnostics.DataReceivedEventHandler ErrorDataReceived
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ErrorDataReceived += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ErrorDataReceived -= value; }
        }

        /// <summary/>
        public event System.EventHandler Exited
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Exited += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Exited -= value; }
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.ComponentModel.Component</summary>
    [System.CLSCompliant(false)]
    public class ComponentSW : Microsoft.Test.Security.Wrappers.MarshalByRefObjectSW, System.ComponentModel.IComponent, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ComponentSW Wrap(System.ComponentModel.Component o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ComponentSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.ComponentModel.Component InnerObject
        {
            get { return innerObject as System.ComponentModel.Component; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ComponentSW(System.ComponentModel.Component o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ComponentSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public ComponentSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.ComponentModel.Component();
        }

        /// <summary/>
        public virtual System.ComponentModel.ISite Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Site = value; }
        }
        /// <summary/>
        public System.ComponentModel.IContainer Container
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Container; }
        }
        /// <summary/>
        public virtual void Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Dispose();
        }

        /// <summary/>
        public override System.String ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ToString();
        }

        /// <summary/>
        public virtual event System.EventHandler Disposed
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Disposed += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Disposed -= value; }
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.Diagnostics.ProcessStartInfo</summary>
    [System.CLSCompliant(false)]
    public class ProcessStartInfoSW : System.Object
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ProcessStartInfoSW Wrap(System.Diagnostics.ProcessStartInfo o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ProcessStartInfoSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Diagnostics.ProcessStartInfo InnerObject
        {
            get { return innerObject as System.Diagnostics.ProcessStartInfo; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ProcessStartInfoSW(System.Diagnostics.ProcessStartInfo o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ProcessStartInfoSW(System.DayOfWeek day) { }

        /// <summary/>
        public ProcessStartInfoSW()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Diagnostics.ProcessStartInfo();
        }

        /// <summary/>
        public ProcessStartInfoSW(System.String fileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Diagnostics.ProcessStartInfo(fileName);
        }

        /// <summary/>
        public ProcessStartInfoSW(System.String fileName, System.String arguments)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Diagnostics.ProcessStartInfo(fileName, arguments);
        }

        /// <summary/>
        public System.String Verb
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Verb; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Verb = value; }
        }
        /// <summary/>
        public System.String Arguments
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Arguments; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Arguments = value; }
        }
        /// <summary/>
        public System.Boolean CreateNoWindow
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CreateNoWindow; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CreateNoWindow = value; }
        }
        /// <summary/>
        public System.Collections.Specialized.StringDictionary EnvironmentVariables
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.EnvironmentVariables; }
        }
        /// <summary/>
        public System.Boolean RedirectStandardInput
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.RedirectStandardInput; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RedirectStandardInput = value; }
        }
        /// <summary/>
        public System.Boolean RedirectStandardOutput
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.RedirectStandardOutput; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RedirectStandardOutput = value; }
        }
        /// <summary/>
        public System.Boolean RedirectStandardError
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.RedirectStandardError; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RedirectStandardError = value; }
        }
        /// <summary/>
        public System.Text.Encoding StandardErrorEncoding
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.StandardErrorEncoding; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.StandardErrorEncoding = value; }
        }
        /// <summary/>
        public System.Text.Encoding StandardOutputEncoding
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.StandardOutputEncoding; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.StandardOutputEncoding = value; }
        }
        /// <summary/>
        public System.Boolean UseShellExecute
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.UseShellExecute; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.UseShellExecute = value; }
        }
        /// <summary/>
        public System.String[] Verbs
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Verbs; }
        }
        /// <summary/>
        public System.String UserName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.UserName; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.UserName = value; }
        }
        /// <summary/>
        public System.Security.SecureString Password
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Password; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Password = value; }
        }
        /// <summary/>
        public System.String Domain
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Domain; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Domain = value; }
        }
        /// <summary/>
        public System.Boolean LoadUserProfile
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.LoadUserProfile; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.LoadUserProfile = value; }
        }
        /// <summary/>
        public System.String FileName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FileName; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.FileName = value; }
        }
        /// <summary/>
        public System.String WorkingDirectory
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.WorkingDirectory; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.WorkingDirectory = value; }
        }
        /// <summary/>
        public System.Boolean ErrorDialog
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ErrorDialog; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ErrorDialog = value; }
        }
        /// <summary/>
        public System.IntPtr ErrorDialogParentHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ErrorDialogParentHandle; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ErrorDialogParentHandle = value; }
        }
        /// <summary/>
        public System.Diagnostics.ProcessWindowStyle WindowStyle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.WindowStyle; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.WindowStyle = value; }
        }

    }

    /// <summary>Security Wrapper for Type: System.Net.Sockets.Socket</summary>
    [System.CLSCompliant(false)]
    public class SocketSW : System.Object, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.SocketSW Wrap(System.Net.Sockets.Socket o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.SocketSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Net.Sockets.Socket InnerObject
        {
            get { return innerObject as System.Net.Sockets.Socket; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal SocketSW(System.Net.Sockets.Socket o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal SocketSW(System.DayOfWeek day) { }

        /// <summary/>
        public SocketSW(System.Net.Sockets.AddressFamily addressFamily, System.Net.Sockets.SocketType socketType, System.Net.Sockets.ProtocolType protocolType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Net.Sockets.Socket(addressFamily, socketType, protocolType);
        }

        /// <summary/>
        public SocketSW(System.Net.Sockets.SocketInformation socketInformation)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Net.Sockets.Socket(socketInformation);
        }

        /// <summary/>
        public static System.Boolean SupportsIPv4
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Net.Sockets.Socket.SupportsIPv4; }
        }
        /// <summary/>
        public static System.Boolean OSSupportsIPv6
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Net.Sockets.Socket.OSSupportsIPv6; }
        }
        /// <summary/>
        public System.Int32 Available
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Available; }
        }
        /// <summary/>
        public System.Net.EndPoint LocalEndPoint
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.LocalEndPoint; }
        }
        /// <summary/>
        public System.Net.EndPoint RemoteEndPoint
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.RemoteEndPoint; }
        }
        /// <summary/>
        public System.IntPtr Handle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Handle; }
        }
        /// <summary/>
        public System.Boolean Blocking
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Blocking; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Blocking = value; }
        }
        /// <summary/>
        public System.Boolean UseOnlyOverlappedIO
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.UseOnlyOverlappedIO; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.UseOnlyOverlappedIO = value; }
        }
        /// <summary/>
        public System.Boolean Connected
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Connected; }
        }
        /// <summary/>
        public System.Net.Sockets.AddressFamily AddressFamily
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AddressFamily; }
        }
        /// <summary/>
        public System.Net.Sockets.SocketType SocketType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.SocketType; }
        }
        /// <summary/>
        public System.Net.Sockets.ProtocolType ProtocolType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ProtocolType; }
        }
        /// <summary/>
        public System.Boolean IsBound
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsBound; }
        }
        /// <summary/>
        public System.Boolean ExclusiveAddressUse
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ExclusiveAddressUse; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ExclusiveAddressUse = value; }
        }
        /// <summary/>
        public System.Int32 ReceiveBufferSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ReceiveBufferSize; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ReceiveBufferSize = value; }
        }
        /// <summary/>
        public System.Int32 SendBufferSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.SendBufferSize; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.SendBufferSize = value; }
        }
        /// <summary/>
        public System.Int32 ReceiveTimeout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ReceiveTimeout; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ReceiveTimeout = value; }
        }
        /// <summary/>
        public System.Int32 SendTimeout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.SendTimeout; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.SendTimeout = value; }
        }
        /// <summary/>
        public System.Net.Sockets.LingerOption LingerState
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.LingerState; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.LingerState = value; }
        }
        /// <summary/>
        public System.Boolean NoDelay
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.NoDelay; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.NoDelay = value; }
        }
        /// <summary/>
        public System.Int16 Ttl
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Ttl; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Ttl = value; }
        }
        /// <summary/>
        public System.Boolean DontFragment
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DontFragment; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DontFragment = value; }
        }
        /// <summary/>
        public System.Boolean MulticastLoopback
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MulticastLoopback; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MulticastLoopback = value; }
        }
        /// <summary/>
        public System.Boolean EnableBroadcast
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.EnableBroadcast; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.EnableBroadcast = value; }
        }
        /// <summary/>
        public void Bind(System.Net.EndPoint localEP)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Bind(localEP);
        }

        /// <summary/>
        public void Connect(System.Net.EndPoint remoteEP)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Connect(remoteEP);
        }

        /// <summary/>
        public void Connect(System.Net.IPAddress address, System.Int32 port)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Connect(address, port);
        }

        /// <summary/>
        public void Connect(System.String host, System.Int32 port)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Connect(host, port);
        }

        /// <summary/>
        public void Connect(System.Net.IPAddress[] addresses, System.Int32 port)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Connect(addresses, port);
        }

        /// <summary/>
        public void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public void Close(System.Int32 timeout)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close(timeout);
        }

        /// <summary/>
        public void Listen(System.Int32 backlog)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Listen(backlog);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.SocketSW Accept()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SocketSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Accept());
        }

        /// <summary/>
        public System.Int32 Send(System.Byte[] buffer, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Send(buffer, size, socketFlags);
        }

        /// <summary/>
        public System.Int32 Send(System.Byte[] buffer, System.Net.Sockets.SocketFlags socketFlags)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Send(buffer, socketFlags);
        }

        /// <summary/>
        public System.Int32 Send(System.Byte[] buffer)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Send(buffer);
        }

        /// <summary/>
        public System.Int32 Send(System.Collections.Generic.IList<System.ArraySegment<System.Byte>> buffers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Send(buffers);
        }

        /// <summary/>
        public System.Int32 Send(System.Collections.Generic.IList<System.ArraySegment<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Send(buffers, socketFlags);
        }

        /// <summary/>
        public System.Int32 Send(System.Collections.Generic.IList<System.ArraySegment<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Send(buffers, socketFlags, out errorCode);
        }

        /// <summary/>
        public void SendFile(System.String fileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SendFile(fileName);
        }

        /// <summary/>
        public void SendFile(System.String fileName, System.Byte[] preBuffer, System.Byte[] postBuffer, System.Net.Sockets.TransmitFileOptions flags)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SendFile(fileName, preBuffer, postBuffer, flags);
        }

        /// <summary/>
        public System.Int32 Send(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Send(buffer, offset, size, socketFlags);
        }

        /// <summary/>
        public System.Int32 Send(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Send(buffer, offset, size, socketFlags, out errorCode);
        }

        /// <summary/>
        public System.Int32 SendTo(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.SendTo(buffer, offset, size, socketFlags, remoteEP);
        }

        /// <summary/>
        public System.Int32 SendTo(System.Byte[] buffer, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.SendTo(buffer, size, socketFlags, remoteEP);
        }

        /// <summary/>
        public System.Int32 SendTo(System.Byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.SendTo(buffer, socketFlags, remoteEP);
        }

        /// <summary/>
        public System.Int32 SendTo(System.Byte[] buffer, System.Net.EndPoint remoteEP)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.SendTo(buffer, remoteEP);
        }

        /// <summary/>
        public System.Int32 Receive(System.Byte[] buffer, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Receive(buffer, size, socketFlags);
        }

        /// <summary/>
        public System.Int32 Receive(System.Byte[] buffer, System.Net.Sockets.SocketFlags socketFlags)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Receive(buffer, socketFlags);
        }

        /// <summary/>
        public System.Int32 Receive(System.Byte[] buffer)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Receive(buffer);
        }

        /// <summary/>
        public System.Int32 Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Receive(buffer, offset, size, socketFlags);
        }

        /// <summary/>
        public System.Int32 Receive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Receive(buffer, offset, size, socketFlags, out errorCode);
        }

        /// <summary/>
        public System.Int32 Receive(System.Collections.Generic.IList<System.ArraySegment<System.Byte>> buffers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Receive(buffers);
        }

        /// <summary/>
        public System.Int32 Receive(System.Collections.Generic.IList<System.ArraySegment<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Receive(buffers, socketFlags);
        }

        /// <summary/>
        public System.Int32 Receive(System.Collections.Generic.IList<System.ArraySegment<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Receive(buffers, socketFlags, out errorCode);
        }

        /// <summary/>
        public System.Int32 ReceiveMessageFrom(System.Byte[] buffer, System.Int32 offset, System.Int32 size, ref System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, out System.Net.Sockets.IPPacketInformation ipPacketInformation)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReceiveMessageFrom(buffer, offset, size, ref socketFlags, ref remoteEP, out ipPacketInformation);
        }

        /// <summary/>
        public System.Int32 ReceiveFrom(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReceiveFrom(buffer, offset, size, socketFlags, ref remoteEP);
        }

        /// <summary/>
        public System.Int32 ReceiveFrom(System.Byte[] buffer, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReceiveFrom(buffer, size, socketFlags, ref remoteEP);
        }

        /// <summary/>
        public System.Int32 ReceiveFrom(System.Byte[] buffer, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReceiveFrom(buffer, socketFlags, ref remoteEP);
        }

        /// <summary/>
        public System.Int32 ReceiveFrom(System.Byte[] buffer, ref System.Net.EndPoint remoteEP)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReceiveFrom(buffer, ref remoteEP);
        }

        /// <summary/>
        public System.Int32 IOControl(System.Int32 ioControlCode, System.Byte[] optionInValue, System.Byte[] optionOutValue)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IOControl(ioControlCode, optionInValue, optionOutValue);
        }

        /// <summary/>
        public System.Int32 IOControl(System.Net.Sockets.IOControlCode ioControlCode, System.Byte[] optionInValue, System.Byte[] optionOutValue)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IOControl(ioControlCode, optionInValue, optionOutValue);
        }

        /// <summary/>
        public void SetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Int32 optionValue)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetSocketOption(optionLevel, optionName, optionValue);
        }

        /// <summary/>
        public void SetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Byte[] optionValue)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetSocketOption(optionLevel, optionName, optionValue);
        }

        /// <summary/>
        public void SetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Boolean optionValue)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetSocketOption(optionLevel, optionName, optionValue);
        }

        /// <summary/>
        public void SetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Object optionValue)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetSocketOption(optionLevel, optionName, optionValue);
        }

        /// <summary/>
        public System.Object GetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSocketOption(optionLevel, optionName);
        }

        /// <summary/>
        public void GetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Byte[] optionValue)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.GetSocketOption(optionLevel, optionName, optionValue);
        }

        /// <summary/>
        public System.Byte[] GetSocketOption(System.Net.Sockets.SocketOptionLevel optionLevel, System.Net.Sockets.SocketOptionName optionName, System.Int32 optionLength)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSocketOption(optionLevel, optionName, optionLength);
        }

        /// <summary/>
        public System.Boolean Poll(System.Int32 microSeconds, System.Net.Sockets.SelectMode mode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Poll(microSeconds, mode);
        }

        /// <summary/>
        public static void Select(System.Collections.IList checkRead, System.Collections.IList checkWrite, System.Collections.IList checkError, System.Int32 microSeconds)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Net.Sockets.Socket.Select(checkRead, checkWrite, checkError, microSeconds);
        }

        /// <summary/>
        public System.IAsyncResult BeginSendFile(System.String fileName, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginSendFile(fileName, callback, state);
        }

        /// <summary/>
        public System.IAsyncResult BeginConnect(System.Net.EndPoint remoteEP, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginConnect(remoteEP, callback, state);
        }

        /// <summary/>
        public System.Net.Sockets.SocketInformation DuplicateAndClose(System.Int32 targetProcessId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.DuplicateAndClose(targetProcessId);
        }

        /// <summary/>
        public System.IAsyncResult BeginConnect(System.String host, System.Int32 port, System.AsyncCallback requestCallback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginConnect(host, port, requestCallback, state);
        }

        /// <summary/>
        public System.IAsyncResult BeginConnect(System.Net.IPAddress address, System.Int32 port, System.AsyncCallback requestCallback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginConnect(address, port, requestCallback, state);
        }

        /// <summary/>
        public System.IAsyncResult BeginConnect(System.Net.IPAddress[] addresses, System.Int32 port, System.AsyncCallback requestCallback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginConnect(addresses, port, requestCallback, state);
        }

        /// <summary/>
        public System.IAsyncResult BeginDisconnect(System.Boolean reuseSocket, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginDisconnect(reuseSocket, callback, state);
        }

        /// <summary/>
        public void Disconnect(System.Boolean reuseSocket)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Disconnect(reuseSocket);
        }

        /// <summary/>
        public void EndConnect(System.IAsyncResult asyncResult)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EndConnect(asyncResult);
        }

        /// <summary/>
        public void EndDisconnect(System.IAsyncResult asyncResult)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EndDisconnect(asyncResult);
        }

        /// <summary/>
        public System.IAsyncResult BeginSend(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginSend(buffer, offset, size, socketFlags, callback, state);
        }

        /// <summary/>
        public System.IAsyncResult BeginSend(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginSend(buffer, offset, size, socketFlags, out errorCode, callback, state);
        }

        /// <summary/>
        public System.IAsyncResult BeginSendFile(System.String fileName, System.Byte[] preBuffer, System.Byte[] postBuffer, System.Net.Sockets.TransmitFileOptions flags, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginSendFile(fileName, preBuffer, postBuffer, flags, callback, state);
        }

        /// <summary/>
        public System.IAsyncResult BeginSend(System.Collections.Generic.IList<System.ArraySegment<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginSend(buffers, socketFlags, callback, state);
        }

        /// <summary/>
        public System.IAsyncResult BeginSend(System.Collections.Generic.IList<System.ArraySegment<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginSend(buffers, socketFlags, out errorCode, callback, state);
        }

        /// <summary/>
        public System.Int32 EndSend(System.IAsyncResult asyncResult)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.EndSend(asyncResult);
        }

        /// <summary/>
        public System.Int32 EndSend(System.IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.EndSend(asyncResult, out errorCode);
        }

        /// <summary/>
        public void EndSendFile(System.IAsyncResult asyncResult)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EndSendFile(asyncResult);
        }

        /// <summary/>
        public System.IAsyncResult BeginSendTo(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.Net.EndPoint remoteEP, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginSendTo(buffer, offset, size, socketFlags, remoteEP, callback, state);
        }

        /// <summary/>
        public System.Int32 EndSendTo(System.IAsyncResult asyncResult)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.EndSendTo(asyncResult);
        }

        /// <summary/>
        public System.IAsyncResult BeginReceive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginReceive(buffer, offset, size, socketFlags, callback, state);
        }

        /// <summary/>
        public System.IAsyncResult BeginReceive(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginReceive(buffer, offset, size, socketFlags, out errorCode, callback, state);
        }

        /// <summary/>
        public System.IAsyncResult BeginReceive(System.Collections.Generic.IList<System.ArraySegment<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginReceive(buffers, socketFlags, callback, state);
        }

        /// <summary/>
        public System.IAsyncResult BeginReceive(System.Collections.Generic.IList<System.ArraySegment<System.Byte>> buffers, System.Net.Sockets.SocketFlags socketFlags, out System.Net.Sockets.SocketError errorCode, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginReceive(buffers, socketFlags, out errorCode, callback, state);
        }

        /// <summary/>
        public System.Int32 EndReceive(System.IAsyncResult asyncResult)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.EndReceive(asyncResult);
        }

        /// <summary/>
        public System.Int32 EndReceive(System.IAsyncResult asyncResult, out System.Net.Sockets.SocketError errorCode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.EndReceive(asyncResult, out errorCode);
        }

        /// <summary/>
        public System.IAsyncResult BeginReceiveMessageFrom(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginReceiveMessageFrom(buffer, offset, size, socketFlags, ref remoteEP, callback, state);
        }

        /// <summary/>
        public System.Int32 EndReceiveMessageFrom(System.IAsyncResult asyncResult, ref System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint endPoint, out System.Net.Sockets.IPPacketInformation ipPacketInformation)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.EndReceiveMessageFrom(asyncResult, ref socketFlags, ref endPoint, out ipPacketInformation);
        }

        /// <summary/>
        public System.IAsyncResult BeginReceiveFrom(System.Byte[] buffer, System.Int32 offset, System.Int32 size, System.Net.Sockets.SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginReceiveFrom(buffer, offset, size, socketFlags, ref remoteEP, callback, state);
        }

        /// <summary/>
        public System.Int32 EndReceiveFrom(System.IAsyncResult asyncResult, ref System.Net.EndPoint endPoint)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.EndReceiveFrom(asyncResult, ref endPoint);
        }

        /// <summary/>
        public System.IAsyncResult BeginAccept(System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginAccept(callback, state);
        }

        /// <summary/>
        public System.IAsyncResult BeginAccept(System.Int32 receiveSize, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginAccept(receiveSize, callback, state);
        }

        /// <summary/>
        public System.IAsyncResult BeginAccept(System.Net.Sockets.Socket acceptSocket, System.Int32 receiveSize, System.AsyncCallback callback, System.Object state)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginAccept(acceptSocket, receiveSize, callback, state);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.SocketSW EndAccept(System.IAsyncResult asyncResult)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SocketSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.EndAccept(asyncResult));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.SocketSW EndAccept(out System.Byte[] buffer, System.IAsyncResult asyncResult)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SocketSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.EndAccept(out buffer, asyncResult));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.SocketSW EndAccept(out System.Byte[] buffer, out System.Int32 bytesTransferred, System.IAsyncResult asyncResult)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SocketSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.EndAccept(out buffer, out bytesTransferred, asyncResult));
        }

        /// <summary/>
        public void Shutdown(System.Net.Sockets.SocketShutdown how)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Shutdown(how);
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.Drawing.Bitmap</summary>
    [System.CLSCompliant(false)]
    public class BitmapSW : Microsoft.Test.Security.Wrappers.ImageSW, System.Runtime.Serialization.ISerializable, System.ICloneable, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.BitmapSW Wrap(System.Drawing.Bitmap o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.BitmapSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Drawing.Bitmap InnerObject
        {
            get { return innerObject as System.Drawing.Bitmap; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal BitmapSW(System.Drawing.Bitmap o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal BitmapSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public BitmapSW(System.Type type, System.String resource)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Bitmap(type, resource);
        }

        /// <summary/>
        public BitmapSW(System.Int32 width, System.Int32 height, System.Drawing.Imaging.PixelFormat format)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Bitmap(width, height, format);
        }

        /// <summary/>
        public BitmapSW(System.Int32 width, System.Int32 height)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Bitmap(width, height);
        }

        /// <summary/>
        public BitmapSW(System.String filename)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Bitmap(filename);
        }

        /// <summary/>
        public BitmapSW(System.String filename, System.Boolean useIcm)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Bitmap(filename, useIcm);
        }

        /// <summary/>
        public BitmapSW(System.IO.Stream stream)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Bitmap(stream);
        }

        /// <summary/>
        public BitmapSW(System.IO.Stream stream, System.Boolean useIcm)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Bitmap(stream, useIcm);
        }

        /// <summary/>
        public BitmapSW(System.Int32 width, System.Int32 height, System.Int32 stride, System.Drawing.Imaging.PixelFormat format, System.IntPtr scan0)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Bitmap(width, height, stride, format, scan0);
        }

        /// <summary/>
        public BitmapSW(System.Int32 width, System.Int32 height, System.Drawing.Graphics g)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Bitmap(width, height, g);
        }

        /// <summary/>
        public BitmapSW(System.Drawing.Image original)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Bitmap(original);
        }

        /// <summary/>
        public BitmapSW(System.Drawing.Image original, System.Int32 width, System.Int32 height)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Bitmap(original, width, height);
        }

        /// <summary/>
        public BitmapSW(System.Drawing.Image original, System.Drawing.Size newSize)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Bitmap(original, newSize);
        }

        /// <summary/>
        public System.IntPtr GetHbitmap()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetHbitmap();
        }

        /// <summary/>
        public void MakeTransparent()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.MakeTransparent();
        }

        /// <summary/>
        public void MakeTransparent(System.Drawing.Color transparentColor)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.MakeTransparent(transparentColor);
        }

        /// <summary/>
        public System.Drawing.Imaging.BitmapData LockBits(System.Drawing.Rectangle rect, System.Drawing.Imaging.ImageLockMode flags, System.Drawing.Imaging.PixelFormat format)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.LockBits(rect, flags, format);
        }

        /// <summary/>
        public void UnlockBits(System.Drawing.Imaging.BitmapData bitmapdata)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.UnlockBits(bitmapdata);
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.BitmapSW FromHicon(System.IntPtr hicon)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.BitmapSW)WrapperclassesSecurityWarehouse.Wrap(System.Drawing.Bitmap.FromHicon(hicon));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.BitmapSW FromResource(System.IntPtr hinstance, System.String bitmapName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.BitmapSW)WrapperclassesSecurityWarehouse.Wrap(System.Drawing.Bitmap.FromResource(hinstance, bitmapName));
        }

        /// <summary/>
        public System.IntPtr GetHbitmap(System.Drawing.Color background)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetHbitmap(background);
        }

        /// <summary/>
        public System.IntPtr GetHicon()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetHicon();
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.BitmapSW Clone(System.Drawing.Rectangle rect, System.Drawing.Imaging.PixelFormat format)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.BitmapSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Clone(rect, format));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.BitmapSW Clone(System.Drawing.RectangleF rect, System.Drawing.Imaging.PixelFormat format)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.BitmapSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Clone(rect, format));
        }

        /// <summary/>
        public System.Drawing.Imaging.BitmapData LockBits(System.Drawing.Rectangle rect, System.Drawing.Imaging.ImageLockMode flags, System.Drawing.Imaging.PixelFormat format, System.Drawing.Imaging.BitmapData bitmapData)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.LockBits(rect, flags, format, bitmapData);
        }

        /// <summary/>
        public System.Drawing.Color GetPixel(System.Int32 x, System.Int32 y)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetPixel(x, y);
        }

        /// <summary/>
        public void SetPixel(System.Int32 x, System.Int32 y, System.Drawing.Color color)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetPixel(x, y, color);
        }

        /// <summary/>
        public void SetResolution(System.Single xDpi, System.Single yDpi)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetResolution(xDpi, yDpi);
        }

        /// <summary/>
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.Serialization.ISerializable)InnerObject).GetObjectData(info, context);
        }

        /// <summary/>
        System.Object System.ICloneable.Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ICloneable)InnerObject).Clone();
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.Drawing.Image</summary>
    [System.CLSCompliant(false)]
    public class ImageSW : Microsoft.Test.Security.Wrappers.MarshalByRefObjectSW, System.Runtime.Serialization.ISerializable, System.ICloneable, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ImageSW Wrap(System.Drawing.Image o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ImageSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Drawing.Image InnerObject
        {
            get { return innerObject as System.Drawing.Image; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ImageSW(System.Drawing.Image o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ImageSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public System.Object Tag
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Tag; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Tag = value; }
        }
        /// <summary/>
        public System.Drawing.SizeF PhysicalDimension
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PhysicalDimension; }
        }
        /// <summary/>
        public System.Drawing.Size Size
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Size; }
        }
        /// <summary/>
        public System.Int32 Width
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Width; }
        }
        /// <summary/>
        public System.Int32 Height
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Height; }
        }
        /// <summary/>
        public System.Single HorizontalResolution
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HorizontalResolution; }
        }
        /// <summary/>
        public System.Single VerticalResolution
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.VerticalResolution; }
        }
        /// <summary/>
        public System.Int32 Flags
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Flags; }
        }
        /// <summary/>
        public System.Drawing.Imaging.ImageFormat RawFormat
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.RawFormat; }
        }
        /// <summary/>
        public System.Drawing.Imaging.PixelFormat PixelFormat
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PixelFormat; }
        }
        /// <summary/>
        public System.Drawing.Imaging.ColorPalette Palette
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Palette; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Palette = value; }
        }
        /// <summary/>
        public System.Guid[] FrameDimensionsList
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FrameDimensionsList; }
        }
        /// <summary/>
        public System.Int32[] PropertyIdList
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PropertyIdList; }
        }
        /// <summary/>
        public System.Drawing.Imaging.PropertyItem[] PropertyItems
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PropertyItems; }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ImageSW FromFile(System.String filename)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ImageSW)WrapperclassesSecurityWarehouse.Wrap(System.Drawing.Image.FromFile(filename));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ImageSW FromFile(System.String filename, System.Boolean useEmbeddedColorManagement)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ImageSW)WrapperclassesSecurityWarehouse.Wrap(System.Drawing.Image.FromFile(filename, useEmbeddedColorManagement));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ImageSW FromStream(System.IO.Stream stream)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ImageSW)WrapperclassesSecurityWarehouse.Wrap(System.Drawing.Image.FromStream(stream));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ImageSW FromStream(System.IO.Stream stream, System.Boolean useEmbeddedColorManagement)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ImageSW)WrapperclassesSecurityWarehouse.Wrap(System.Drawing.Image.FromStream(stream, useEmbeddedColorManagement));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ImageSW FromStream(System.IO.Stream stream, System.Boolean useEmbeddedColorManagement, System.Boolean validateImageData)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ImageSW)WrapperclassesSecurityWarehouse.Wrap(System.Drawing.Image.FromStream(stream, useEmbeddedColorManagement, validateImageData));
        }

        /// <summary/>
        public virtual System.Object Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Clone();
        }

        /// <summary/>
        public virtual void Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Dispose();
        }

        /// <summary/>
        public System.Drawing.Imaging.EncoderParameters GetEncoderParameterList(System.Guid encoder)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetEncoderParameterList(encoder);
        }

        /// <summary/>
        public void Save(System.String filename)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Save(filename);
        }

        /// <summary/>
        public void Save(System.String filename, System.Drawing.Imaging.ImageFormat format)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Save(filename, format);
        }

        /// <summary/>
        public void Save(System.String filename, System.Drawing.Imaging.ImageCodecInfo encoder, System.Drawing.Imaging.EncoderParameters encoderParams)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Save(filename, encoder, encoderParams);
        }

        /// <summary/>
        public void Save(System.IO.Stream stream, System.Drawing.Imaging.ImageFormat format)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Save(stream, format);
        }

        /// <summary/>
        public void Save(System.IO.Stream stream, System.Drawing.Imaging.ImageCodecInfo encoder, System.Drawing.Imaging.EncoderParameters encoderParams)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Save(stream, encoder, encoderParams);
        }

        /// <summary/>
        public void SaveAdd(System.Drawing.Imaging.EncoderParameters encoderParams)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SaveAdd(encoderParams);
        }

        /// <summary/>
        public void SaveAdd(System.Drawing.Image image, System.Drawing.Imaging.EncoderParameters encoderParams)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SaveAdd(image, encoderParams);
        }

        /// <summary/>
        public System.Drawing.RectangleF GetBounds(ref System.Drawing.GraphicsUnit pageUnit)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetBounds(ref pageUnit);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ImageSW GetThumbnailImage(System.Int32 thumbWidth, System.Int32 thumbHeight, System.Drawing.Image.GetThumbnailImageAbort callback, System.IntPtr callbackData)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ImageSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetThumbnailImage(thumbWidth, thumbHeight, callback, callbackData));
        }

        /// <summary/>
        public System.Int32 GetFrameCount(System.Drawing.Imaging.FrameDimension dimension)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetFrameCount(dimension);
        }

        /// <summary/>
        public System.Int32 SelectActiveFrame(System.Drawing.Imaging.FrameDimension dimension, System.Int32 frameIndex)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.SelectActiveFrame(dimension, frameIndex);
        }

        /// <summary/>
        public void RotateFlip(System.Drawing.RotateFlipType rotateFlipType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.RotateFlip(rotateFlipType);
        }

        /// <summary/>
        public System.Drawing.Imaging.PropertyItem GetPropertyItem(System.Int32 propid)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetPropertyItem(propid);
        }

        /// <summary/>
        public void RemovePropertyItem(System.Int32 propid)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.RemovePropertyItem(propid);
        }

        /// <summary/>
        public void SetPropertyItem(System.Drawing.Imaging.PropertyItem propitem)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetPropertyItem(propitem);
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.BitmapSW FromHbitmap(System.IntPtr hbitmap)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.BitmapSW)WrapperclassesSecurityWarehouse.Wrap(System.Drawing.Image.FromHbitmap(hbitmap));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.BitmapSW FromHbitmap(System.IntPtr hbitmap, System.IntPtr hpalette)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.BitmapSW)WrapperclassesSecurityWarehouse.Wrap(System.Drawing.Image.FromHbitmap(hbitmap, hpalette));
        }

        /// <summary/>
        public static System.Int32 GetPixelFormatSize(System.Drawing.Imaging.PixelFormat pixfmt)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Drawing.Image.GetPixelFormatSize(pixfmt);
        }

        /// <summary/>
        public static System.Boolean IsAlphaPixelFormat(System.Drawing.Imaging.PixelFormat pixfmt)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Drawing.Image.IsAlphaPixelFormat(pixfmt);
        }

        /// <summary/>
        public static System.Boolean IsExtendedPixelFormat(System.Drawing.Imaging.PixelFormat pixfmt)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Drawing.Image.IsExtendedPixelFormat(pixfmt);
        }

        /// <summary/>
        public static System.Boolean IsCanonicalPixelFormat(System.Drawing.Imaging.PixelFormat pixfmt)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Drawing.Image.IsCanonicalPixelFormat(pixfmt);
        }

        /// <summary/>
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.Serialization.ISerializable)InnerObject).GetObjectData(info, context);
        }

        /// <summary/>
        System.Object System.ICloneable.Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ICloneable)InnerObject).Clone();
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.Drawing.Icon</summary>
    [System.CLSCompliant(false)]
    public class IconSW : Microsoft.Test.Security.Wrappers.MarshalByRefObjectSW, System.Runtime.Serialization.ISerializable, System.ICloneable, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.IconSW Wrap(System.Drawing.Icon o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.IconSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Drawing.Icon InnerObject
        {
            get { return innerObject as System.Drawing.Icon; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal IconSW(System.Drawing.Icon o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal IconSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public IconSW(System.Drawing.Icon original, System.Drawing.Size size)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Icon(original, size);
        }

        /// <summary/>
        public IconSW(System.Type type, System.String resource)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Icon(type, resource);
        }

        /// <summary/>
        public IconSW(System.String fileName)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Icon(fileName);
        }

        /// <summary/>
        public IconSW(System.String fileName, System.Drawing.Size size)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Icon(fileName, size);
        }

        /// <summary/>
        public IconSW(System.String fileName, System.Int32 width, System.Int32 height)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Icon(fileName, width, height);
        }

        /// <summary/>
        public IconSW(System.Drawing.Icon original, System.Int32 width, System.Int32 height)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Icon(original, width, height);
        }

        /// <summary/>
        public IconSW(System.IO.Stream stream)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Icon(stream);
        }

        /// <summary/>
        public IconSW(System.IO.Stream stream, System.Drawing.Size size)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Icon(stream, size);
        }

        /// <summary/>
        public IconSW(System.IO.Stream stream, System.Int32 width, System.Int32 height)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Drawing.Icon(stream, width, height);
        }

        /// <summary/>
        public System.IntPtr Handle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Handle; }
        }
        /// <summary/>
        public System.Int32 Height
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Height; }
        }
        /// <summary/>
        public System.Drawing.Size Size
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Size; }
        }
        /// <summary/>
        public System.Int32 Width
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Width; }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.IconSW ExtractAssociatedIcon(System.String filePath)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.IconSW)WrapperclassesSecurityWarehouse.Wrap(System.Drawing.Icon.ExtractAssociatedIcon(filePath));
        }

        /// <summary/>
        public virtual System.Object Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Clone();
        }

        /// <summary/>
        public virtual void Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Dispose();
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.IconSW FromHandle(System.IntPtr handle)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.IconSW)WrapperclassesSecurityWarehouse.Wrap(System.Drawing.Icon.FromHandle(handle));
        }

        /// <summary/>
        public void Save(System.IO.Stream outputStream)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Save(outputStream);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.BitmapSW ToBitmap()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.BitmapSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ToBitmap());
        }

        /// <summary/>
        public override System.String ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ToString();
        }

        /// <summary/>
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.Serialization.ISerializable)InnerObject).GetObjectData(info, context);
        }

        /// <summary/>
        System.Object System.ICloneable.Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ICloneable)InnerObject).Clone();
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.Data.SqlClient.SqlCommand</summary>
    [System.CLSCompliant(false)]
    public class SqlCommandSW : Microsoft.Test.Security.Wrappers.DbCommandSW, System.ComponentModel.IComponent, System.IDisposable, System.Data.IDbCommand, System.ICloneable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.SqlCommandSW Wrap(System.Data.SqlClient.SqlCommand o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.SqlCommandSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.SqlClient.SqlCommand InnerObject
        {
            get { return innerObject as System.Data.SqlClient.SqlCommand; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal SqlCommandSW(System.Data.SqlClient.SqlCommand o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal SqlCommandSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public SqlCommandSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.SqlClient.SqlCommand();
        }

        /// <summary/>
        public SqlCommandSW(System.String cmdText)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.SqlClient.SqlCommand(cmdText);
        }

        /// <summary/>
        public SqlCommandSW(System.String cmdText, System.Data.SqlClient.SqlConnection connection)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.SqlClient.SqlCommand(cmdText, connection);
        }

        /// <summary/>
        public SqlCommandSW(System.String cmdText, System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlTransaction transaction)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.SqlClient.SqlCommand(cmdText, connection, transaction);
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlConnectionSW Connection
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.SqlConnectionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Connection); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Connection = value.InnerObject; }
        }
        /// <summary/>
        public System.Boolean NotificationAutoEnlist
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.NotificationAutoEnlist; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.NotificationAutoEnlist = value; }
        }
        /// <summary/>
        public System.Data.Sql.SqlNotificationRequest Notification
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Notification; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Notification = value; }
        }
        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlTransactionSW Transaction
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.SqlTransactionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Transaction); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Transaction = value.InnerObject; }
        }
        /// <summary/>
        public override System.String CommandText
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CommandText; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CommandText = value; }
        }
        /// <summary/>
        public override System.Int32 CommandTimeout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CommandTimeout; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CommandTimeout = value; }
        }
        /// <summary/>
        public override System.Data.CommandType CommandType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CommandType; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CommandType = value; }
        }
        /// <summary/>
        public override System.Boolean DesignTimeVisible
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DesignTimeVisible; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DesignTimeVisible = value; }
        }
        /// <summary/>
        public new System.Data.SqlClient.SqlParameterCollection Parameters
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Parameters; }
        }
        /// <summary/>
        public override System.Data.UpdateRowSource UpdatedRowSource
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.UpdatedRowSource; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.UpdatedRowSource = value; }
        }
        /// <summary/>
        public void ResetCommandTimeout()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResetCommandTimeout();
        }

        /// <summary/>
        public override void Prepare()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Prepare();
        }

        /// <summary/>
        public override void Cancel()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Cancel();
        }

        /// <summary/>
        public new System.Data.SqlClient.SqlParameter CreateParameter()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateParameter();
        }

        /// <summary/>
        public override System.Object ExecuteScalar()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ExecuteScalar();
        }

        /// <summary/>
        public override System.Int32 ExecuteNonQuery()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ExecuteNonQuery();
        }

        /// <summary/>
        public System.IAsyncResult BeginExecuteNonQuery()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginExecuteNonQuery();
        }

        /// <summary/>
        public System.IAsyncResult BeginExecuteNonQuery(System.AsyncCallback callback, System.Object stateObject)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginExecuteNonQuery(callback, stateObject);
        }

        /// <summary/>
        public System.Int32 EndExecuteNonQuery(System.IAsyncResult asyncResult)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.EndExecuteNonQuery(asyncResult);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.XmlReaderSW ExecuteXmlReader()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlReaderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ExecuteXmlReader());
        }

        /// <summary/>
        public System.IAsyncResult BeginExecuteXmlReader()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginExecuteXmlReader();
        }

        /// <summary/>
        public System.IAsyncResult BeginExecuteXmlReader(System.AsyncCallback callback, System.Object stateObject)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginExecuteXmlReader(callback, stateObject);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.XmlReaderSW EndExecuteXmlReader(System.IAsyncResult asyncResult)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlReaderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.EndExecuteXmlReader(asyncResult));
        }

        /// <summary/>
        public System.IAsyncResult BeginExecuteReader()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginExecuteReader();
        }

        /// <summary/>
        public System.IAsyncResult BeginExecuteReader(System.AsyncCallback callback, System.Object stateObject)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginExecuteReader(callback, stateObject);
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlDataReaderSW ExecuteReader()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SqlDataReaderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ExecuteReader());
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlDataReaderSW ExecuteReader(System.Data.CommandBehavior behavior)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SqlDataReaderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ExecuteReader(behavior));
        }

        /// <summary/>
        public System.IAsyncResult BeginExecuteReader(System.Data.CommandBehavior behavior)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginExecuteReader(behavior);
        }

        /// <summary/>
        public System.IAsyncResult BeginExecuteReader(System.AsyncCallback callback, System.Object stateObject, System.Data.CommandBehavior behavior)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginExecuteReader(callback, stateObject, behavior);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.SqlDataReaderSW EndExecuteReader(System.IAsyncResult asyncResult)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SqlDataReaderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.EndExecuteReader(asyncResult));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.SqlCommandSW Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SqlCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Clone());
        }

        /// <summary/>
        public event System.Data.StatementCompletedEventHandler StatementCompleted
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.StatementCompleted += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.StatementCompleted -= value; }
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        void System.Data.IDbCommand.Prepare()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbCommand)InnerObject).Prepare();
        }

        /// <summary/>
        void System.Data.IDbCommand.Cancel()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbCommand)InnerObject).Cancel();
        }

        /// <summary/>
        System.Data.IDbDataParameter System.Data.IDbCommand.CreateParameter()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbCommand)InnerObject).CreateParameter();
        }

        /// <summary/>
        System.Int32 System.Data.IDbCommand.ExecuteNonQuery()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbCommand)InnerObject).ExecuteNonQuery();
        }

        /// <summary/>
        System.Data.IDataReader System.Data.IDbCommand.ExecuteReader()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbCommand)InnerObject).ExecuteReader();
        }

        /// <summary/>
        System.Data.IDataReader System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior behavior)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbCommand)InnerObject).ExecuteReader(behavior);
        }

        /// <summary/>
        System.Object System.Data.IDbCommand.ExecuteScalar()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbCommand)InnerObject).ExecuteScalar();
        }

        /// <summary/>
        System.Data.IDbConnection System.Data.IDbCommand.Connection
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).Connection; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).Connection = value; }
        }
        /// <summary/>
        System.Data.IDbTransaction System.Data.IDbCommand.Transaction
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).Transaction; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).Transaction = value; }
        }
        /// <summary/>
        System.String System.Data.IDbCommand.CommandText
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).CommandText; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).CommandText = value; }
        }
        /// <summary/>
        System.Int32 System.Data.IDbCommand.CommandTimeout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).CommandTimeout; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).CommandTimeout = value; }
        }
        /// <summary/>
        System.Data.CommandType System.Data.IDbCommand.CommandType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).CommandType; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).CommandType = value; }
        }
        /// <summary/>
        System.Data.IDataParameterCollection System.Data.IDbCommand.Parameters
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).Parameters; }
        }
        /// <summary/>
        System.Data.UpdateRowSource System.Data.IDbCommand.UpdatedRowSource
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).UpdatedRowSource; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).UpdatedRowSource = value; }
        }
        /// <summary/>
        System.Object System.ICloneable.Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ICloneable)InnerObject).Clone();
        }


    }

    /// <summary>Security Wrapper for Type: System.Data.Common.DbCommand</summary>
    [System.CLSCompliant(false)]
    public class DbCommandSW : Microsoft.Test.Security.Wrappers.ComponentSW, System.ComponentModel.IComponent, System.IDisposable, System.Data.IDbCommand
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.DbCommandSW Wrap(System.Data.Common.DbCommand o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.DbCommandSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.Common.DbCommand InnerObject
        {
            get { return innerObject as System.Data.Common.DbCommand; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal DbCommandSW(System.Data.Common.DbCommand o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal DbCommandSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected DbCommandSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public virtual System.String CommandText
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CommandText; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CommandText = value; }
        }
        /// <summary/>
        public virtual System.Int32 CommandTimeout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CommandTimeout; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CommandTimeout = value; }
        }
        /// <summary/>
        public virtual System.Data.CommandType CommandType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CommandType; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CommandType = value; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbConnectionSW Connection
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.DbConnectionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Connection); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Connection = value.InnerObject; }
        }
        /// <summary/>
        public virtual System.Boolean DesignTimeVisible
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DesignTimeVisible; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DesignTimeVisible = value; }
        }
        /// <summary/>
        public System.Data.Common.DbParameterCollection Parameters
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Parameters; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbTransactionSW Transaction
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.DbTransactionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Transaction); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Transaction = value.InnerObject; }
        }
        /// <summary/>
        public virtual System.Data.UpdateRowSource UpdatedRowSource
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.UpdatedRowSource; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.UpdatedRowSource = value; }
        }
        /// <summary/>
        public virtual void Cancel()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Cancel();
        }

        /// <summary/>
        public System.Data.Common.DbParameter CreateParameter()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateParameter();
        }

        /// <summary/>
        public virtual System.Int32 ExecuteNonQuery()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ExecuteNonQuery();
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbDataReaderSW ExecuteReader()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DbDataReaderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ExecuteReader());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbDataReaderSW ExecuteReader(System.Data.CommandBehavior behavior)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DbDataReaderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ExecuteReader(behavior));
        }

        /// <summary/>
        public virtual System.Object ExecuteScalar()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ExecuteScalar();
        }

        /// <summary/>
        public virtual void Prepare()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Prepare();
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        void System.Data.IDbCommand.Prepare()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbCommand)InnerObject).Prepare();
        }

        /// <summary/>
        void System.Data.IDbCommand.Cancel()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbCommand)InnerObject).Cancel();
        }

        /// <summary/>
        System.Data.IDbDataParameter System.Data.IDbCommand.CreateParameter()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbCommand)InnerObject).CreateParameter();
        }

        /// <summary/>
        System.Int32 System.Data.IDbCommand.ExecuteNonQuery()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbCommand)InnerObject).ExecuteNonQuery();
        }

        /// <summary/>
        System.Data.IDataReader System.Data.IDbCommand.ExecuteReader()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbCommand)InnerObject).ExecuteReader();
        }

        /// <summary/>
        System.Data.IDataReader System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior behavior)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbCommand)InnerObject).ExecuteReader(behavior);
        }

        /// <summary/>
        System.Object System.Data.IDbCommand.ExecuteScalar()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbCommand)InnerObject).ExecuteScalar();
        }

        /// <summary/>
        System.Data.IDbConnection System.Data.IDbCommand.Connection
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).Connection; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).Connection = value; }
        }
        /// <summary/>
        System.Data.IDbTransaction System.Data.IDbCommand.Transaction
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).Transaction; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).Transaction = value; }
        }
        /// <summary/>
        System.String System.Data.IDbCommand.CommandText
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).CommandText; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).CommandText = value; }
        }
        /// <summary/>
        System.Int32 System.Data.IDbCommand.CommandTimeout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).CommandTimeout; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).CommandTimeout = value; }
        }
        /// <summary/>
        System.Data.CommandType System.Data.IDbCommand.CommandType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).CommandType; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).CommandType = value; }
        }
        /// <summary/>
        System.Data.IDataParameterCollection System.Data.IDbCommand.Parameters
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).Parameters; }
        }
        /// <summary/>
        System.Data.UpdateRowSource System.Data.IDbCommand.UpdatedRowSource
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).UpdatedRowSource; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).UpdatedRowSource = value; }
        }

    }

    /// <summary>Security Wrapper for Type: System.Data.SqlClient.SqlCommandBuilder</summary>
    [System.CLSCompliant(false)]
    public class SqlCommandBuilderSW : Microsoft.Test.Security.Wrappers.DbCommandBuilderSW, System.ComponentModel.IComponent, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.SqlCommandBuilderSW Wrap(System.Data.SqlClient.SqlCommandBuilder o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.SqlCommandBuilderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.SqlClient.SqlCommandBuilder InnerObject
        {
            get { return innerObject as System.Data.SqlClient.SqlCommandBuilder; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal SqlCommandBuilderSW(System.Data.SqlClient.SqlCommandBuilder o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal SqlCommandBuilderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public SqlCommandBuilderSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.SqlClient.SqlCommandBuilder();
        }

        /// <summary/>
        public SqlCommandBuilderSW(System.Data.SqlClient.SqlDataAdapter adapter)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.SqlClient.SqlCommandBuilder(adapter);
        }

        /// <summary/>
        public override System.Data.Common.CatalogLocation CatalogLocation
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CatalogLocation; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CatalogLocation = value; }
        }
        /// <summary/>
        public override System.String CatalogSeparator
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CatalogSeparator; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CatalogSeparator = value; }
        }
        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlDataAdapterSW DataAdapter
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.SqlDataAdapterSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DataAdapter); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DataAdapter = value.InnerObject; }
        }
        /// <summary/>
        public override System.String QuotePrefix
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.QuotePrefix; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.QuotePrefix = value; }
        }
        /// <summary/>
        public override System.String QuoteSuffix
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.QuoteSuffix; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.QuoteSuffix = value; }
        }
        /// <summary/>
        public override System.String SchemaSeparator
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.SchemaSeparator; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.SchemaSeparator = value; }
        }
        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlCommandSW GetInsertCommand()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SqlCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetInsertCommand());
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlCommandSW GetInsertCommand(System.Boolean useColumnsForParameterNames)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SqlCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetInsertCommand(useColumnsForParameterNames));
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlCommandSW GetUpdateCommand()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SqlCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetUpdateCommand());
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlCommandSW GetUpdateCommand(System.Boolean useColumnsForParameterNames)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SqlCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetUpdateCommand(useColumnsForParameterNames));
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlCommandSW GetDeleteCommand()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SqlCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetDeleteCommand());
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlCommandSW GetDeleteCommand(System.Boolean useColumnsForParameterNames)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SqlCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetDeleteCommand(useColumnsForParameterNames));
        }

        /// <summary/>
        public static void DeriveParameters(System.Data.SqlClient.SqlCommand command)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(command);
        }

        /// <summary/>
        public override System.String QuoteIdentifier(System.String unquotedIdentifier)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.QuoteIdentifier(unquotedIdentifier);
        }

        /// <summary/>
        public override System.String UnquoteIdentifier(System.String quotedIdentifier)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.UnquoteIdentifier(quotedIdentifier);
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.Data.Common.DbCommandBuilder</summary>
    [System.CLSCompliant(false)]
    public class DbCommandBuilderSW : Microsoft.Test.Security.Wrappers.ComponentSW, System.ComponentModel.IComponent, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.DbCommandBuilderSW Wrap(System.Data.Common.DbCommandBuilder o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.DbCommandBuilderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.Common.DbCommandBuilder InnerObject
        {
            get { return innerObject as System.Data.Common.DbCommandBuilder; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal DbCommandBuilderSW(System.Data.Common.DbCommandBuilder o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal DbCommandBuilderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected DbCommandBuilderSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public virtual System.Data.ConflictOption ConflictOption
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ConflictOption; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ConflictOption = value; }
        }
        /// <summary/>
        public virtual System.Data.Common.CatalogLocation CatalogLocation
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CatalogLocation; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CatalogLocation = value; }
        }
        /// <summary/>
        public virtual System.String CatalogSeparator
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CatalogSeparator; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CatalogSeparator = value; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbDataAdapterSW DataAdapter
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.DbDataAdapterSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DataAdapter); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DataAdapter = value.InnerObject; }
        }
        /// <summary/>
        public virtual System.String QuotePrefix
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.QuotePrefix; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.QuotePrefix = value; }
        }
        /// <summary/>
        public virtual System.String QuoteSuffix
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.QuoteSuffix; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.QuoteSuffix = value; }
        }
        /// <summary/>
        public virtual System.String SchemaSeparator
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.SchemaSeparator; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.SchemaSeparator = value; }
        }
        /// <summary/>
        public System.Boolean SetAllValues
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.SetAllValues; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.SetAllValues = value; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbCommandSW GetInsertCommand()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetInsertCommand());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbCommandSW GetInsertCommand(System.Boolean useColumnsForParameterNames)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetInsertCommand(useColumnsForParameterNames));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbCommandSW GetUpdateCommand()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetUpdateCommand());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbCommandSW GetUpdateCommand(System.Boolean useColumnsForParameterNames)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetUpdateCommand(useColumnsForParameterNames));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbCommandSW GetDeleteCommand()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetDeleteCommand());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbCommandSW GetDeleteCommand(System.Boolean useColumnsForParameterNames)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetDeleteCommand(useColumnsForParameterNames));
        }

        /// <summary/>
        public virtual System.String QuoteIdentifier(System.String unquotedIdentifier)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.QuoteIdentifier(unquotedIdentifier);
        }

        /// <summary/>
        public virtual void RefreshSchema()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.RefreshSchema();
        }

        /// <summary/>
        public virtual System.String UnquoteIdentifier(System.String quotedIdentifier)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.UnquoteIdentifier(quotedIdentifier);
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.Data.SqlClient.SqlConnection</summary>
    [System.CLSCompliant(false)]
    public class SqlConnectionSW : Microsoft.Test.Security.Wrappers.DbConnectionSW, System.ComponentModel.IComponent, System.IDisposable, System.Data.IDbConnection, System.ICloneable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.SqlConnectionSW Wrap(System.Data.SqlClient.SqlConnection o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.SqlConnectionSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.SqlClient.SqlConnection InnerObject
        {
            get { return innerObject as System.Data.SqlClient.SqlConnection; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal SqlConnectionSW(System.Data.SqlClient.SqlConnection o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal SqlConnectionSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public SqlConnectionSW(System.String connectionString)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.SqlClient.SqlConnection(connectionString);
        }

        /// <summary/>
        public SqlConnectionSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.SqlClient.SqlConnection();
        }

        /// <summary/>
        public System.Boolean StatisticsEnabled
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.StatisticsEnabled; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.StatisticsEnabled = value; }
        }
        /// <summary/>
        public override System.String ConnectionString
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ConnectionString; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ConnectionString = value; }
        }
        /// <summary/>
        public override System.Int32 ConnectionTimeout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ConnectionTimeout; }
        }
        /// <summary/>
        public override System.String Database
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Database; }
        }
        /// <summary/>
        public override System.String DataSource
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DataSource; }
        }
        /// <summary/>
        public System.Int32 PacketSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PacketSize; }
        }
        /// <summary/>
        public override System.String ServerVersion
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ServerVersion; }
        }
        /// <summary/>
        public System.String WorkstationId
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.WorkstationId; }
        }
        /// <summary/>
        public System.Boolean FireInfoMessageEventOnUserErrors
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FireInfoMessageEventOnUserErrors; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.FireInfoMessageEventOnUserErrors = value; }
        }
        /// <summary/>
        public override System.Data.ConnectionState State
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.State; }
        }
        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlTransactionSW BeginTransaction()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SqlTransactionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.BeginTransaction());
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlTransactionSW BeginTransaction(System.Data.IsolationLevel iso)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SqlTransactionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.BeginTransaction(iso));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.SqlTransactionSW BeginTransaction(System.String transactionName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SqlTransactionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.BeginTransaction(transactionName));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.SqlTransactionSW BeginTransaction(System.Data.IsolationLevel iso, System.String transactionName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SqlTransactionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.BeginTransaction(iso, transactionName));
        }

        /// <summary/>
        public override void ChangeDatabase(System.String database)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ChangeDatabase(database);
        }

        /// <summary/>
        public static void ClearAllPools()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Data.SqlClient.SqlConnection.ClearAllPools();
        }

        /// <summary/>
        public static void ClearPool(System.Data.SqlClient.SqlConnection connection)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Data.SqlClient.SqlConnection.ClearPool(connection);
        }

        /// <summary/>
        public override void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlCommandSW CreateCommand()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.SqlCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CreateCommand());
        }

        /// <summary/>
        public void EnlistDistributedTransaction(System.EnterpriseServices.ITransaction transaction)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EnlistDistributedTransaction(transaction);
        }

        /// <summary/>
        public override void Open()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Open();
        }

        /// <summary/>
        public static void ChangePassword(System.String connectionString, System.String newPassword)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Data.SqlClient.SqlConnection.ChangePassword(connectionString, newPassword);
        }

        /// <summary/>
        public void ResetStatistics()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResetStatistics();
        }

        /// <summary/>
        public System.Collections.IDictionary RetrieveStatistics()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.RetrieveStatistics();
        }

        /// <summary/>
        public override void EnlistTransaction(System.Transactions.Transaction transaction)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EnlistTransaction(transaction);
        }

        /// <summary/>
        public override System.Data.DataTable GetSchema()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSchema();
        }

        /// <summary/>
        public override System.Data.DataTable GetSchema(System.String collectionName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSchema(collectionName);
        }

        /// <summary/>
        public override System.Data.DataTable GetSchema(System.String collectionName, System.String[] restrictionValues)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSchema(collectionName, restrictionValues);
        }

        /// <summary/>
        public event System.Data.SqlClient.SqlInfoMessageEventHandler InfoMessage
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.InfoMessage += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.InfoMessage -= value; }
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        System.Data.IDbTransaction System.Data.IDbConnection.BeginTransaction()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbConnection)InnerObject).BeginTransaction();
        }

        /// <summary/>
        System.Data.IDbTransaction System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel il)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbConnection)InnerObject).BeginTransaction(il);
        }

        /// <summary/>
        void System.Data.IDbConnection.Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbConnection)InnerObject).Close();
        }

        /// <summary/>
        void System.Data.IDbConnection.ChangeDatabase(System.String databaseName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbConnection)InnerObject).ChangeDatabase(databaseName);
        }

        /// <summary/>
        System.Data.IDbCommand System.Data.IDbConnection.CreateCommand()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbConnection)InnerObject).CreateCommand();
        }

        /// <summary/>
        void System.Data.IDbConnection.Open()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbConnection)InnerObject).Open();
        }

        /// <summary/>
        System.String System.Data.IDbConnection.ConnectionString
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbConnection)InnerObject).ConnectionString; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbConnection)InnerObject).ConnectionString = value; }
        }
        /// <summary/>
        System.Int32 System.Data.IDbConnection.ConnectionTimeout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbConnection)InnerObject).ConnectionTimeout; }
        }
        /// <summary/>
        System.String System.Data.IDbConnection.Database
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbConnection)InnerObject).Database; }
        }
        /// <summary/>
        System.Data.ConnectionState System.Data.IDbConnection.State
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbConnection)InnerObject).State; }
        }
        /// <summary/>
        System.Object System.ICloneable.Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ICloneable)InnerObject).Clone();
        }


    }

    /// <summary>Security Wrapper for Type: System.Data.Common.DbConnection</summary>
    [System.CLSCompliant(false)]
    public class DbConnectionSW : Microsoft.Test.Security.Wrappers.ComponentSW, System.ComponentModel.IComponent, System.IDisposable, System.Data.IDbConnection
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.DbConnectionSW Wrap(System.Data.Common.DbConnection o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.DbConnectionSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.Common.DbConnection InnerObject
        {
            get { return innerObject as System.Data.Common.DbConnection; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal DbConnectionSW(System.Data.Common.DbConnection o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal DbConnectionSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected DbConnectionSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public virtual System.String ConnectionString
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ConnectionString; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ConnectionString = value; }
        }
        /// <summary/>
        public virtual System.Int32 ConnectionTimeout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ConnectionTimeout; }
        }
        /// <summary/>
        public virtual System.String Database
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Database; }
        }
        /// <summary/>
        public virtual System.String DataSource
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DataSource; }
        }
        /// <summary/>
        public virtual System.String ServerVersion
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ServerVersion; }
        }
        /// <summary/>
        public virtual System.Data.ConnectionState State
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.State; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbTransactionSW BeginTransaction()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DbTransactionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.BeginTransaction());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbTransactionSW BeginTransaction(System.Data.IsolationLevel isolationLevel)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DbTransactionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.BeginTransaction(isolationLevel));
        }

        /// <summary/>
        public virtual void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public virtual void ChangeDatabase(System.String databaseName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ChangeDatabase(databaseName);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbCommandSW CreateCommand()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CreateCommand());
        }

        /// <summary/>
        public virtual void EnlistTransaction(System.Transactions.Transaction transaction)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EnlistTransaction(transaction);
        }

        /// <summary/>
        public virtual System.Data.DataTable GetSchema()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSchema();
        }

        /// <summary/>
        public virtual System.Data.DataTable GetSchema(System.String collectionName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSchema(collectionName);
        }

        /// <summary/>
        public virtual System.Data.DataTable GetSchema(System.String collectionName, System.String[] restrictionValues)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSchema(collectionName, restrictionValues);
        }

        /// <summary/>
        public virtual void Open()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Open();
        }

        /// <summary/>
        public virtual event System.Data.StateChangeEventHandler StateChange
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.StateChange += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.StateChange -= value; }
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        System.Data.IDbTransaction System.Data.IDbConnection.BeginTransaction()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbConnection)InnerObject).BeginTransaction();
        }

        /// <summary/>
        System.Data.IDbTransaction System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel il)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbConnection)InnerObject).BeginTransaction(il);
        }

        /// <summary/>
        void System.Data.IDbConnection.Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbConnection)InnerObject).Close();
        }

        /// <summary/>
        void System.Data.IDbConnection.ChangeDatabase(System.String databaseName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbConnection)InnerObject).ChangeDatabase(databaseName);
        }

        /// <summary/>
        System.Data.IDbCommand System.Data.IDbConnection.CreateCommand()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbConnection)InnerObject).CreateCommand();
        }

        /// <summary/>
        void System.Data.IDbConnection.Open()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbConnection)InnerObject).Open();
        }

        /// <summary/>
        System.String System.Data.IDbConnection.ConnectionString
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbConnection)InnerObject).ConnectionString; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbConnection)InnerObject).ConnectionString = value; }
        }
        /// <summary/>
        System.Int32 System.Data.IDbConnection.ConnectionTimeout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbConnection)InnerObject).ConnectionTimeout; }
        }
        /// <summary/>
        System.String System.Data.IDbConnection.Database
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbConnection)InnerObject).Database; }
        }
        /// <summary/>
        System.Data.ConnectionState System.Data.IDbConnection.State
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbConnection)InnerObject).State; }
        }

    }

    /// <summary>Security Wrapper for Type: System.Data.SqlClient.SqlDataAdapter</summary>
    [System.CLSCompliant(false)]
    public class SqlDataAdapterSW : Microsoft.Test.Security.Wrappers.DbDataAdapterSW, System.ComponentModel.IComponent, System.IDisposable, System.Data.IDataAdapter, System.Data.IDbDataAdapter, System.ICloneable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.SqlDataAdapterSW Wrap(System.Data.SqlClient.SqlDataAdapter o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.SqlDataAdapterSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.SqlClient.SqlDataAdapter InnerObject
        {
            get { return innerObject as System.Data.SqlClient.SqlDataAdapter; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal SqlDataAdapterSW(System.Data.SqlClient.SqlDataAdapter o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal SqlDataAdapterSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public SqlDataAdapterSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.SqlClient.SqlDataAdapter();
        }

        /// <summary/>
        public SqlDataAdapterSW(System.Data.SqlClient.SqlCommand selectCommand)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.SqlClient.SqlDataAdapter(selectCommand);
        }

        /// <summary/>
        public SqlDataAdapterSW(System.String selectCommandText, System.String selectConnectionString)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.SqlClient.SqlDataAdapter(selectCommandText, selectConnectionString);
        }

        /// <summary/>
        public SqlDataAdapterSW(System.String selectCommandText, System.Data.SqlClient.SqlConnection selectConnection)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.SqlClient.SqlDataAdapter(selectCommandText, selectConnection);
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlCommandSW DeleteCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.SqlCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DeleteCommand); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DeleteCommand = value.InnerObject; }
        }
        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlCommandSW InsertCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.SqlCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.InsertCommand); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.InsertCommand = value.InnerObject; }
        }
        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlCommandSW SelectCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.SqlCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.SelectCommand); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.SelectCommand = value.InnerObject; }
        }
        /// <summary/>
        public override System.Int32 UpdateBatchSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.UpdateBatchSize; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.UpdateBatchSize = value; }
        }
        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlCommandSW UpdateCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.SqlCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.UpdateCommand); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.UpdateCommand = value.InnerObject; }
        }
        /// <summary/>
        public event System.Data.SqlClient.SqlRowUpdatedEventHandler RowUpdated
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RowUpdated += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RowUpdated -= value; }
        }

        /// <summary/>
        public event System.Data.SqlClient.SqlRowUpdatingEventHandler RowUpdating
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RowUpdating += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RowUpdating -= value; }
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        System.Data.DataTable[] System.Data.IDataAdapter.FillSchema(System.Data.DataSet dataSet, System.Data.SchemaType schemaType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataAdapter)InnerObject).FillSchema(dataSet, schemaType);
        }

        /// <summary/>
        System.Int32 System.Data.IDataAdapter.Fill(System.Data.DataSet dataSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataAdapter)InnerObject).Fill(dataSet);
        }

        /// <summary/>
        System.Data.IDataParameter[] System.Data.IDataAdapter.GetFillParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataAdapter)InnerObject).GetFillParameters();
        }

        /// <summary/>
        System.Int32 System.Data.IDataAdapter.Update(System.Data.DataSet dataSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataAdapter)InnerObject).Update(dataSet);
        }

        /// <summary/>
        System.Data.MissingMappingAction System.Data.IDataAdapter.MissingMappingAction
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataAdapter)InnerObject).MissingMappingAction; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDataAdapter)InnerObject).MissingMappingAction = value; }
        }
        /// <summary/>
        System.Data.MissingSchemaAction System.Data.IDataAdapter.MissingSchemaAction
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataAdapter)InnerObject).MissingSchemaAction; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDataAdapter)InnerObject).MissingSchemaAction = value; }
        }
        /// <summary/>
        System.Data.ITableMappingCollection System.Data.IDataAdapter.TableMappings
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataAdapter)InnerObject).TableMappings; }
        }
        /// <summary/>
        System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbDataAdapter)InnerObject).SelectCommand; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbDataAdapter)InnerObject).SelectCommand = value; }
        }
        /// <summary/>
        System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbDataAdapter)InnerObject).InsertCommand; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbDataAdapter)InnerObject).InsertCommand = value; }
        }
        /// <summary/>
        System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbDataAdapter)InnerObject).UpdateCommand; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbDataAdapter)InnerObject).UpdateCommand = value; }
        }
        /// <summary/>
        System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbDataAdapter)InnerObject).DeleteCommand; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbDataAdapter)InnerObject).DeleteCommand = value; }
        }
        /// <summary/>
        System.Object System.ICloneable.Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ICloneable)InnerObject).Clone();
        }


    }

    /// <summary>Security Wrapper for Type: System.Data.Common.DbDataAdapter</summary>
    [System.CLSCompliant(false)]
    public class DbDataAdapterSW : Microsoft.Test.Security.Wrappers.DataAdapterSW, System.ComponentModel.IComponent, System.IDisposable, System.Data.IDataAdapter, System.Data.IDbDataAdapter, System.ICloneable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.DbDataAdapterSW Wrap(System.Data.Common.DbDataAdapter o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.DbDataAdapterSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.Common.DbDataAdapter InnerObject
        {
            get { return innerObject as System.Data.Common.DbDataAdapter; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal DbDataAdapterSW(System.Data.Common.DbDataAdapter o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal DbDataAdapterSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected DbDataAdapterSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbCommandSW DeleteCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.DbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DeleteCommand); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DeleteCommand = value.InnerObject; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbCommandSW InsertCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.DbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.InsertCommand); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.InsertCommand = value.InnerObject; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbCommandSW SelectCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.DbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.SelectCommand); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.SelectCommand = value.InnerObject; }
        }
        /// <summary/>
        public virtual System.Int32 UpdateBatchSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.UpdateBatchSize; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.UpdateBatchSize = value; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbCommandSW UpdateCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.DbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.UpdateCommand); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.UpdateCommand = value.InnerObject; }
        }
        /// <summary/>
        public static System.String DefaultSourceTableName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Data.Common.DbDataAdapter.DefaultSourceTableName; }
        }
        /// <summary/>
        public System.Data.DataTable FillSchema(System.Data.DataTable dataTable, System.Data.SchemaType schemaType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.FillSchema(dataTable, schemaType);
        }

        /// <summary/>
        public override System.Data.DataTable[] FillSchema(System.Data.DataSet dataSet, System.Data.SchemaType schemaType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.FillSchema(dataSet, schemaType);
        }

        /// <summary/>
        public System.Data.DataTable[] FillSchema(System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.String srcTable)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.FillSchema(dataSet, schemaType, srcTable);
        }

        /// <summary/>
        public override System.Int32 Fill(System.Data.DataSet dataSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Fill(dataSet);
        }

        /// <summary/>
        public System.Int32 Fill(System.Data.DataSet dataSet, System.String srcTable)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Fill(dataSet, srcTable);
        }

        /// <summary/>
        public System.Int32 Fill(System.Data.DataSet dataSet, System.Int32 startRecord, System.Int32 maxRecords, System.String srcTable)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Fill(dataSet, startRecord, maxRecords, srcTable);
        }

        /// <summary/>
        public System.Int32 Fill(System.Data.DataTable dataTable)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Fill(dataTable);
        }

        /// <summary/>
        public System.Int32 Fill(System.Int32 startRecord, System.Int32 maxRecords, System.Data.DataTable[] dataTables)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Fill(startRecord, maxRecords, dataTables);
        }

        /// <summary/>
        public override System.Data.IDataParameter[] GetFillParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetFillParameters();
        }

        /// <summary/>
        public override System.Int32 Update(System.Data.DataSet dataSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Update(dataSet);
        }

        /// <summary/>
        public System.Int32 Update(System.Data.DataRow[] dataRows)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Update(dataRows);
        }

        /// <summary/>
        public System.Int32 Update(System.Data.DataTable dataTable)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Update(dataTable);
        }

        /// <summary/>
        public System.Int32 Update(System.Data.DataSet dataSet, System.String srcTable)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Update(dataSet, srcTable);
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        System.Data.DataTable[] System.Data.IDataAdapter.FillSchema(System.Data.DataSet dataSet, System.Data.SchemaType schemaType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataAdapter)InnerObject).FillSchema(dataSet, schemaType);
        }

        /// <summary/>
        System.Int32 System.Data.IDataAdapter.Fill(System.Data.DataSet dataSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataAdapter)InnerObject).Fill(dataSet);
        }

        /// <summary/>
        System.Data.IDataParameter[] System.Data.IDataAdapter.GetFillParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataAdapter)InnerObject).GetFillParameters();
        }

        /// <summary/>
        System.Int32 System.Data.IDataAdapter.Update(System.Data.DataSet dataSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataAdapter)InnerObject).Update(dataSet);
        }

        /// <summary/>
        System.Data.MissingMappingAction System.Data.IDataAdapter.MissingMappingAction
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataAdapter)InnerObject).MissingMappingAction; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDataAdapter)InnerObject).MissingMappingAction = value; }
        }
        /// <summary/>
        System.Data.MissingSchemaAction System.Data.IDataAdapter.MissingSchemaAction
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataAdapter)InnerObject).MissingSchemaAction; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDataAdapter)InnerObject).MissingSchemaAction = value; }
        }
        /// <summary/>
        System.Data.ITableMappingCollection System.Data.IDataAdapter.TableMappings
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataAdapter)InnerObject).TableMappings; }
        }
        /// <summary/>
        System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbDataAdapter)InnerObject).SelectCommand; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbDataAdapter)InnerObject).SelectCommand = value; }
        }
        /// <summary/>
        System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbDataAdapter)InnerObject).InsertCommand; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbDataAdapter)InnerObject).InsertCommand = value; }
        }
        /// <summary/>
        System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbDataAdapter)InnerObject).UpdateCommand; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbDataAdapter)InnerObject).UpdateCommand = value; }
        }
        /// <summary/>
        System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbDataAdapter)InnerObject).DeleteCommand; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbDataAdapter)InnerObject).DeleteCommand = value; }
        }
        /// <summary/>
        System.Object System.ICloneable.Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ICloneable)InnerObject).Clone();
        }


    }

    /// <summary>Security Wrapper for Type: System.Data.Common.DataAdapter</summary>
    [System.CLSCompliant(false)]
    public class DataAdapterSW : Microsoft.Test.Security.Wrappers.ComponentSW, System.ComponentModel.IComponent, System.IDisposable, System.Data.IDataAdapter
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.DataAdapterSW Wrap(System.Data.Common.DataAdapter o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.DataAdapterSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.Common.DataAdapter InnerObject
        {
            get { return innerObject as System.Data.Common.DataAdapter; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal DataAdapterSW(System.Data.Common.DataAdapter o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal DataAdapterSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected DataAdapterSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public System.Boolean AcceptChangesDuringFill
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AcceptChangesDuringFill; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AcceptChangesDuringFill = value; }
        }
        /// <summary/>
        public System.Boolean AcceptChangesDuringUpdate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AcceptChangesDuringUpdate; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AcceptChangesDuringUpdate = value; }
        }
        /// <summary/>
        public System.Boolean ContinueUpdateOnError
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ContinueUpdateOnError; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ContinueUpdateOnError = value; }
        }
        /// <summary/>
        public System.Data.LoadOption FillLoadOption
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FillLoadOption; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.FillLoadOption = value; }
        }
        /// <summary/>
        public virtual System.Data.MissingMappingAction MissingMappingAction
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MissingMappingAction; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MissingMappingAction = value; }
        }
        /// <summary/>
        public virtual System.Data.MissingSchemaAction MissingSchemaAction
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MissingSchemaAction; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MissingSchemaAction = value; }
        }
        /// <summary/>
        public virtual System.Boolean ReturnProviderSpecificTypes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ReturnProviderSpecificTypes; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ReturnProviderSpecificTypes = value; }
        }
        /// <summary/>
        public System.Data.Common.DataTableMappingCollection TableMappings
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.TableMappings; }
        }
        /// <summary/>
        public virtual System.Boolean ShouldSerializeAcceptChangesDuringFill()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ShouldSerializeAcceptChangesDuringFill();
        }

        /// <summary/>
        public void ResetFillLoadOption()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResetFillLoadOption();
        }

        /// <summary/>
        public virtual System.Boolean ShouldSerializeFillLoadOption()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ShouldSerializeFillLoadOption();
        }

        /// <summary/>
        public virtual System.Data.DataTable[] FillSchema(System.Data.DataSet dataSet, System.Data.SchemaType schemaType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.FillSchema(dataSet, schemaType);
        }

        /// <summary/>
        public virtual System.Int32 Fill(System.Data.DataSet dataSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Fill(dataSet);
        }

        /// <summary/>
        public virtual System.Data.IDataParameter[] GetFillParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetFillParameters();
        }

        /// <summary/>
        public virtual System.Int32 Update(System.Data.DataSet dataSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Update(dataSet);
        }

        /// <summary/>
        public event System.Data.FillErrorEventHandler FillError
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.FillError += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.FillError -= value; }
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        System.Data.DataTable[] System.Data.IDataAdapter.FillSchema(System.Data.DataSet dataSet, System.Data.SchemaType schemaType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataAdapter)InnerObject).FillSchema(dataSet, schemaType);
        }

        /// <summary/>
        System.Int32 System.Data.IDataAdapter.Fill(System.Data.DataSet dataSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataAdapter)InnerObject).Fill(dataSet);
        }

        /// <summary/>
        System.Data.IDataParameter[] System.Data.IDataAdapter.GetFillParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataAdapter)InnerObject).GetFillParameters();
        }

        /// <summary/>
        System.Int32 System.Data.IDataAdapter.Update(System.Data.DataSet dataSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataAdapter)InnerObject).Update(dataSet);
        }

        /// <summary/>
        System.Data.MissingMappingAction System.Data.IDataAdapter.MissingMappingAction
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataAdapter)InnerObject).MissingMappingAction; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDataAdapter)InnerObject).MissingMappingAction = value; }
        }
        /// <summary/>
        System.Data.MissingSchemaAction System.Data.IDataAdapter.MissingSchemaAction
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataAdapter)InnerObject).MissingSchemaAction; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDataAdapter)InnerObject).MissingSchemaAction = value; }
        }
        /// <summary/>
        System.Data.ITableMappingCollection System.Data.IDataAdapter.TableMappings
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataAdapter)InnerObject).TableMappings; }
        }

    }

    /// <summary>Security Wrapper for Type: System.Data.SqlClient.SqlDataReader</summary>
    [System.CLSCompliant(false)]
    public class SqlDataReaderSW : Microsoft.Test.Security.Wrappers.DbDataReaderSW, System.Data.IDataReader, System.IDisposable, System.Data.IDataRecord, System.Collections.IEnumerable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.SqlDataReaderSW Wrap(System.Data.SqlClient.SqlDataReader o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.SqlDataReaderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.SqlClient.SqlDataReader InnerObject
        {
            get { return innerObject as System.Data.SqlClient.SqlDataReader; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal SqlDataReaderSW(System.Data.SqlClient.SqlDataReader o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal SqlDataReaderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public override System.Int32 Depth
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Depth; }
        }
        /// <summary/>
        public override System.Int32 FieldCount
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FieldCount; }
        }
        /// <summary/>
        public override System.Boolean HasRows
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HasRows; }
        }
        /// <summary/>
        public override System.Boolean IsClosed
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsClosed; }
        }
        /// <summary/>
        public override System.Int32 RecordsAffected
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.RecordsAffected; }
        }
        /// <summary/>
        public override System.Int32 VisibleFieldCount
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.VisibleFieldCount; }
        }
        /// <summary/>
        public override System.Object this[System.Int32 i]
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject[i]; }
        }
        /// <summary/>
        public override System.Object this[System.String name]
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject[name]; }
        }
        /// <summary/>
        public override void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public override System.String GetDataTypeName(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetDataTypeName(i);
        }

        /// <summary/>
        public override System.Collections.IEnumerator GetEnumerator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetEnumerator();
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW GetFieldType(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFieldType(i));
        }

        /// <summary/>
        public override System.String GetName(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetName(i);
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW GetProviderSpecificFieldType(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetProviderSpecificFieldType(i));
        }

        /// <summary/>
        public override System.Int32 GetOrdinal(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetOrdinal(name);
        }

        /// <summary/>
        public override System.Object GetProviderSpecificValue(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetProviderSpecificValue(i);
        }

        /// <summary/>
        public override System.Int32 GetProviderSpecificValues(System.Object[] values)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetProviderSpecificValues(values);
        }

        /// <summary/>
        public override System.Data.DataTable GetSchemaTable()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSchemaTable();
        }

        /// <summary/>
        public override System.Boolean GetBoolean(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetBoolean(i);
        }

        /// <summary/>
        public override System.Byte GetByte(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetByte(i);
        }

        /// <summary/>
        public override System.Int64 GetBytes(System.Int32 i, System.Int64 dataIndex, System.Byte[] buffer, System.Int32 bufferIndex, System.Int32 length)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetBytes(i, dataIndex, buffer, bufferIndex, length);
        }

        /// <summary/>
        public override System.Char GetChar(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetChar(i);
        }

        /// <summary/>
        public override System.Int64 GetChars(System.Int32 i, System.Int64 dataIndex, System.Char[] buffer, System.Int32 bufferIndex, System.Int32 length)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetChars(i, dataIndex, buffer, bufferIndex, length);
        }

        /// <summary/>
        public override System.DateTime GetDateTime(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetDateTime(i);
        }

        /// <summary/>
        public override System.Decimal GetDecimal(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetDecimal(i);
        }

        /// <summary/>
        public override System.Double GetDouble(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetDouble(i);
        }

        /// <summary/>
        public override System.Single GetFloat(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetFloat(i);
        }

        /// <summary/>
        public override System.Guid GetGuid(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetGuid(i);
        }

        /// <summary/>
        public override System.Int16 GetInt16(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetInt16(i);
        }

        /// <summary/>
        public override System.Int32 GetInt32(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetInt32(i);
        }

        /// <summary/>
        public override System.Int64 GetInt64(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetInt64(i);
        }

        /// <summary/>
        public virtual System.Data.SqlTypes.SqlBoolean GetSqlBoolean(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlBoolean(i);
        }

        /// <summary/>
        public virtual System.Data.SqlTypes.SqlBinary GetSqlBinary(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlBinary(i);
        }

        /// <summary/>
        public virtual System.Data.SqlTypes.SqlByte GetSqlByte(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlByte(i);
        }

        /// <summary/>
        public virtual System.Data.SqlTypes.SqlBytes GetSqlBytes(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlBytes(i);
        }

        /// <summary/>
        public virtual System.Data.SqlTypes.SqlChars GetSqlChars(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlChars(i);
        }

        /// <summary/>
        public virtual System.Data.SqlTypes.SqlDateTime GetSqlDateTime(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlDateTime(i);
        }

        /// <summary/>
        public virtual System.Data.SqlTypes.SqlDecimal GetSqlDecimal(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlDecimal(i);
        }

        /// <summary/>
        public virtual System.Data.SqlTypes.SqlGuid GetSqlGuid(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlGuid(i);
        }

        /// <summary/>
        public virtual System.Data.SqlTypes.SqlDouble GetSqlDouble(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlDouble(i);
        }

        /// <summary/>
        public virtual System.Data.SqlTypes.SqlInt16 GetSqlInt16(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlInt16(i);
        }

        /// <summary/>
        public virtual System.Data.SqlTypes.SqlInt32 GetSqlInt32(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlInt32(i);
        }

        /// <summary/>
        public virtual System.Data.SqlTypes.SqlInt64 GetSqlInt64(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlInt64(i);
        }

        /// <summary/>
        public virtual System.Data.SqlTypes.SqlMoney GetSqlMoney(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlMoney(i);
        }

        /// <summary/>
        public virtual System.Data.SqlTypes.SqlSingle GetSqlSingle(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlSingle(i);
        }

        /// <summary/>
        public virtual System.Data.SqlTypes.SqlString GetSqlString(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlString(i);
        }

        /// <summary/>
        public virtual System.Data.SqlTypes.SqlXml GetSqlXml(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlXml(i);
        }

        /// <summary/>
        public virtual System.Object GetSqlValue(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlValue(i);
        }

        /// <summary/>
        public virtual System.Int32 GetSqlValues(System.Object[] values)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSqlValues(values);
        }

        /// <summary/>
        public override System.String GetString(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetString(i);
        }

        /// <summary/>
        public override System.Object GetValue(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValue(i);
        }

        /// <summary/>
        public override System.Int32 GetValues(System.Object[] values)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValues(values);
        }

        /// <summary/>
        public override System.Boolean IsDBNull(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsDBNull(i);
        }

        /// <summary/>
        public override System.Boolean NextResult()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.NextResult();
        }

        /// <summary/>
        public override System.Boolean Read()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Read();
        }

        /// <summary/>
        void System.Data.IDataReader.Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDataReader)InnerObject).Close();
        }

        /// <summary/>
        System.Data.DataTable System.Data.IDataReader.GetSchemaTable()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataReader)InnerObject).GetSchemaTable();
        }

        /// <summary/>
        System.Boolean System.Data.IDataReader.NextResult()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataReader)InnerObject).NextResult();
        }

        /// <summary/>
        System.Boolean System.Data.IDataReader.Read()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataReader)InnerObject).Read();
        }

        /// <summary/>
        System.Int32 System.Data.IDataReader.Depth
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataReader)InnerObject).Depth; }
        }
        /// <summary/>
        System.Boolean System.Data.IDataReader.IsClosed
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataReader)InnerObject).IsClosed; }
        }
        /// <summary/>
        System.Int32 System.Data.IDataReader.RecordsAffected
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataReader)InnerObject).RecordsAffected; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        System.String System.Data.IDataRecord.GetName(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetName(i);
        }

        /// <summary/>
        System.String System.Data.IDataRecord.GetDataTypeName(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetDataTypeName(i);
        }

        /// <summary/>
        System.Type System.Data.IDataRecord.GetFieldType(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetFieldType(i);
        }

        /// <summary/>
        System.Object System.Data.IDataRecord.GetValue(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetValue(i);
        }

        /// <summary/>
        System.Int32 System.Data.IDataRecord.GetValues(System.Object[] values)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetValues(values);
        }

        /// <summary/>
        System.Int32 System.Data.IDataRecord.GetOrdinal(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetOrdinal(name);
        }

        /// <summary/>
        System.Boolean System.Data.IDataRecord.GetBoolean(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetBoolean(i);
        }

        /// <summary/>
        System.Byte System.Data.IDataRecord.GetByte(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetByte(i);
        }

        /// <summary/>
        System.Int64 System.Data.IDataRecord.GetBytes(System.Int32 i, System.Int64 fieldOffset, System.Byte[] buffer, System.Int32 bufferoffset, System.Int32 length)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetBytes(i, fieldOffset, buffer, bufferoffset, length);
        }

        /// <summary/>
        System.Char System.Data.IDataRecord.GetChar(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetChar(i);
        }

        /// <summary/>
        System.Int64 System.Data.IDataRecord.GetChars(System.Int32 i, System.Int64 fieldoffset, System.Char[] buffer, System.Int32 bufferoffset, System.Int32 length)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetChars(i, fieldoffset, buffer, bufferoffset, length);
        }

        /// <summary/>
        System.Guid System.Data.IDataRecord.GetGuid(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetGuid(i);
        }

        /// <summary/>
        System.Int16 System.Data.IDataRecord.GetInt16(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetInt16(i);
        }

        /// <summary/>
        System.Int32 System.Data.IDataRecord.GetInt32(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetInt32(i);
        }

        /// <summary/>
        System.Int64 System.Data.IDataRecord.GetInt64(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetInt64(i);
        }

        /// <summary/>
        System.Single System.Data.IDataRecord.GetFloat(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetFloat(i);
        }

        /// <summary/>
        System.Double System.Data.IDataRecord.GetDouble(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetDouble(i);
        }

        /// <summary/>
        System.String System.Data.IDataRecord.GetString(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetString(i);
        }

        /// <summary/>
        System.Decimal System.Data.IDataRecord.GetDecimal(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetDecimal(i);
        }

        /// <summary/>
        System.DateTime System.Data.IDataRecord.GetDateTime(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetDateTime(i);
        }

        /// <summary/>
        System.Data.IDataReader System.Data.IDataRecord.GetData(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetData(i);
        }

        /// <summary/>
        System.Boolean System.Data.IDataRecord.IsDBNull(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).IsDBNull(i);
        }

        /// <summary/>
        System.Int32 System.Data.IDataRecord.FieldCount
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataRecord)InnerObject).FieldCount; }
        }
        /// <summary/>
        System.Object System.Data.IDataRecord.this[System.Int32 i]
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataRecord)InnerObject)[i]; }
        }
        /// <summary/>
        System.Object System.Data.IDataRecord.this[System.String name]
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataRecord)InnerObject)[name]; }
        }
        /// <summary/>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Collections.IEnumerable)InnerObject).GetEnumerator();
        }


    }

    /// <summary>Security Wrapper for Type: System.Data.Common.DbDataReader</summary>
    [System.CLSCompliant(false)]
    public class DbDataReaderSW : Microsoft.Test.Security.Wrappers.MarshalByRefObjectSW, System.Data.IDataReader, System.IDisposable, System.Data.IDataRecord, System.Collections.IEnumerable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.DbDataReaderSW Wrap(System.Data.Common.DbDataReader o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.DbDataReaderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.Common.DbDataReader InnerObject
        {
            get { return innerObject as System.Data.Common.DbDataReader; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal DbDataReaderSW(System.Data.Common.DbDataReader o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal DbDataReaderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected DbDataReaderSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public virtual System.Int32 Depth
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Depth; }
        }
        /// <summary/>
        public virtual System.Int32 FieldCount
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FieldCount; }
        }
        /// <summary/>
        public virtual System.Boolean HasRows
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HasRows; }
        }
        /// <summary/>
        public virtual System.Boolean IsClosed
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsClosed; }
        }
        /// <summary/>
        public virtual System.Int32 RecordsAffected
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.RecordsAffected; }
        }
        /// <summary/>
        public virtual System.Int32 VisibleFieldCount
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.VisibleFieldCount; }
        }
        /// <summary/>
        public virtual System.Object this[System.Int32 ordinal]
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject[ordinal]; }
        }
        /// <summary/>
        public virtual System.Object this[System.String name]
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject[name]; }
        }
        /// <summary/>
        public virtual void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public virtual void Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Dispose();
        }

        /// <summary/>
        public virtual System.String GetDataTypeName(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetDataTypeName(ordinal);
        }

        /// <summary/>
        public virtual System.Collections.IEnumerator GetEnumerator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetEnumerator();
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW GetFieldType(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFieldType(ordinal));
        }

        /// <summary/>
        public virtual System.String GetName(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetName(ordinal);
        }

        /// <summary/>
        public virtual System.Int32 GetOrdinal(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetOrdinal(name);
        }

        /// <summary/>
        public virtual System.Data.DataTable GetSchemaTable()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSchemaTable();
        }

        /// <summary/>
        public virtual System.Boolean GetBoolean(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetBoolean(ordinal);
        }

        /// <summary/>
        public virtual System.Byte GetByte(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetByte(ordinal);
        }

        /// <summary/>
        public virtual System.Int64 GetBytes(System.Int32 ordinal, System.Int64 dataOffset, System.Byte[] buffer, System.Int32 bufferOffset, System.Int32 length)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetBytes(ordinal, dataOffset, buffer, bufferOffset, length);
        }

        /// <summary/>
        public virtual System.Char GetChar(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetChar(ordinal);
        }

        /// <summary/>
        public virtual System.Int64 GetChars(System.Int32 ordinal, System.Int64 dataOffset, System.Char[] buffer, System.Int32 bufferOffset, System.Int32 length)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetChars(ordinal, dataOffset, buffer, bufferOffset, length);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbDataReaderSW GetData(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DbDataReaderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetData(ordinal));
        }

        /// <summary/>
        public virtual System.DateTime GetDateTime(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetDateTime(ordinal);
        }

        /// <summary/>
        public virtual System.Decimal GetDecimal(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetDecimal(ordinal);
        }

        /// <summary/>
        public virtual System.Double GetDouble(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetDouble(ordinal);
        }

        /// <summary/>
        public virtual System.Single GetFloat(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetFloat(ordinal);
        }

        /// <summary/>
        public virtual System.Guid GetGuid(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetGuid(ordinal);
        }

        /// <summary/>
        public virtual System.Int16 GetInt16(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetInt16(ordinal);
        }

        /// <summary/>
        public virtual System.Int32 GetInt32(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetInt32(ordinal);
        }

        /// <summary/>
        public virtual System.Int64 GetInt64(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetInt64(ordinal);
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW GetProviderSpecificFieldType(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetProviderSpecificFieldType(ordinal));
        }

        /// <summary/>
        public virtual System.Object GetProviderSpecificValue(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetProviderSpecificValue(ordinal);
        }

        /// <summary/>
        public virtual System.Int32 GetProviderSpecificValues(System.Object[] values)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetProviderSpecificValues(values);
        }

        /// <summary/>
        public virtual System.String GetString(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetString(ordinal);
        }

        /// <summary/>
        public virtual System.Object GetValue(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValue(ordinal);
        }

        /// <summary/>
        public virtual System.Int32 GetValues(System.Object[] values)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValues(values);
        }

        /// <summary/>
        public virtual System.Boolean IsDBNull(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsDBNull(ordinal);
        }

        /// <summary/>
        public virtual System.Boolean NextResult()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.NextResult();
        }

        /// <summary/>
        public virtual System.Boolean Read()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Read();
        }

        /// <summary/>
        void System.Data.IDataReader.Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDataReader)InnerObject).Close();
        }

        /// <summary/>
        System.Data.DataTable System.Data.IDataReader.GetSchemaTable()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataReader)InnerObject).GetSchemaTable();
        }

        /// <summary/>
        System.Boolean System.Data.IDataReader.NextResult()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataReader)InnerObject).NextResult();
        }

        /// <summary/>
        System.Boolean System.Data.IDataReader.Read()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataReader)InnerObject).Read();
        }

        /// <summary/>
        System.Int32 System.Data.IDataReader.Depth
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataReader)InnerObject).Depth; }
        }
        /// <summary/>
        System.Boolean System.Data.IDataReader.IsClosed
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataReader)InnerObject).IsClosed; }
        }
        /// <summary/>
        System.Int32 System.Data.IDataReader.RecordsAffected
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataReader)InnerObject).RecordsAffected; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        System.String System.Data.IDataRecord.GetName(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetName(i);
        }

        /// <summary/>
        System.String System.Data.IDataRecord.GetDataTypeName(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetDataTypeName(i);
        }

        /// <summary/>
        System.Type System.Data.IDataRecord.GetFieldType(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetFieldType(i);
        }

        /// <summary/>
        System.Object System.Data.IDataRecord.GetValue(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetValue(i);
        }

        /// <summary/>
        System.Int32 System.Data.IDataRecord.GetValues(System.Object[] values)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetValues(values);
        }

        /// <summary/>
        System.Int32 System.Data.IDataRecord.GetOrdinal(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetOrdinal(name);
        }

        /// <summary/>
        System.Boolean System.Data.IDataRecord.GetBoolean(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetBoolean(i);
        }

        /// <summary/>
        System.Byte System.Data.IDataRecord.GetByte(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetByte(i);
        }

        /// <summary/>
        System.Int64 System.Data.IDataRecord.GetBytes(System.Int32 i, System.Int64 fieldOffset, System.Byte[] buffer, System.Int32 bufferoffset, System.Int32 length)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetBytes(i, fieldOffset, buffer, bufferoffset, length);
        }

        /// <summary/>
        System.Char System.Data.IDataRecord.GetChar(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetChar(i);
        }

        /// <summary/>
        System.Int64 System.Data.IDataRecord.GetChars(System.Int32 i, System.Int64 fieldoffset, System.Char[] buffer, System.Int32 bufferoffset, System.Int32 length)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetChars(i, fieldoffset, buffer, bufferoffset, length);
        }

        /// <summary/>
        System.Guid System.Data.IDataRecord.GetGuid(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetGuid(i);
        }

        /// <summary/>
        System.Int16 System.Data.IDataRecord.GetInt16(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetInt16(i);
        }

        /// <summary/>
        System.Int32 System.Data.IDataRecord.GetInt32(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetInt32(i);
        }

        /// <summary/>
        System.Int64 System.Data.IDataRecord.GetInt64(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetInt64(i);
        }

        /// <summary/>
        System.Single System.Data.IDataRecord.GetFloat(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetFloat(i);
        }

        /// <summary/>
        System.Double System.Data.IDataRecord.GetDouble(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetDouble(i);
        }

        /// <summary/>
        System.String System.Data.IDataRecord.GetString(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetString(i);
        }

        /// <summary/>
        System.Decimal System.Data.IDataRecord.GetDecimal(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetDecimal(i);
        }

        /// <summary/>
        System.DateTime System.Data.IDataRecord.GetDateTime(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetDateTime(i);
        }

        /// <summary/>
        System.Data.IDataReader System.Data.IDataRecord.GetData(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetData(i);
        }

        /// <summary/>
        System.Boolean System.Data.IDataRecord.IsDBNull(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).IsDBNull(i);
        }

        /// <summary/>
        System.Int32 System.Data.IDataRecord.FieldCount
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataRecord)InnerObject).FieldCount; }
        }
        /// <summary/>
        System.Object System.Data.IDataRecord.this[System.Int32 i]
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataRecord)InnerObject)[i]; }
        }
        /// <summary/>
        System.Object System.Data.IDataRecord.this[System.String name]
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataRecord)InnerObject)[name]; }
        }
        /// <summary/>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Collections.IEnumerable)InnerObject).GetEnumerator();
        }


    }

    /// <summary>Security Wrapper for Type: System.Data.SqlClient.SqlTransaction</summary>
    [System.CLSCompliant(false)]
    public class SqlTransactionSW : Microsoft.Test.Security.Wrappers.DbTransactionSW, System.Data.IDbTransaction, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.SqlTransactionSW Wrap(System.Data.SqlClient.SqlTransaction o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.SqlTransactionSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.SqlClient.SqlTransaction InnerObject
        {
            get { return innerObject as System.Data.SqlClient.SqlTransaction; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal SqlTransactionSW(System.Data.SqlClient.SqlTransaction o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal SqlTransactionSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.SqlConnectionSW Connection
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.SqlConnectionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Connection); }
        }
        /// <summary/>
        public override System.Data.IsolationLevel IsolationLevel
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsolationLevel; }
        }
        /// <summary/>
        public override void Commit()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Commit();
        }

        /// <summary/>
        public override void Rollback()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Rollback();
        }

        /// <summary/>
        public void Rollback(System.String transactionName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Rollback(transactionName);
        }

        /// <summary/>
        public void Save(System.String savePointName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Save(savePointName);
        }

        /// <summary/>
        void System.Data.IDbTransaction.Commit()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbTransaction)InnerObject).Commit();
        }

        /// <summary/>
        void System.Data.IDbTransaction.Rollback()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbTransaction)InnerObject).Rollback();
        }

        /// <summary/>
        System.Data.IDbConnection System.Data.IDbTransaction.Connection
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbTransaction)InnerObject).Connection; }
        }
        /// <summary/>
        System.Data.IsolationLevel System.Data.IDbTransaction.IsolationLevel
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbTransaction)InnerObject).IsolationLevel; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.Data.Common.DbTransaction</summary>
    [System.CLSCompliant(false)]
    public class DbTransactionSW : Microsoft.Test.Security.Wrappers.MarshalByRefObjectSW, System.Data.IDbTransaction, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.DbTransactionSW Wrap(System.Data.Common.DbTransaction o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.DbTransactionSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.Common.DbTransaction InnerObject
        {
            get { return innerObject as System.Data.Common.DbTransaction; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal DbTransactionSW(System.Data.Common.DbTransaction o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal DbTransactionSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        protected DbTransactionSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DbConnectionSW Connection
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.DbConnectionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Connection); }
        }
        /// <summary/>
        public virtual System.Data.IsolationLevel IsolationLevel
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsolationLevel; }
        }
        /// <summary/>
        public virtual void Commit()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Commit();
        }

        /// <summary/>
        public virtual void Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Dispose();
        }

        /// <summary/>
        public virtual void Rollback()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Rollback();
        }

        /// <summary/>
        void System.Data.IDbTransaction.Commit()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbTransaction)InnerObject).Commit();
        }

        /// <summary/>
        void System.Data.IDbTransaction.Rollback()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbTransaction)InnerObject).Rollback();
        }

        /// <summary/>
        System.Data.IDbConnection System.Data.IDbTransaction.Connection
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbTransaction)InnerObject).Connection; }
        }
        /// <summary/>
        System.Data.IsolationLevel System.Data.IDbTransaction.IsolationLevel
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbTransaction)InnerObject).IsolationLevel; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.Data.OleDb.OleDbCommand</summary>
    [System.CLSCompliant(false)]
    public class OleDbCommandSW : Microsoft.Test.Security.Wrappers.DbCommandSW, System.ComponentModel.IComponent, System.IDisposable, System.Data.IDbCommand, System.ICloneable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.OleDbCommandSW Wrap(System.Data.OleDb.OleDbCommand o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.OleDbCommandSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.OleDb.OleDbCommand InnerObject
        {
            get { return innerObject as System.Data.OleDb.OleDbCommand; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal OleDbCommandSW(System.Data.OleDb.OleDbCommand o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal OleDbCommandSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public OleDbCommandSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.OleDb.OleDbCommand();
        }

        /// <summary/>
        public OleDbCommandSW(System.String cmdText)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.OleDb.OleDbCommand(cmdText);
        }

        /// <summary/>
        public OleDbCommandSW(System.String cmdText, System.Data.OleDb.OleDbConnection connection)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.OleDb.OleDbCommand(cmdText, connection);
        }

        /// <summary/>
        public OleDbCommandSW(System.String cmdText, System.Data.OleDb.OleDbConnection connection, System.Data.OleDb.OleDbTransaction transaction)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.OleDb.OleDbCommand(cmdText, connection, transaction);
        }

        /// <summary/>
        public override System.String CommandText
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CommandText; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CommandText = value; }
        }
        /// <summary/>
        public override System.Int32 CommandTimeout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CommandTimeout; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CommandTimeout = value; }
        }
        /// <summary/>
        public override System.Data.CommandType CommandType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CommandType; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CommandType = value; }
        }
        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbConnectionSW Connection
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.OleDbConnectionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Connection); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Connection = value.InnerObject; }
        }
        /// <summary/>
        public override System.Boolean DesignTimeVisible
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DesignTimeVisible; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DesignTimeVisible = value; }
        }
        /// <summary/>
        public new System.Data.OleDb.OleDbParameterCollection Parameters
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Parameters; }
        }
        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbTransactionSW Transaction
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.OleDbTransactionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Transaction); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Transaction = value.InnerObject; }
        }
        /// <summary/>
        public override System.Data.UpdateRowSource UpdatedRowSource
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.UpdatedRowSource; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.UpdatedRowSource = value; }
        }
        /// <summary/>
        public void ResetCommandTimeout()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResetCommandTimeout();
        }

        /// <summary/>
        public override void Cancel()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Cancel();
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.OleDbCommandSW Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.OleDbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Clone());
        }

        /// <summary/>
        public new System.Data.OleDb.OleDbParameter CreateParameter()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateParameter();
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbDataReaderSW ExecuteReader()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.OleDbDataReaderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ExecuteReader());
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbDataReaderSW ExecuteReader(System.Data.CommandBehavior behavior)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.OleDbDataReaderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ExecuteReader(behavior));
        }

        /// <summary/>
        public override System.Int32 ExecuteNonQuery()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ExecuteNonQuery();
        }

        /// <summary/>
        public override System.Object ExecuteScalar()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ExecuteScalar();
        }

        /// <summary/>
        public override void Prepare()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Prepare();
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        void System.Data.IDbCommand.Prepare()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbCommand)InnerObject).Prepare();
        }

        /// <summary/>
        void System.Data.IDbCommand.Cancel()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbCommand)InnerObject).Cancel();
        }

        /// <summary/>
        System.Data.IDbDataParameter System.Data.IDbCommand.CreateParameter()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbCommand)InnerObject).CreateParameter();
        }

        /// <summary/>
        System.Int32 System.Data.IDbCommand.ExecuteNonQuery()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbCommand)InnerObject).ExecuteNonQuery();
        }

        /// <summary/>
        System.Data.IDataReader System.Data.IDbCommand.ExecuteReader()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbCommand)InnerObject).ExecuteReader();
        }

        /// <summary/>
        System.Data.IDataReader System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior behavior)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbCommand)InnerObject).ExecuteReader(behavior);
        }

        /// <summary/>
        System.Object System.Data.IDbCommand.ExecuteScalar()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbCommand)InnerObject).ExecuteScalar();
        }

        /// <summary/>
        System.Data.IDbConnection System.Data.IDbCommand.Connection
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).Connection; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).Connection = value; }
        }
        /// <summary/>
        System.Data.IDbTransaction System.Data.IDbCommand.Transaction
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).Transaction; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).Transaction = value; }
        }
        /// <summary/>
        System.String System.Data.IDbCommand.CommandText
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).CommandText; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).CommandText = value; }
        }
        /// <summary/>
        System.Int32 System.Data.IDbCommand.CommandTimeout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).CommandTimeout; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).CommandTimeout = value; }
        }
        /// <summary/>
        System.Data.CommandType System.Data.IDbCommand.CommandType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).CommandType; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).CommandType = value; }
        }
        /// <summary/>
        System.Data.IDataParameterCollection System.Data.IDbCommand.Parameters
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).Parameters; }
        }
        /// <summary/>
        System.Data.UpdateRowSource System.Data.IDbCommand.UpdatedRowSource
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbCommand)InnerObject).UpdatedRowSource; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbCommand)InnerObject).UpdatedRowSource = value; }
        }
        /// <summary/>
        System.Object System.ICloneable.Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ICloneable)InnerObject).Clone();
        }


    }

    /// <summary>Security Wrapper for Type: System.Data.OleDb.OleDbCommandBuilder</summary>
    [System.CLSCompliant(false)]
    public class OleDbCommandBuilderSW : Microsoft.Test.Security.Wrappers.DbCommandBuilderSW, System.ComponentModel.IComponent, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.OleDbCommandBuilderSW Wrap(System.Data.OleDb.OleDbCommandBuilder o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.OleDbCommandBuilderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.OleDb.OleDbCommandBuilder InnerObject
        {
            get { return innerObject as System.Data.OleDb.OleDbCommandBuilder; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal OleDbCommandBuilderSW(System.Data.OleDb.OleDbCommandBuilder o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal OleDbCommandBuilderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public OleDbCommandBuilderSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.OleDb.OleDbCommandBuilder();
        }

        /// <summary/>
        public OleDbCommandBuilderSW(System.Data.OleDb.OleDbDataAdapter adapter)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.OleDb.OleDbCommandBuilder(adapter);
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbDataAdapterSW DataAdapter
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.OleDbDataAdapterSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DataAdapter); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DataAdapter = value.InnerObject; }
        }
        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbCommandSW GetInsertCommand()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.OleDbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetInsertCommand());
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbCommandSW GetInsertCommand(System.Boolean useColumnsForParameterNames)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.OleDbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetInsertCommand(useColumnsForParameterNames));
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbCommandSW GetUpdateCommand()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.OleDbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetUpdateCommand());
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbCommandSW GetUpdateCommand(System.Boolean useColumnsForParameterNames)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.OleDbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetUpdateCommand(useColumnsForParameterNames));
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbCommandSW GetDeleteCommand()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.OleDbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetDeleteCommand());
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbCommandSW GetDeleteCommand(System.Boolean useColumnsForParameterNames)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.OleDbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetDeleteCommand(useColumnsForParameterNames));
        }

        /// <summary/>
        public static void DeriveParameters(System.Data.OleDb.OleDbCommand command)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Data.OleDb.OleDbCommandBuilder.DeriveParameters(command);
        }

        /// <summary/>
        public override System.String QuoteIdentifier(System.String unquotedIdentifier)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.QuoteIdentifier(unquotedIdentifier);
        }

        /// <summary/>
        public System.String QuoteIdentifier(System.String unquotedIdentifier, System.Data.OleDb.OleDbConnection connection)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.QuoteIdentifier(unquotedIdentifier, connection);
        }

        /// <summary/>
        public override System.String UnquoteIdentifier(System.String quotedIdentifier)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.UnquoteIdentifier(quotedIdentifier);
        }

        /// <summary/>
        public System.String UnquoteIdentifier(System.String quotedIdentifier, System.Data.OleDb.OleDbConnection connection)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.UnquoteIdentifier(quotedIdentifier, connection);
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.Data.OleDb.OleDbConnection</summary>
    [System.CLSCompliant(false)]
    public class OleDbConnectionSW : Microsoft.Test.Security.Wrappers.DbConnectionSW, System.ComponentModel.IComponent, System.IDisposable, System.Data.IDbConnection, System.ICloneable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.OleDbConnectionSW Wrap(System.Data.OleDb.OleDbConnection o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.OleDbConnectionSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.OleDb.OleDbConnection InnerObject
        {
            get { return innerObject as System.Data.OleDb.OleDbConnection; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal OleDbConnectionSW(System.Data.OleDb.OleDbConnection o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal OleDbConnectionSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public OleDbConnectionSW(System.String connectionString)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.OleDb.OleDbConnection(connectionString);
        }

        /// <summary/>
        public OleDbConnectionSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.OleDb.OleDbConnection();
        }

        /// <summary/>
        public override System.String ConnectionString
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ConnectionString; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ConnectionString = value; }
        }
        /// <summary/>
        public override System.Int32 ConnectionTimeout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ConnectionTimeout; }
        }
        /// <summary/>
        public override System.String Database
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Database; }
        }
        /// <summary/>
        public override System.String DataSource
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DataSource; }
        }
        /// <summary/>
        public System.String Provider
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Provider; }
        }
        /// <summary/>
        public override System.String ServerVersion
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ServerVersion; }
        }
        /// <summary/>
        public override System.Data.ConnectionState State
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.State; }
        }
        /// <summary/>
        public void ResetState()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResetState();
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbTransactionSW BeginTransaction()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.OleDbTransactionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.BeginTransaction());
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbTransactionSW BeginTransaction(System.Data.IsolationLevel isolationLevel)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.OleDbTransactionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.BeginTransaction(isolationLevel));
        }

        /// <summary/>
        public override void ChangeDatabase(System.String value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ChangeDatabase(value);
        }

        /// <summary/>
        public override void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbCommandSW CreateCommand()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.OleDbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CreateCommand());
        }

        /// <summary/>
        public void EnlistDistributedTransaction(System.EnterpriseServices.ITransaction transaction)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EnlistDistributedTransaction(transaction);
        }

        /// <summary/>
        public System.Data.DataTable GetOleDbSchemaTable(System.Guid schema, System.Object[] restrictions)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetOleDbSchemaTable(schema, restrictions);
        }

        /// <summary/>
        public override void Open()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Open();
        }

        /// <summary/>
        public static void ReleaseObjectPool()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Data.OleDb.OleDbConnection.ReleaseObjectPool();
        }

        /// <summary/>
        public override void EnlistTransaction(System.Transactions.Transaction transaction)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EnlistTransaction(transaction);
        }

        /// <summary/>
        public override System.Data.DataTable GetSchema()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSchema();
        }

        /// <summary/>
        public override System.Data.DataTable GetSchema(System.String collectionName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSchema(collectionName);
        }

        /// <summary/>
        public override System.Data.DataTable GetSchema(System.String collectionName, System.String[] restrictionValues)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSchema(collectionName, restrictionValues);
        }

        /// <summary/>
        public event System.Data.OleDb.OleDbInfoMessageEventHandler InfoMessage
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.InfoMessage += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.InfoMessage -= value; }
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        System.Data.IDbTransaction System.Data.IDbConnection.BeginTransaction()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbConnection)InnerObject).BeginTransaction();
        }

        /// <summary/>
        System.Data.IDbTransaction System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel il)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbConnection)InnerObject).BeginTransaction(il);
        }

        /// <summary/>
        void System.Data.IDbConnection.Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbConnection)InnerObject).Close();
        }

        /// <summary/>
        void System.Data.IDbConnection.ChangeDatabase(System.String databaseName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbConnection)InnerObject).ChangeDatabase(databaseName);
        }

        /// <summary/>
        System.Data.IDbCommand System.Data.IDbConnection.CreateCommand()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDbConnection)InnerObject).CreateCommand();
        }

        /// <summary/>
        void System.Data.IDbConnection.Open()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbConnection)InnerObject).Open();
        }

        /// <summary/>
        System.String System.Data.IDbConnection.ConnectionString
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbConnection)InnerObject).ConnectionString; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbConnection)InnerObject).ConnectionString = value; }
        }
        /// <summary/>
        System.Int32 System.Data.IDbConnection.ConnectionTimeout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbConnection)InnerObject).ConnectionTimeout; }
        }
        /// <summary/>
        System.String System.Data.IDbConnection.Database
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbConnection)InnerObject).Database; }
        }
        /// <summary/>
        System.Data.ConnectionState System.Data.IDbConnection.State
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbConnection)InnerObject).State; }
        }
        /// <summary/>
        System.Object System.ICloneable.Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ICloneable)InnerObject).Clone();
        }


    }

    /// <summary>Security Wrapper for Type: System.Data.OleDb.OleDbDataAdapter</summary>
    [System.CLSCompliant(false)]
    public class OleDbDataAdapterSW : Microsoft.Test.Security.Wrappers.DbDataAdapterSW, System.ComponentModel.IComponent, System.IDisposable, System.Data.IDataAdapter, System.Data.IDbDataAdapter, System.ICloneable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.OleDbDataAdapterSW Wrap(System.Data.OleDb.OleDbDataAdapter o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.OleDbDataAdapterSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.OleDb.OleDbDataAdapter InnerObject
        {
            get { return innerObject as System.Data.OleDb.OleDbDataAdapter; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal OleDbDataAdapterSW(System.Data.OleDb.OleDbDataAdapter o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal OleDbDataAdapterSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public OleDbDataAdapterSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.OleDb.OleDbDataAdapter();
        }

        /// <summary/>
        public OleDbDataAdapterSW(System.Data.OleDb.OleDbCommand selectCommand)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.OleDb.OleDbDataAdapter(selectCommand);
        }

        /// <summary/>
        public OleDbDataAdapterSW(System.String selectCommandText, System.String selectConnectionString)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.OleDb.OleDbDataAdapter(selectCommandText, selectConnectionString);
        }

        /// <summary/>
        public OleDbDataAdapterSW(System.String selectCommandText, System.Data.OleDb.OleDbConnection selectConnection)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.OleDb.OleDbDataAdapter(selectCommandText, selectConnection);
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbCommandSW DeleteCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.OleDbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DeleteCommand); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DeleteCommand = value.InnerObject; }
        }
        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbCommandSW InsertCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.OleDbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.InsertCommand); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.InsertCommand = value.InnerObject; }
        }
        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbCommandSW SelectCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.OleDbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.SelectCommand); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.SelectCommand = value.InnerObject; }
        }
        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbCommandSW UpdateCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.OleDbCommandSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.UpdateCommand); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.UpdateCommand = value.InnerObject; }
        }
        /// <summary/>
        public System.Int32 Fill(System.Data.DataTable dataTable, System.Object ADODBRecordSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Fill(dataTable, ADODBRecordSet);
        }

        /// <summary/>
        public System.Int32 Fill(System.Data.DataSet dataSet, System.Object ADODBRecordSet, System.String srcTable)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Fill(dataSet, ADODBRecordSet, srcTable);
        }

        /// <summary/>
        public event System.Data.OleDb.OleDbRowUpdatedEventHandler RowUpdated
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RowUpdated += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RowUpdated -= value; }
        }

        /// <summary/>
        public event System.Data.OleDb.OleDbRowUpdatingEventHandler RowUpdating
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RowUpdating += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RowUpdating -= value; }
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        System.Data.DataTable[] System.Data.IDataAdapter.FillSchema(System.Data.DataSet dataSet, System.Data.SchemaType schemaType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataAdapter)InnerObject).FillSchema(dataSet, schemaType);
        }

        /// <summary/>
        System.Int32 System.Data.IDataAdapter.Fill(System.Data.DataSet dataSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataAdapter)InnerObject).Fill(dataSet);
        }

        /// <summary/>
        System.Data.IDataParameter[] System.Data.IDataAdapter.GetFillParameters()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataAdapter)InnerObject).GetFillParameters();
        }

        /// <summary/>
        System.Int32 System.Data.IDataAdapter.Update(System.Data.DataSet dataSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataAdapter)InnerObject).Update(dataSet);
        }

        /// <summary/>
        System.Data.MissingMappingAction System.Data.IDataAdapter.MissingMappingAction
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataAdapter)InnerObject).MissingMappingAction; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDataAdapter)InnerObject).MissingMappingAction = value; }
        }
        /// <summary/>
        System.Data.MissingSchemaAction System.Data.IDataAdapter.MissingSchemaAction
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataAdapter)InnerObject).MissingSchemaAction; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDataAdapter)InnerObject).MissingSchemaAction = value; }
        }
        /// <summary/>
        System.Data.ITableMappingCollection System.Data.IDataAdapter.TableMappings
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataAdapter)InnerObject).TableMappings; }
        }
        /// <summary/>
        System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbDataAdapter)InnerObject).SelectCommand; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbDataAdapter)InnerObject).SelectCommand = value; }
        }
        /// <summary/>
        System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbDataAdapter)InnerObject).InsertCommand; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbDataAdapter)InnerObject).InsertCommand = value; }
        }
        /// <summary/>
        System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbDataAdapter)InnerObject).UpdateCommand; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbDataAdapter)InnerObject).UpdateCommand = value; }
        }
        /// <summary/>
        System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbDataAdapter)InnerObject).DeleteCommand; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Data.IDbDataAdapter)InnerObject).DeleteCommand = value; }
        }
        /// <summary/>
        System.Object System.ICloneable.Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ICloneable)InnerObject).Clone();
        }


    }

    /// <summary>Security Wrapper for Type: System.Data.OleDb.OleDbDataReader</summary>
    [System.CLSCompliant(false)]
    public class OleDbDataReaderSW : Microsoft.Test.Security.Wrappers.DbDataReaderSW, System.Data.IDataReader, System.IDisposable, System.Data.IDataRecord, System.Collections.IEnumerable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.OleDbDataReaderSW Wrap(System.Data.OleDb.OleDbDataReader o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.OleDbDataReaderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.OleDb.OleDbDataReader InnerObject
        {
            get { return innerObject as System.Data.OleDb.OleDbDataReader; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal OleDbDataReaderSW(System.Data.OleDb.OleDbDataReader o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal OleDbDataReaderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public override System.Int32 Depth
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Depth; }
        }
        /// <summary/>
        public override System.Int32 FieldCount
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FieldCount; }
        }
        /// <summary/>
        public override System.Boolean HasRows
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HasRows; }
        }
        /// <summary/>
        public override System.Boolean IsClosed
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsClosed; }
        }
        /// <summary/>
        public override System.Int32 RecordsAffected
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.RecordsAffected; }
        }
        /// <summary/>
        public override System.Object this[System.Int32 index]
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject[index]; }
        }
        /// <summary/>
        public override System.Object this[System.String name]
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject[name]; }
        }
        /// <summary/>
        public override System.Int32 VisibleFieldCount
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.VisibleFieldCount; }
        }
        /// <summary/>
        public override System.Data.DataTable GetSchemaTable()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetSchemaTable();
        }

        /// <summary/>
        public override void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public override System.Boolean GetBoolean(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetBoolean(ordinal);
        }

        /// <summary/>
        public override System.Byte GetByte(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetByte(ordinal);
        }

        /// <summary/>
        public override System.Int64 GetBytes(System.Int32 ordinal, System.Int64 dataIndex, System.Byte[] buffer, System.Int32 bufferIndex, System.Int32 length)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetBytes(ordinal, dataIndex, buffer, bufferIndex, length);
        }

        /// <summary/>
        public override System.Int64 GetChars(System.Int32 ordinal, System.Int64 dataIndex, System.Char[] buffer, System.Int32 bufferIndex, System.Int32 length)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetChars(ordinal, dataIndex, buffer, bufferIndex, length);
        }

        /// <summary/>
        public override System.Char GetChar(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetChar(ordinal);
        }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbDataReaderSW GetData(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.OleDbDataReaderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetData(ordinal));
        }

        /// <summary/>
        public override System.String GetDataTypeName(System.Int32 index)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetDataTypeName(index);
        }

        /// <summary/>
        public override System.DateTime GetDateTime(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetDateTime(ordinal);
        }

        /// <summary/>
        public override System.Decimal GetDecimal(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetDecimal(ordinal);
        }

        /// <summary/>
        public override System.Double GetDouble(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetDouble(ordinal);
        }

        /// <summary/>
        public override System.Collections.IEnumerator GetEnumerator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetEnumerator();
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.TypeSW GetFieldType(System.Int32 index)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetFieldType(index));
        }

        /// <summary/>
        public override System.Single GetFloat(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetFloat(ordinal);
        }

        /// <summary/>
        public override System.Guid GetGuid(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetGuid(ordinal);
        }

        /// <summary/>
        public override System.Int16 GetInt16(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetInt16(ordinal);
        }

        /// <summary/>
        public override System.Int32 GetInt32(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetInt32(ordinal);
        }

        /// <summary/>
        public override System.Int64 GetInt64(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetInt64(ordinal);
        }

        /// <summary/>
        public override System.String GetName(System.Int32 index)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetName(index);
        }

        /// <summary/>
        public override System.Int32 GetOrdinal(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetOrdinal(name);
        }

        /// <summary/>
        public override System.String GetString(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetString(ordinal);
        }

        /// <summary/>
        public System.TimeSpan GetTimeSpan(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetTimeSpan(ordinal);
        }

        /// <summary/>
        public override System.Object GetValue(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValue(ordinal);
        }

        /// <summary/>
        public override System.Int32 GetValues(System.Object[] values)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetValues(values);
        }

        /// <summary/>
        public override System.Boolean IsDBNull(System.Int32 ordinal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsDBNull(ordinal);
        }

        /// <summary/>
        public override System.Boolean NextResult()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.NextResult();
        }

        /// <summary/>
        public override System.Boolean Read()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Read();
        }

        /// <summary/>
        void System.Data.IDataReader.Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDataReader)InnerObject).Close();
        }

        /// <summary/>
        System.Data.DataTable System.Data.IDataReader.GetSchemaTable()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataReader)InnerObject).GetSchemaTable();
        }

        /// <summary/>
        System.Boolean System.Data.IDataReader.NextResult()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataReader)InnerObject).NextResult();
        }

        /// <summary/>
        System.Boolean System.Data.IDataReader.Read()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataReader)InnerObject).Read();
        }

        /// <summary/>
        System.Int32 System.Data.IDataReader.Depth
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataReader)InnerObject).Depth; }
        }
        /// <summary/>
        System.Boolean System.Data.IDataReader.IsClosed
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataReader)InnerObject).IsClosed; }
        }
        /// <summary/>
        System.Int32 System.Data.IDataReader.RecordsAffected
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataReader)InnerObject).RecordsAffected; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        System.String System.Data.IDataRecord.GetName(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetName(i);
        }

        /// <summary/>
        System.String System.Data.IDataRecord.GetDataTypeName(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetDataTypeName(i);
        }

        /// <summary/>
        System.Type System.Data.IDataRecord.GetFieldType(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetFieldType(i);
        }

        /// <summary/>
        System.Object System.Data.IDataRecord.GetValue(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetValue(i);
        }

        /// <summary/>
        System.Int32 System.Data.IDataRecord.GetValues(System.Object[] values)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetValues(values);
        }

        /// <summary/>
        System.Int32 System.Data.IDataRecord.GetOrdinal(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetOrdinal(name);
        }

        /// <summary/>
        System.Boolean System.Data.IDataRecord.GetBoolean(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetBoolean(i);
        }

        /// <summary/>
        System.Byte System.Data.IDataRecord.GetByte(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetByte(i);
        }

        /// <summary/>
        System.Int64 System.Data.IDataRecord.GetBytes(System.Int32 i, System.Int64 fieldOffset, System.Byte[] buffer, System.Int32 bufferoffset, System.Int32 length)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetBytes(i, fieldOffset, buffer, bufferoffset, length);
        }

        /// <summary/>
        System.Char System.Data.IDataRecord.GetChar(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetChar(i);
        }

        /// <summary/>
        System.Int64 System.Data.IDataRecord.GetChars(System.Int32 i, System.Int64 fieldoffset, System.Char[] buffer, System.Int32 bufferoffset, System.Int32 length)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetChars(i, fieldoffset, buffer, bufferoffset, length);
        }

        /// <summary/>
        System.Guid System.Data.IDataRecord.GetGuid(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetGuid(i);
        }

        /// <summary/>
        System.Int16 System.Data.IDataRecord.GetInt16(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetInt16(i);
        }

        /// <summary/>
        System.Int32 System.Data.IDataRecord.GetInt32(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetInt32(i);
        }

        /// <summary/>
        System.Int64 System.Data.IDataRecord.GetInt64(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetInt64(i);
        }

        /// <summary/>
        System.Single System.Data.IDataRecord.GetFloat(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetFloat(i);
        }

        /// <summary/>
        System.Double System.Data.IDataRecord.GetDouble(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetDouble(i);
        }

        /// <summary/>
        System.String System.Data.IDataRecord.GetString(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetString(i);
        }

        /// <summary/>
        System.Decimal System.Data.IDataRecord.GetDecimal(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetDecimal(i);
        }

        /// <summary/>
        System.DateTime System.Data.IDataRecord.GetDateTime(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetDateTime(i);
        }

        /// <summary/>
        System.Data.IDataReader System.Data.IDataRecord.GetData(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).GetData(i);
        }

        /// <summary/>
        System.Boolean System.Data.IDataRecord.IsDBNull(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Data.IDataRecord)InnerObject).IsDBNull(i);
        }

        /// <summary/>
        System.Int32 System.Data.IDataRecord.FieldCount
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataRecord)InnerObject).FieldCount; }
        }
        /// <summary/>
        System.Object System.Data.IDataRecord.this[System.Int32 i]
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataRecord)InnerObject)[i]; }
        }
        /// <summary/>
        System.Object System.Data.IDataRecord.this[System.String name]
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDataRecord)InnerObject)[name]; }
        }
        /// <summary/>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Collections.IEnumerable)InnerObject).GetEnumerator();
        }


    }

    /// <summary>Security Wrapper for Type: System.Data.OleDb.OleDbTransaction</summary>
    [System.CLSCompliant(false)]
    public class OleDbTransactionSW : Microsoft.Test.Security.Wrappers.DbTransactionSW, System.Data.IDbTransaction, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.OleDbTransactionSW Wrap(System.Data.OleDb.OleDbTransaction o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.OleDbTransactionSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.OleDb.OleDbTransaction InnerObject
        {
            get { return innerObject as System.Data.OleDb.OleDbTransaction; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal OleDbTransactionSW(System.Data.OleDb.OleDbTransaction o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal OleDbTransactionSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public new Microsoft.Test.Security.Wrappers.OleDbConnectionSW Connection
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.OleDbConnectionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Connection); }
        }
        /// <summary/>
        public override System.Data.IsolationLevel IsolationLevel
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsolationLevel; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.OleDbTransactionSW Begin(System.Data.IsolationLevel isolevel)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.OleDbTransactionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Begin(isolevel));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.OleDbTransactionSW Begin()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.OleDbTransactionSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Begin());
        }

        /// <summary/>
        public override void Commit()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Commit();
        }

        /// <summary/>
        public override void Rollback()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Rollback();
        }

        /// <summary/>
        void System.Data.IDbTransaction.Commit()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbTransaction)InnerObject).Commit();
        }

        /// <summary/>
        void System.Data.IDbTransaction.Rollback()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Data.IDbTransaction)InnerObject).Rollback();
        }

        /// <summary/>
        System.Data.IDbConnection System.Data.IDbTransaction.Connection
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbTransaction)InnerObject).Connection; }
        }
        /// <summary/>
        System.Data.IsolationLevel System.Data.IDbTransaction.IsolationLevel
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Data.IDbTransaction)InnerObject).IsolationLevel; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.Xml.XmlDataDocument</summary>
    [System.CLSCompliant(false)]
    public class XmlDataDocumentSW : Microsoft.Test.Security.Wrappers.XmlDocumentSW, System.ICloneable, System.Collections.IEnumerable, System.Xml.XPath.IXPathNavigable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.XmlDataDocumentSW Wrap(System.Xml.XmlDataDocument o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.XmlDataDocumentSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Xml.XmlDataDocument InnerObject
        {
            get { return innerObject as System.Xml.XmlDataDocument; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal XmlDataDocumentSW(System.Xml.XmlDataDocument o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal XmlDataDocumentSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public XmlDataDocumentSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlDataDocument();
        }

        /// <summary/>
        public XmlDataDocumentSW(System.Data.DataSet dataset)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlDataDocument(dataset);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DataSetSW DataSet
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.DataSetSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.DataSet); }
        }
        /// <summary/>
        public override System.Xml.XmlElement CreateElement(System.String prefix, System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateElement(prefix, localName, namespaceURI);
        }

        /// <summary/>
        public override System.Xml.XmlEntityReference CreateEntityReference(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateEntityReference(name);
        }

        /// <summary/>
        public System.Data.DataRow GetRowFromElement(System.Xml.XmlElement e)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetRowFromElement(e);
        }

        /// <summary/>
        public System.Xml.XmlElement GetElementFromRow(System.Data.DataRow r)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetElementFromRow(r);
        }

        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.XmlNodeSW CloneNode(System.Boolean deep)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CloneNode(deep));
        }

        /// <summary/>
        public override void Load(System.String filename)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Load(filename);
        }

        /// <summary/>
        public override void Load(System.IO.Stream inStream)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Load(inStream);
        }

        /// <summary/>
        public override void Load(System.IO.TextReader txtReader)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Load(txtReader);
        }

        /// <summary/>
        public override void Load(System.Xml.XmlReader reader)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Load(reader);
        }

        /// <summary/>
        public override System.Xml.XmlElement GetElementById(System.String elemId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetElementById(elemId);
        }

        /// <summary/>
        public override System.Xml.XmlNodeList GetElementsByTagName(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetElementsByTagName(name);
        }

        /// <summary/>
        System.Object System.ICloneable.Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ICloneable)InnerObject).Clone();
        }

        /// <summary/>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Collections.IEnumerable)InnerObject).GetEnumerator();
        }

        /// <summary/>
        System.Xml.XPath.XPathNavigator System.Xml.XPath.IXPathNavigable.CreateNavigator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Xml.XPath.IXPathNavigable)InnerObject).CreateNavigator();
        }


    }

    /// <summary>Security Wrapper for Type: System.Xml.XmlDocument</summary>
    [System.CLSCompliant(false)]
    public class XmlDocumentSW : Microsoft.Test.Security.Wrappers.XmlNodeSW, System.ICloneable, System.Collections.IEnumerable, System.Xml.XPath.IXPathNavigable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.XmlDocumentSW Wrap(System.Xml.XmlDocument o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.XmlDocumentSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Xml.XmlDocument InnerObject
        {
            get { return innerObject as System.Xml.XmlDocument; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal XmlDocumentSW(System.Xml.XmlDocument o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal XmlDocumentSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public XmlDocumentSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlDocument();
        }

        /// <summary/>
        public XmlDocumentSW(System.Xml.XmlNameTable nt)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlDocument(nt);
        }

        /// <summary/>
        XmlDocumentSW(System.Xml.XmlImplementation imp)
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public override System.Xml.XmlNodeType NodeType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.NodeType; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.XmlNodeSW ParentNode
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ParentNode); }
        }
        /// <summary/>
        public virtual System.Xml.XmlDocumentType DocumentType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DocumentType; }
        }
        /// <summary/>
        public System.Xml.XmlImplementation Implementation
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Implementation; }
        }
        /// <summary/>
        public override System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public override System.String LocalName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.LocalName; }
        }
        /// <summary/>
        public System.Xml.XmlElement DocumentElement
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DocumentElement; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.XmlDocumentSW OwnerDocument
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.XmlDocumentSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.OwnerDocument); }
        }
        /// <summary/>
        public System.Xml.Schema.XmlSchemaSet Schemas
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Schemas; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Schemas = value; }
        }
        /// <summary/>
        public virtual System.Xml.XmlResolver XmlResolver
        {
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.XmlResolver = value; }
        }
        /// <summary/>
        public System.Xml.XmlNameTable NameTable
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.NameTable; }
        }
        /// <summary/>
        public System.Boolean PreserveWhitespace
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PreserveWhitespace; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.PreserveWhitespace = value; }
        }
        /// <summary/>
        public override System.Boolean IsReadOnly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsReadOnly; }
        }
        /// <summary/>
        public override System.String InnerXml
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.InnerXml; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.InnerXml = value; }
        }
        /// <summary/>
        public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.SchemaInfo; }
        }
        /// <summary/>
        public override System.String BaseURI
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.BaseURI; }
        }
        /// <summary/>
        public override Microsoft.Test.Security.Wrappers.XmlNodeSW CloneNode(System.Boolean deep)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CloneNode(deep));
        }

        /// <summary/>
        public virtual System.Xml.XmlDocumentType CreateDocumentType(System.String name, System.String publicId, System.String systemId, System.String internalSubset)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateDocumentType(name, publicId, systemId, internalSubset);
        }

        /// <summary/>
        public virtual System.Xml.XmlDocumentFragment CreateDocumentFragment()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateDocumentFragment();
        }

        /// <summary/>
        public virtual System.Xml.XmlEntityReference CreateEntityReference(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateEntityReference(name);
        }

        /// <summary/>
        public virtual System.Xml.XmlProcessingInstruction CreateProcessingInstruction(System.String target, System.String data)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateProcessingInstruction(target, data);
        }

        /// <summary/>
        public virtual System.Xml.XmlDeclaration CreateXmlDeclaration(System.String version, System.String encoding, System.String standalone)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateXmlDeclaration(version, encoding, standalone);
        }

        /// <summary/>
        public override System.Xml.XPath.XPathNavigator CreateNavigator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateNavigator();
        }

        /// <summary/>
        public virtual System.Xml.XmlNodeList GetElementsByTagName(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetElementsByTagName(name);
        }

        /// <summary/>
        public virtual System.Xml.XmlNodeList GetElementsByTagName(System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetElementsByTagName(localName, namespaceURI);
        }

        /// <summary/>
        public virtual System.Xml.XmlElement GetElementById(System.String elementId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetElementById(elementId);
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW ImportNode(System.Xml.XmlNode node, System.Boolean deep)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ImportNode(node, deep));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW CreateNode(System.Xml.XmlNodeType type, System.String prefix, System.String name, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CreateNode(type, prefix, name, namespaceURI));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW CreateNode(System.String nodeTypeString, System.String name, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CreateNode(nodeTypeString, name, namespaceURI));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW CreateNode(System.Xml.XmlNodeType type, System.String name, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CreateNode(type, name, namespaceURI));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW ReadNode(System.Xml.XmlReader reader)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ReadNode(reader));
        }

        /// <summary/>
        public virtual void Load(System.IO.Stream inStream)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Load(inStream);
        }

        /// <summary/>
        public virtual void Load(System.IO.TextReader txtReader)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Load(txtReader);
        }

        /// <summary/>
        public virtual void Load(System.Xml.XmlReader reader)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Load(reader);
        }

        /// <summary/>
        public virtual void LoadXml(System.String xml)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.LoadXml(xml);
        }

        /// <summary/>
        public virtual void Save(System.String filename)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Save(filename);
        }

        /// <summary/>
        public virtual void Save(System.IO.Stream outStream)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Save(outStream);
        }

        /// <summary/>
        public virtual void Save(System.IO.TextWriter writer)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Save(writer);
        }

        /// <summary/>
        public virtual void Save(System.Xml.XmlWriter w)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Save(w);
        }

        /// <summary/>
        public override void WriteTo(System.Xml.XmlWriter w)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteTo(w);
        }

        /// <summary/>
        public override void WriteContentTo(System.Xml.XmlWriter xw)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteContentTo(xw);
        }

        /// <summary/>
        public System.Xml.XmlAttribute CreateAttribute(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateAttribute(name);
        }

        /// <summary/>
        public virtual System.Xml.XmlCDataSection CreateCDataSection(System.String data)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateCDataSection(data);
        }

        /// <summary/>
        public virtual System.Xml.XmlComment CreateComment(System.String data)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateComment(data);
        }

        /// <summary/>
        public System.Xml.XmlElement CreateElement(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateElement(name);
        }

        /// <summary/>
        public virtual System.Xml.XmlText CreateTextNode(System.String text)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateTextNode(text);
        }

        /// <summary/>
        public virtual System.Xml.XmlSignificantWhitespace CreateSignificantWhitespace(System.String text)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateSignificantWhitespace(text);
        }

        /// <summary/>
        public virtual System.Xml.XmlWhitespace CreateWhitespace(System.String text)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateWhitespace(text);
        }

        /// <summary/>
        public System.Xml.XmlAttribute CreateAttribute(System.String qualifiedName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateAttribute(qualifiedName, namespaceURI);
        }

        /// <summary/>
        public System.Xml.XmlElement CreateElement(System.String qualifiedName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateElement(qualifiedName, namespaceURI);
        }

        /// <summary/>
        public virtual System.Xml.XmlAttribute CreateAttribute(System.String prefix, System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateAttribute(prefix, localName, namespaceURI);
        }

        /// <summary/>
        public virtual System.Xml.XmlElement CreateElement(System.String prefix, System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateElement(prefix, localName, namespaceURI);
        }

        /// <summary/>
        public virtual void Load(System.String filename)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Load(filename);
        }

        /// <summary/>
        public void Validate(System.Xml.Schema.ValidationEventHandler validationEventHandler)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Validate(validationEventHandler);
        }

        /// <summary/>
        public void Validate(System.Xml.Schema.ValidationEventHandler validationEventHandler, System.Xml.XmlNode nodeToValidate)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Validate(validationEventHandler, nodeToValidate);
        }

        /// <summary/>
        public event System.Xml.XmlNodeChangedEventHandler NodeInserting
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.NodeInserting += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.NodeInserting -= value; }
        }

        /// <summary/>
        public event System.Xml.XmlNodeChangedEventHandler NodeInserted
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.NodeInserted += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.NodeInserted -= value; }
        }

        /// <summary/>
        public event System.Xml.XmlNodeChangedEventHandler NodeRemoving
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.NodeRemoving += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.NodeRemoving -= value; }
        }

        /// <summary/>
        public event System.Xml.XmlNodeChangedEventHandler NodeRemoved
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.NodeRemoved += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.NodeRemoved -= value; }
        }

        /// <summary/>
        public event System.Xml.XmlNodeChangedEventHandler NodeChanging
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.NodeChanging += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.NodeChanging -= value; }
        }

        /// <summary/>
        public event System.Xml.XmlNodeChangedEventHandler NodeChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.NodeChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.NodeChanged -= value; }
        }

        /// <summary/>
        System.Object System.ICloneable.Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ICloneable)InnerObject).Clone();
        }

        /// <summary/>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Collections.IEnumerable)InnerObject).GetEnumerator();
        }

        /// <summary/>
        System.Xml.XPath.XPathNavigator System.Xml.XPath.IXPathNavigable.CreateNavigator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Xml.XPath.IXPathNavigable)InnerObject).CreateNavigator();
        }


    }

    /// <summary>Security Wrapper for Type: System.Xml.XmlNode</summary>
    [System.CLSCompliant(false)]
    public class XmlNodeSW : System.Object, System.ICloneable, System.Collections.IEnumerable, System.Xml.XPath.IXPathNavigable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.XmlNodeSW Wrap(System.Xml.XmlNode o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.XmlNodeSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Xml.XmlNode InnerObject
        {
            get { return innerObject as System.Xml.XmlNode; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal XmlNodeSW(System.Xml.XmlNode o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal XmlNodeSW(System.DayOfWeek day) { }

        /// <summary/>
        public virtual System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public virtual System.String Value
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Value; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Value = value; }
        }
        /// <summary/>
        public virtual System.Xml.XmlNodeType NodeType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.NodeType; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW ParentNode
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ParentNode); }
        }
        /// <summary/>
        public virtual System.Xml.XmlNodeList ChildNodes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ChildNodes; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW PreviousSibling
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.PreviousSibling); }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW NextSibling
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.NextSibling); }
        }
        /// <summary/>
        public virtual System.Xml.XmlAttributeCollection Attributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Attributes; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlDocumentSW OwnerDocument
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.XmlDocumentSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.OwnerDocument); }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW FirstChild
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.FirstChild); }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW LastChild
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.LastChild); }
        }
        /// <summary/>
        public virtual System.Boolean HasChildNodes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HasChildNodes; }
        }
        /// <summary/>
        public virtual System.String NamespaceURI
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.NamespaceURI; }
        }
        /// <summary/>
        public virtual System.String Prefix
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Prefix; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Prefix = value; }
        }
        /// <summary/>
        public virtual System.String LocalName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.LocalName; }
        }
        /// <summary/>
        public virtual System.Boolean IsReadOnly
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsReadOnly; }
        }
        /// <summary/>
        public virtual System.String InnerText
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.InnerText; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.InnerText = value; }
        }
        /// <summary/>
        public virtual System.String OuterXml
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.OuterXml; }
        }
        /// <summary/>
        public virtual System.String InnerXml
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.InnerXml; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.InnerXml = value; }
        }
        /// <summary/>
        public virtual System.Xml.Schema.IXmlSchemaInfo SchemaInfo
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.SchemaInfo; }
        }
        /// <summary/>
        public virtual System.String BaseURI
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.BaseURI; }
        }
        /// <summary/>
        public virtual System.Xml.XmlElement this[System.String name]
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject[name]; }
        }
        /// <summary/>
        public virtual System.Xml.XmlElement this[System.String localname, System.String ns]
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject[localname, ns]; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW InsertBefore(System.Xml.XmlNode newChild, System.Xml.XmlNode refChild)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.InsertBefore(newChild, refChild));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW InsertAfter(System.Xml.XmlNode newChild, System.Xml.XmlNode refChild)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.InsertAfter(newChild, refChild));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW ReplaceChild(System.Xml.XmlNode newChild, System.Xml.XmlNode oldChild)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ReplaceChild(newChild, oldChild));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW RemoveChild(System.Xml.XmlNode oldChild)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.RemoveChild(oldChild));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW PrependChild(System.Xml.XmlNode newChild)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.PrependChild(newChild));
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW AppendChild(System.Xml.XmlNode newChild)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.AppendChild(newChild));
        }

        /// <summary/>
        public virtual void Normalize()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Normalize();
        }

        /// <summary/>
        public virtual System.Boolean Supports(System.String feature, System.String version)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Supports(feature, version);
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Clone());
        }

        /// <summary/>
        public virtual void RemoveAll()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.RemoveAll();
        }

        /// <summary/>
        public virtual System.String GetNamespaceOfPrefix(System.String prefix)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetNamespaceOfPrefix(prefix);
        }

        /// <summary/>
        public virtual System.String GetPrefixOfNamespace(System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetPrefixOfNamespace(namespaceURI);
        }

        /// <summary/>
        public virtual System.Xml.XPath.XPathNavigator CreateNavigator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateNavigator();
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.XmlNodeSW SelectSingleNode(System.String xpath)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.SelectSingleNode(xpath));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.XmlNodeSW SelectSingleNode(System.String xpath, System.Xml.XmlNamespaceManager nsmgr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.SelectSingleNode(xpath, nsmgr));
        }

        /// <summary/>
        public System.Xml.XmlNodeList SelectNodes(System.String xpath)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.SelectNodes(xpath);
        }

        /// <summary/>
        public System.Xml.XmlNodeList SelectNodes(System.String xpath, System.Xml.XmlNamespaceManager nsmgr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.SelectNodes(xpath, nsmgr);
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlNodeSW CloneNode(System.Boolean deep)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlNodeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.CloneNode(deep));
        }

        /// <summary/>
        public System.Collections.IEnumerator GetEnumerator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetEnumerator();
        }

        /// <summary/>
        public virtual void WriteTo(System.Xml.XmlWriter w)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteTo(w);
        }

        /// <summary/>
        public virtual void WriteContentTo(System.Xml.XmlWriter w)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteContentTo(w);
        }

        /// <summary/>
        System.Object System.ICloneable.Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ICloneable)InnerObject).Clone();
        }

        /// <summary/>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Collections.IEnumerable)InnerObject).GetEnumerator();
        }

        /// <summary/>
        System.Xml.XPath.XPathNavigator System.Xml.XPath.IXPathNavigable.CreateNavigator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Xml.XPath.IXPathNavigable)InnerObject).CreateNavigator();
        }


    }

    /// <summary>Security Wrapper for Type: System.Data.DataSet</summary>
    [System.CLSCompliant(false)]
    public class DataSetSW : Microsoft.Test.Security.Wrappers.MarshalByValueComponentSW, System.ComponentModel.IComponent, System.IDisposable, System.IServiceProvider, System.ComponentModel.IListSource, System.Xml.Serialization.IXmlSerializable, System.ComponentModel.ISupportInitializeNotification, System.ComponentModel.ISupportInitialize, System.Runtime.Serialization.ISerializable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.DataSetSW Wrap(System.Data.DataSet o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.DataSetSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Data.DataSet InnerObject
        {
            get { return innerObject as System.Data.DataSet; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal DataSetSW(System.Data.DataSet o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal DataSetSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public DataSetSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.DataSet();
        }

        /// <summary/>
        public DataSetSW(System.String dataSetName)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Data.DataSet(dataSetName);
        }

        /// <summary/>
        protected DataSetSW(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        protected DataSetSW(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Boolean ConstructSchema)
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public System.Data.SerializationFormat RemotingFormat
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.RemotingFormat; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RemotingFormat = value; }
        }
        /// <summary/>
        public virtual System.Data.SchemaSerializationMode SchemaSerializationMode
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.SchemaSerializationMode; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.SchemaSerializationMode = value; }
        }
        /// <summary/>
        public System.Boolean CaseSensitive
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CaseSensitive; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CaseSensitive = value; }
        }
        /// <summary/>
        public System.Data.DataViewManager DefaultViewManager
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DefaultViewManager; }
        }
        /// <summary/>
        public System.Boolean EnforceConstraints
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.EnforceConstraints; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.EnforceConstraints = value; }
        }
        /// <summary/>
        public System.String DataSetName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DataSetName; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DataSetName = value; }
        }
        /// <summary/>
        public System.String Namespace
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Namespace; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Namespace = value; }
        }
        /// <summary/>
        public System.String Prefix
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Prefix; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Prefix = value; }
        }
        /// <summary/>
        public System.Data.PropertyCollection ExtendedProperties
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ExtendedProperties; }
        }
        /// <summary/>
        public System.Boolean HasErrors
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HasErrors; }
        }
        /// <summary/>
        public virtual System.Boolean IsInitialized
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsInitialized; }
        }
        /// <summary/>
        public System.Globalization.CultureInfo Locale
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Locale; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Locale = value; }
        }
        /// <summary/>
        public override System.ComponentModel.ISite Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Site = value; }
        }
        /// <summary/>
        public System.Data.DataRelationCollection Relations
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Relations; }
        }
        /// <summary/>
        public System.Data.DataTableCollection Tables
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Tables; }
        }
        /// <summary/>
        public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.GetObjectData(info, context);
        }

        /// <summary/>
        public void AcceptChanges()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.AcceptChanges();
        }

        /// <summary/>
        public virtual void BeginInit()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.BeginInit();
        }

        /// <summary/>
        public virtual void EndInit()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.EndInit();
        }

        /// <summary/>
        public void Clear()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Clear();
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.DataSetSW Clone()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DataSetSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Clone());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DataSetSW Copy()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DataSetSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Copy());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DataSetSW GetChanges()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DataSetSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetChanges());
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.DataSetSW GetChanges(System.Data.DataRowState rowStates)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.DataSetSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetChanges(rowStates));
        }

        /// <summary/>
        public System.String GetXml()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetXml();
        }

        /// <summary/>
        public System.String GetXmlSchema()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetXmlSchema();
        }

        /// <summary/>
        public System.Boolean HasChanges()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.HasChanges();
        }

        /// <summary/>
        public System.Boolean HasChanges(System.Data.DataRowState rowStates)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.HasChanges(rowStates);
        }

        /// <summary/>
        public void InferXmlSchema(System.Xml.XmlReader reader, System.String[] nsArray)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.InferXmlSchema(reader, nsArray);
        }

        /// <summary/>
        public void InferXmlSchema(System.IO.Stream stream, System.String[] nsArray)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.InferXmlSchema(stream, nsArray);
        }

        /// <summary/>
        public void InferXmlSchema(System.IO.TextReader reader, System.String[] nsArray)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.InferXmlSchema(reader, nsArray);
        }

        /// <summary/>
        public void InferXmlSchema(System.String fileName, System.String[] nsArray)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.InferXmlSchema(fileName, nsArray);
        }

        /// <summary/>
        public void ReadXmlSchema(System.Xml.XmlReader reader)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ReadXmlSchema(reader);
        }

        /// <summary/>
        public void ReadXmlSchema(System.IO.Stream stream)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ReadXmlSchema(stream);
        }

        /// <summary/>
        public void ReadXmlSchema(System.IO.TextReader reader)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ReadXmlSchema(reader);
        }

        /// <summary/>
        public void ReadXmlSchema(System.String fileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ReadXmlSchema(fileName);
        }

        /// <summary/>
        public void WriteXmlSchema(System.IO.Stream stream)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteXmlSchema(stream);
        }

        /// <summary/>
        public void WriteXmlSchema(System.IO.TextWriter writer)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteXmlSchema(writer);
        }

        /// <summary/>
        public void WriteXmlSchema(System.Xml.XmlWriter writer)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteXmlSchema(writer);
        }

        /// <summary/>
        public void WriteXmlSchema(System.String fileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteXmlSchema(fileName);
        }

        /// <summary/>
        public System.Data.XmlReadMode ReadXml(System.Xml.XmlReader reader)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadXml(reader);
        }

        /// <summary/>
        public System.Data.XmlReadMode ReadXml(System.IO.Stream stream)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadXml(stream);
        }

        /// <summary/>
        public System.Data.XmlReadMode ReadXml(System.IO.TextReader reader)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadXml(reader);
        }

        /// <summary/>
        public System.Data.XmlReadMode ReadXml(System.String fileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadXml(fileName);
        }

        /// <summary/>
        public System.Data.XmlReadMode ReadXml(System.Xml.XmlReader reader, System.Data.XmlReadMode mode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadXml(reader, mode);
        }

        /// <summary/>
        public System.Data.XmlReadMode ReadXml(System.IO.Stream stream, System.Data.XmlReadMode mode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadXml(stream, mode);
        }

        /// <summary/>
        public System.Data.XmlReadMode ReadXml(System.IO.TextReader reader, System.Data.XmlReadMode mode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadXml(reader, mode);
        }

        /// <summary/>
        public System.Data.XmlReadMode ReadXml(System.String fileName, System.Data.XmlReadMode mode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadXml(fileName, mode);
        }

        /// <summary/>
        public void WriteXml(System.IO.Stream stream)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteXml(stream);
        }

        /// <summary/>
        public void WriteXml(System.IO.TextWriter writer)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteXml(writer);
        }

        /// <summary/>
        public void WriteXml(System.Xml.XmlWriter writer)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteXml(writer);
        }

        /// <summary/>
        public void WriteXml(System.String fileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteXml(fileName);
        }

        /// <summary/>
        public void WriteXml(System.IO.Stream stream, System.Data.XmlWriteMode mode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteXml(stream, mode);
        }

        /// <summary/>
        public void WriteXml(System.IO.TextWriter writer, System.Data.XmlWriteMode mode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteXml(writer, mode);
        }

        /// <summary/>
        public void WriteXml(System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteXml(writer, mode);
        }

        /// <summary/>
        public void WriteXml(System.String fileName, System.Data.XmlWriteMode mode)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteXml(fileName, mode);
        }

        /// <summary/>
        public void Merge(System.Data.DataSet dataSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Merge(dataSet);
        }

        /// <summary/>
        public void Merge(System.Data.DataSet dataSet, System.Boolean preserveChanges)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Merge(dataSet, preserveChanges);
        }

        /// <summary/>
        public void Merge(System.Data.DataSet dataSet, System.Boolean preserveChanges, System.Data.MissingSchemaAction missingSchemaAction)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Merge(dataSet, preserveChanges, missingSchemaAction);
        }

        /// <summary/>
        public void Merge(System.Data.DataTable table)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Merge(table);
        }

        /// <summary/>
        public void Merge(System.Data.DataTable table, System.Boolean preserveChanges, System.Data.MissingSchemaAction missingSchemaAction)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Merge(table, preserveChanges, missingSchemaAction);
        }

        /// <summary/>
        public void Merge(System.Data.DataRow[] rows)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Merge(rows);
        }

        /// <summary/>
        public void Merge(System.Data.DataRow[] rows, System.Boolean preserveChanges, System.Data.MissingSchemaAction missingSchemaAction)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Merge(rows, preserveChanges, missingSchemaAction);
        }

        /// <summary/>
        public virtual void RejectChanges()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.RejectChanges();
        }

        /// <summary/>
        public virtual void Reset()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Reset();
        }

        /// <summary/>
        public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema(System.Xml.Schema.XmlSchemaSet schemaSet)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Data.DataSet.GetDataSetSchema(schemaSet);
        }

        /// <summary/>
        public virtual void Load(System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler, System.Data.DataTable[] tables)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Load(reader, loadOption, errorHandler, tables);
        }

        /// <summary/>
        public void Load(System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.DataTable[] tables)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Load(reader, loadOption, tables);
        }

        /// <summary/>
        public void Load(System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.String[] tables)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Load(reader, loadOption, tables);
        }

        /// <summary/>
        public System.Data.DataTableReader CreateDataReader()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateDataReader();
        }

        /// <summary/>
        public System.Data.DataTableReader CreateDataReader(System.Data.DataTable[] dataTables)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateDataReader(dataTables);
        }

        /// <summary/>
        public event System.Data.MergeFailedEventHandler MergeFailed
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MergeFailed += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MergeFailed -= value; }
        }

        /// <summary/>
        public virtual event System.EventHandler Initialized
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Initialized += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Initialized -= value; }
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        System.Object System.IServiceProvider.GetService(System.Type serviceType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.IServiceProvider)InnerObject).GetService(serviceType);
        }

        /// <summary/>
        System.Collections.IList System.ComponentModel.IListSource.GetList()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ComponentModel.IListSource)InnerObject).GetList();
        }

        /// <summary/>
        System.Boolean System.ComponentModel.IListSource.ContainsListCollection
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IListSource)InnerObject).ContainsListCollection; }
        }
        /// <summary/>
        System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Xml.Serialization.IXmlSerializable)InnerObject).GetSchema();
        }

        /// <summary/>
        void System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader reader)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Xml.Serialization.IXmlSerializable)InnerObject).ReadXml(reader);
        }

        /// <summary/>
        void System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter writer)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Xml.Serialization.IXmlSerializable)InnerObject).WriteXml(writer);
        }

        /// <summary/>
        System.Boolean System.ComponentModel.ISupportInitializeNotification.IsInitialized
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.ISupportInitializeNotification)InnerObject).IsInitialized; }
        }
        /// <summary/>
        void System.ComponentModel.ISupportInitialize.BeginInit()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.ComponentModel.ISupportInitialize)InnerObject).BeginInit();
        }

        /// <summary/>
        void System.ComponentModel.ISupportInitialize.EndInit()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.ComponentModel.ISupportInitialize)InnerObject).EndInit();
        }

        /// <summary/>
        void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Runtime.Serialization.ISerializable)InnerObject).GetObjectData(info, context);
        }


    }

    /// <summary>Security Wrapper for Type: System.ComponentModel.MarshalByValueComponent</summary>
    [System.CLSCompliant(false)]
    public class MarshalByValueComponentSW : System.Object, System.ComponentModel.IComponent, System.IDisposable, System.IServiceProvider
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.MarshalByValueComponentSW Wrap(System.ComponentModel.MarshalByValueComponent o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.MarshalByValueComponentSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.ComponentModel.MarshalByValueComponent InnerObject
        {
            get { return innerObject as System.ComponentModel.MarshalByValueComponent; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal MarshalByValueComponentSW(System.ComponentModel.MarshalByValueComponent o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal MarshalByValueComponentSW(System.DayOfWeek day) { }

        /// <summary/>
        public MarshalByValueComponentSW()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.ComponentModel.MarshalByValueComponent();
        }

        /// <summary/>
        public virtual System.ComponentModel.ISite Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Site = value; }
        }
        /// <summary/>
        public virtual System.ComponentModel.IContainer Container
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Container; }
        }
        /// <summary/>
        public virtual System.Boolean DesignMode
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DesignMode; }
        }
        /// <summary/>
        public virtual void Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Dispose();
        }

        /// <summary/>
        public virtual System.Object GetService(System.Type service)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetService(service);
        }

        /// <summary/>
        public override System.String ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ToString();
        }

        /// <summary/>
        public virtual event System.EventHandler Disposed
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Disposed += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Disposed -= value; }
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        System.Object System.IServiceProvider.GetService(System.Type serviceType)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.IServiceProvider)InnerObject).GetService(serviceType);
        }


    }

    /// <summary>Security Wrapper for Type: System.Xml.XmlNodeReader</summary>
    [System.CLSCompliant(false)]
    public class XmlNodeReaderSW : Microsoft.Test.Security.Wrappers.XmlReaderSW, System.IDisposable, System.Xml.IXmlNamespaceResolver
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.XmlNodeReaderSW Wrap(System.Xml.XmlNodeReader o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.XmlNodeReaderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Xml.XmlNodeReader InnerObject
        {
            get { return innerObject as System.Xml.XmlNodeReader; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal XmlNodeReaderSW(System.Xml.XmlNodeReader o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal XmlNodeReaderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public XmlNodeReaderSW(System.Xml.XmlNode node)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlNodeReader(node);
        }

        /// <summary/>
        public override System.Xml.XmlNodeType NodeType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.NodeType; }
        }
        /// <summary/>
        public override System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public override System.String LocalName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.LocalName; }
        }
        /// <summary/>
        public override System.String NamespaceURI
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.NamespaceURI; }
        }
        /// <summary/>
        public override System.String Prefix
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Prefix; }
        }
        /// <summary/>
        public override System.Boolean HasValue
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HasValue; }
        }
        /// <summary/>
        public override System.String Value
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Value; }
        }
        /// <summary/>
        public override System.Int32 Depth
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Depth; }
        }
        /// <summary/>
        public override System.String BaseURI
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.BaseURI; }
        }
        /// <summary/>
        public override System.Boolean CanResolveEntity
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanResolveEntity; }
        }
        /// <summary/>
        public override System.Boolean IsEmptyElement
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsEmptyElement; }
        }
        /// <summary/>
        public override System.Boolean IsDefault
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsDefault; }
        }
        /// <summary/>
        public override System.Xml.XmlSpace XmlSpace
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.XmlSpace; }
        }
        /// <summary/>
        public override System.String XmlLang
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.XmlLang; }
        }
        /// <summary/>
        public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.SchemaInfo; }
        }
        /// <summary/>
        public override System.Int32 AttributeCount
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AttributeCount; }
        }
        /// <summary/>
        public override System.Boolean EOF
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.EOF; }
        }
        /// <summary/>
        public override System.Xml.ReadState ReadState
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ReadState; }
        }
        /// <summary/>
        public override System.Boolean HasAttributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HasAttributes; }
        }
        /// <summary/>
        public override System.Xml.XmlNameTable NameTable
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.NameTable; }
        }
        /// <summary/>
        public override System.Boolean CanReadBinaryContent
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanReadBinaryContent; }
        }
        /// <summary/>
        public override System.String GetAttribute(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetAttribute(name);
        }

        /// <summary/>
        public override System.String GetAttribute(System.String name, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetAttribute(name, namespaceURI);
        }

        /// <summary/>
        public override System.String GetAttribute(System.Int32 attributeIndex)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetAttribute(attributeIndex);
        }

        /// <summary/>
        public override System.Boolean MoveToAttribute(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.MoveToAttribute(name);
        }

        /// <summary/>
        public override System.Boolean MoveToAttribute(System.String name, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.MoveToAttribute(name, namespaceURI);
        }

        /// <summary/>
        public override void MoveToAttribute(System.Int32 attributeIndex)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.MoveToAttribute(attributeIndex);
        }

        /// <summary/>
        public override System.Boolean MoveToFirstAttribute()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.MoveToFirstAttribute();
        }

        /// <summary/>
        public override System.Boolean MoveToNextAttribute()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.MoveToNextAttribute();
        }

        /// <summary/>
        public override System.Boolean MoveToElement()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.MoveToElement();
        }

        /// <summary/>
        public override System.Boolean Read()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Read();
        }

        /// <summary/>
        public override void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public override void Skip()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Skip();
        }

        /// <summary/>
        public override System.String ReadString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadString();
        }

        /// <summary/>
        public override System.String LookupNamespace(System.String prefix)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.LookupNamespace(prefix);
        }

        /// <summary/>
        public override void ResolveEntity()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResolveEntity();
        }

        /// <summary/>
        public override System.Boolean ReadAttributeValue()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadAttributeValue();
        }

        /// <summary/>
        public override System.Int32 ReadContentAsBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadContentAsBase64(buffer, index, count);
        }

        /// <summary/>
        public override System.Int32 ReadContentAsBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadContentAsBinHex(buffer, index, count);
        }

        /// <summary/>
        public override System.Int32 ReadElementContentAsBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsBase64(buffer, index, count);
        }

        /// <summary/>
        public override System.Int32 ReadElementContentAsBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsBinHex(buffer, index, count);
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        System.Collections.Generic.IDictionary<System.String, System.String> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope scope)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Xml.IXmlNamespaceResolver)InnerObject).GetNamespacesInScope(scope);
        }

        /// <summary/>
        System.String System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String prefix)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Xml.IXmlNamespaceResolver)InnerObject).LookupNamespace(prefix);
        }

        /// <summary/>
        System.String System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String namespaceName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Xml.IXmlNamespaceResolver)InnerObject).LookupPrefix(namespaceName);
        }


    }

    /// <summary>Security Wrapper for Type: System.Xml.XmlReader</summary>
    [System.CLSCompliant(false)]
    public class XmlReaderSW : System.Object, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.XmlReaderSW Wrap(System.Xml.XmlReader o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.XmlReaderSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Xml.XmlReader InnerObject
        {
            get { return innerObject as System.Xml.XmlReader; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal XmlReaderSW(System.Xml.XmlReader o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal XmlReaderSW(System.DayOfWeek day) { }

        /// <summary/>
        protected XmlReaderSW()
        {
        }

        /// <summary/>
        public virtual System.Xml.XmlReaderSettings Settings
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Settings; }
        }
        /// <summary/>
        public virtual System.Xml.XmlNodeType NodeType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.NodeType; }
        }
        /// <summary/>
        public virtual System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public virtual System.String LocalName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.LocalName; }
        }
        /// <summary/>
        public virtual System.String NamespaceURI
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.NamespaceURI; }
        }
        /// <summary/>
        public virtual System.String Prefix
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Prefix; }
        }
        /// <summary/>
        public virtual System.Boolean HasValue
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HasValue; }
        }
        /// <summary/>
        public virtual System.String Value
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Value; }
        }
        /// <summary/>
        public virtual System.Int32 Depth
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Depth; }
        }
        /// <summary/>
        public virtual System.String BaseURI
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.BaseURI; }
        }
        /// <summary/>
        public virtual System.Boolean IsEmptyElement
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsEmptyElement; }
        }
        /// <summary/>
        public virtual System.Boolean IsDefault
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsDefault; }
        }
        /// <summary/>
        public virtual System.Char QuoteChar
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.QuoteChar; }
        }
        /// <summary/>
        public virtual System.Xml.XmlSpace XmlSpace
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.XmlSpace; }
        }
        /// <summary/>
        public virtual System.String XmlLang
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.XmlLang; }
        }
        /// <summary/>
        public virtual System.Xml.Schema.IXmlSchemaInfo SchemaInfo
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.SchemaInfo; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.TypeSW ValueType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.TypeSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ValueType); }
        }
        /// <summary/>
        public virtual System.Int32 AttributeCount
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AttributeCount; }
        }
        /// <summary/>
        public virtual System.String this[System.Int32 i]
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject[i]; }
        }
        /// <summary/>
        public virtual System.String this[System.String name]
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject[name]; }
        }
        /// <summary/>
        public virtual System.String this[System.String name, System.String namespaceURI]
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject[name, namespaceURI]; }
        }
        /// <summary/>
        public virtual System.Boolean EOF
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.EOF; }
        }
        /// <summary/>
        public virtual System.Xml.ReadState ReadState
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ReadState; }
        }
        /// <summary/>
        public virtual System.Xml.XmlNameTable NameTable
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.NameTable; }
        }
        /// <summary/>
        public virtual System.Boolean CanResolveEntity
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanResolveEntity; }
        }
        /// <summary/>
        public virtual System.Boolean CanReadBinaryContent
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanReadBinaryContent; }
        }
        /// <summary/>
        public virtual System.Boolean CanReadValueChunk
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanReadValueChunk; }
        }
        /// <summary/>
        public virtual System.Boolean HasAttributes
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HasAttributes; }
        }
        /// <summary/>
        public virtual System.Object ReadContentAsObject()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadContentAsObject();
        }

        /// <summary/>
        public virtual System.Boolean ReadContentAsBoolean()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadContentAsBoolean();
        }

        /// <summary/>
        public virtual System.DateTime ReadContentAsDateTime()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadContentAsDateTime();
        }

        /// <summary/>
        public virtual System.Double ReadContentAsDouble()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadContentAsDouble();
        }

        /// <summary/>
        public virtual System.Single ReadContentAsFloat()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadContentAsFloat();
        }

        /// <summary/>
        public virtual System.Decimal ReadContentAsDecimal()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadContentAsDecimal();
        }

        /// <summary/>
        public virtual System.Int32 ReadContentAsInt()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadContentAsInt();
        }

        /// <summary/>
        public virtual System.Int64 ReadContentAsLong()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadContentAsLong();
        }

        /// <summary/>
        public virtual System.String ReadContentAsString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadContentAsString();
        }

        /// <summary/>
        public virtual System.Object ReadContentAs(System.Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadContentAs(returnType, namespaceResolver);
        }

        /// <summary/>
        public virtual System.Object ReadElementContentAsObject()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsObject();
        }

        /// <summary/>
        public virtual System.Object ReadElementContentAsObject(System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsObject(localName, namespaceURI);
        }

        /// <summary/>
        public virtual System.Boolean ReadElementContentAsBoolean()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsBoolean();
        }

        /// <summary/>
        public virtual System.Boolean ReadElementContentAsBoolean(System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsBoolean(localName, namespaceURI);
        }

        /// <summary/>
        public virtual System.DateTime ReadElementContentAsDateTime()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsDateTime();
        }

        /// <summary/>
        public virtual System.DateTime ReadElementContentAsDateTime(System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsDateTime(localName, namespaceURI);
        }

        /// <summary/>
        public virtual System.Double ReadElementContentAsDouble()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsDouble();
        }

        /// <summary/>
        public virtual System.Double ReadElementContentAsDouble(System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsDouble(localName, namespaceURI);
        }

        /// <summary/>
        public virtual System.Single ReadElementContentAsFloat()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsFloat();
        }

        /// <summary/>
        public virtual System.Single ReadElementContentAsFloat(System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsFloat(localName, namespaceURI);
        }

        /// <summary/>
        public virtual System.Decimal ReadElementContentAsDecimal()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsDecimal();
        }

        /// <summary/>
        public virtual System.Decimal ReadElementContentAsDecimal(System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsDecimal(localName, namespaceURI);
        }

        /// <summary/>
        public virtual System.Int32 ReadElementContentAsInt()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsInt();
        }

        /// <summary/>
        public virtual System.Int32 ReadElementContentAsInt(System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsInt(localName, namespaceURI);
        }

        /// <summary/>
        public virtual System.Int64 ReadElementContentAsLong()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsLong();
        }

        /// <summary/>
        public virtual System.Int64 ReadElementContentAsLong(System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsLong(localName, namespaceURI);
        }

        /// <summary/>
        public virtual System.String ReadElementContentAsString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsString();
        }

        /// <summary/>
        public virtual System.String ReadElementContentAsString(System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsString(localName, namespaceURI);
        }

        /// <summary/>
        public virtual System.Object ReadElementContentAs(System.Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAs(returnType, namespaceResolver);
        }

        /// <summary/>
        public virtual System.Object ReadElementContentAs(System.Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver, System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAs(returnType, namespaceResolver, localName, namespaceURI);
        }

        /// <summary/>
        public virtual System.Int32 ReadValueChunk(System.Char[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadValueChunk(buffer, index, count);
        }

        /// <summary/>
        public virtual System.Xml.XmlNodeType MoveToContent()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.MoveToContent();
        }

        /// <summary/>
        public virtual void ReadStartElement()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ReadStartElement();
        }

        /// <summary/>
        public virtual void ReadStartElement(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ReadStartElement(name);
        }

        /// <summary/>
        public virtual void ReadStartElement(System.String localname, System.String ns)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ReadStartElement(localname, ns);
        }

        /// <summary/>
        public virtual System.String ReadElementString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementString();
        }

        /// <summary/>
        public virtual System.String ReadElementString(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementString(name);
        }

        /// <summary/>
        public virtual System.String ReadElementString(System.String localname, System.String ns)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementString(localname, ns);
        }

        /// <summary/>
        public virtual void ReadEndElement()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ReadEndElement();
        }

        /// <summary/>
        public virtual System.Boolean IsStartElement()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsStartElement();
        }

        /// <summary/>
        public virtual System.Boolean IsStartElement(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsStartElement(name);
        }

        /// <summary/>
        public virtual System.Boolean IsStartElement(System.String localname, System.String ns)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.IsStartElement(localname, ns);
        }

        /// <summary/>
        public virtual System.Boolean ReadToFollowing(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadToFollowing(name);
        }

        /// <summary/>
        public virtual System.Boolean ReadToFollowing(System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadToFollowing(localName, namespaceURI);
        }

        /// <summary/>
        public virtual System.Boolean ReadToDescendant(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadToDescendant(name);
        }

        /// <summary/>
        public virtual System.Boolean ReadToDescendant(System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadToDescendant(localName, namespaceURI);
        }

        /// <summary/>
        public virtual System.Boolean ReadToNextSibling(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadToNextSibling(name);
        }

        /// <summary/>
        public virtual System.Boolean ReadToNextSibling(System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadToNextSibling(localName, namespaceURI);
        }

        /// <summary/>
        public virtual System.String ReadInnerXml()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadInnerXml();
        }

        /// <summary/>
        public virtual System.String ReadOuterXml()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadOuterXml();
        }

        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.XmlReaderSW ReadSubtree()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlReaderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ReadSubtree());
        }

        /// <summary/>
        public virtual System.String GetAttribute(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetAttribute(name);
        }

        /// <summary/>
        public virtual System.String GetAttribute(System.String name, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetAttribute(name, namespaceURI);
        }

        /// <summary/>
        public virtual System.String GetAttribute(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetAttribute(i);
        }

        /// <summary/>
        public virtual System.Boolean MoveToAttribute(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.MoveToAttribute(name);
        }

        /// <summary/>
        public virtual System.Boolean MoveToAttribute(System.String name, System.String ns)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.MoveToAttribute(name, ns);
        }

        /// <summary/>
        public virtual void MoveToAttribute(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.MoveToAttribute(i);
        }

        /// <summary/>
        public virtual System.Boolean MoveToFirstAttribute()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.MoveToFirstAttribute();
        }

        /// <summary/>
        public virtual System.Boolean MoveToNextAttribute()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.MoveToNextAttribute();
        }

        /// <summary/>
        public virtual System.Boolean MoveToElement()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.MoveToElement();
        }

        /// <summary/>
        public virtual System.Boolean ReadAttributeValue()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadAttributeValue();
        }

        /// <summary/>
        public virtual System.Boolean Read()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Read();
        }

        /// <summary/>
        public virtual void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public virtual void Skip()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Skip();
        }

        /// <summary/>
        public virtual System.String LookupNamespace(System.String prefix)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.LookupNamespace(prefix);
        }

        /// <summary/>
        public virtual void ResolveEntity()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResolveEntity();
        }

        /// <summary/>
        public virtual System.Int32 ReadContentAsBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadContentAsBase64(buffer, index, count);
        }

        /// <summary/>
        public virtual System.Int32 ReadElementContentAsBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsBase64(buffer, index, count);
        }

        /// <summary/>
        public virtual System.Int32 ReadContentAsBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadContentAsBinHex(buffer, index, count);
        }

        /// <summary/>
        public virtual System.Int32 ReadElementContentAsBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsBinHex(buffer, index, count);
        }

        /// <summary/>
        public virtual System.String ReadString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadString();
        }

        /// <summary/>
        public static System.Boolean IsName(System.String str)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Xml.XmlReader.IsName(str);
        }

        /// <summary/>
        public static System.Boolean IsNameToken(System.String str)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Xml.XmlReader.IsNameToken(str);
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlReaderSW Create(System.String inputUri)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlReaderSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlReader.Create(inputUri));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlReaderSW Create(System.String inputUri, System.Xml.XmlReaderSettings settings)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlReaderSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlReader.Create(inputUri, settings));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlReaderSW Create(System.String inputUri, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlReaderSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlReader.Create(inputUri, settings, inputContext));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlReaderSW Create(System.IO.Stream input)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlReaderSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlReader.Create(input));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlReaderSW Create(System.IO.Stream input, System.Xml.XmlReaderSettings settings)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlReaderSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlReader.Create(input, settings));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlReaderSW Create(System.IO.Stream input, System.Xml.XmlReaderSettings settings, System.String baseUri)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlReaderSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlReader.Create(input, settings, baseUri));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlReaderSW Create(System.IO.Stream input, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlReaderSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlReader.Create(input, settings, inputContext));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlReaderSW Create(System.IO.TextReader input)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlReaderSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlReader.Create(input));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlReaderSW Create(System.IO.TextReader input, System.Xml.XmlReaderSettings settings)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlReaderSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlReader.Create(input, settings));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlReaderSW Create(System.IO.TextReader input, System.Xml.XmlReaderSettings settings, System.String baseUri)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlReaderSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlReader.Create(input, settings, baseUri));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlReaderSW Create(System.IO.TextReader input, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlReaderSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlReader.Create(input, settings, inputContext));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlReaderSW Create(System.Xml.XmlReader reader, System.Xml.XmlReaderSettings settings)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlReaderSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlReader.Create(reader, settings));
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.Xml.XmlTextReader</summary>
    [System.CLSCompliant(false)]
    public class XmlTextReaderSW : Microsoft.Test.Security.Wrappers.XmlReaderSW, System.IDisposable, System.Xml.IXmlLineInfo, System.Xml.IXmlNamespaceResolver
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.XmlTextReaderSW Wrap(System.Xml.XmlTextReader o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.XmlTextReaderSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Xml.XmlTextReader InnerObject
        {
            get { return innerObject as System.Xml.XmlTextReader; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal XmlTextReaderSW(System.Xml.XmlTextReader o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal XmlTextReaderSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public XmlTextReaderSW(System.IO.Stream input)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlTextReader(input);
        }

        /// <summary/>
        public XmlTextReaderSW(System.IO.TextReader input)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlTextReader(input);
        }

        /// <summary/>
        protected XmlTextReaderSW()
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        protected XmlTextReaderSW(System.Xml.XmlNameTable nt)
            : base(System.DayOfWeek.Friday)
        {
        }

        /// <summary/>
        public XmlTextReaderSW(System.String url, System.IO.Stream input)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlTextReader(url, input);
        }

        /// <summary/>
        public XmlTextReaderSW(System.IO.Stream input, System.Xml.XmlNameTable nt)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlTextReader(input, nt);
        }

        /// <summary/>
        public XmlTextReaderSW(System.String url, System.IO.Stream input, System.Xml.XmlNameTable nt)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlTextReader(url, input, nt);
        }

        /// <summary/>
        public XmlTextReaderSW(System.String url, System.IO.TextReader input)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlTextReader(url, input);
        }

        /// <summary/>
        public XmlTextReaderSW(System.IO.TextReader input, System.Xml.XmlNameTable nt)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlTextReader(input, nt);
        }

        /// <summary/>
        public XmlTextReaderSW(System.String url, System.IO.TextReader input, System.Xml.XmlNameTable nt)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlTextReader(url, input, nt);
        }

        /// <summary/>
        public XmlTextReaderSW(System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlTextReader(xmlFragment, fragType, context);
        }

        /// <summary/>
        public XmlTextReaderSW(System.String xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlTextReader(xmlFragment, fragType, context);
        }

        /// <summary/>
        public XmlTextReaderSW(System.String url)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlTextReader(url);
        }

        /// <summary/>
        public XmlTextReaderSW(System.String url, System.Xml.XmlNameTable nt)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlTextReader(url, nt);
        }

        /// <summary/>
        public override System.Xml.XmlReaderSettings Settings
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Settings; }
        }
        /// <summary/>
        public override System.Xml.XmlNodeType NodeType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.NodeType; }
        }
        /// <summary/>
        public override System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
        }
        /// <summary/>
        public override System.String LocalName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.LocalName; }
        }
        /// <summary/>
        public override System.String NamespaceURI
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.NamespaceURI; }
        }
        /// <summary/>
        public override System.String Prefix
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Prefix; }
        }
        /// <summary/>
        public override System.Boolean HasValue
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HasValue; }
        }
        /// <summary/>
        public override System.String Value
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Value; }
        }
        /// <summary/>
        public override System.Int32 Depth
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Depth; }
        }
        /// <summary/>
        public override System.String BaseURI
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.BaseURI; }
        }
        /// <summary/>
        public override System.Boolean IsEmptyElement
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsEmptyElement; }
        }
        /// <summary/>
        public override System.Boolean IsDefault
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsDefault; }
        }
        /// <summary/>
        public override System.Char QuoteChar
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.QuoteChar; }
        }
        /// <summary/>
        public override System.Xml.XmlSpace XmlSpace
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.XmlSpace; }
        }
        /// <summary/>
        public override System.String XmlLang
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.XmlLang; }
        }
        /// <summary/>
        public override System.Int32 AttributeCount
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AttributeCount; }
        }
        /// <summary/>
        public override System.Boolean EOF
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.EOF; }
        }
        /// <summary/>
        public override System.Xml.ReadState ReadState
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ReadState; }
        }
        /// <summary/>
        public override System.Xml.XmlNameTable NameTable
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.NameTable; }
        }
        /// <summary/>
        public override System.Boolean CanResolveEntity
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanResolveEntity; }
        }
        /// <summary/>
        public override System.Boolean CanReadBinaryContent
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanReadBinaryContent; }
        }
        /// <summary/>
        public override System.Boolean CanReadValueChunk
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanReadValueChunk; }
        }
        /// <summary/>
        public virtual System.Int32 LineNumber
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.LineNumber; }
        }
        /// <summary/>
        public virtual System.Int32 LinePosition
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.LinePosition; }
        }
        /// <summary/>
        public System.Boolean Namespaces
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Namespaces; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Namespaces = value; }
        }
        /// <summary/>
        public System.Boolean Normalization
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Normalization; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Normalization = value; }
        }
        /// <summary/>
        public System.Text.Encoding Encoding
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Encoding; }
        }
        /// <summary/>
        public System.Xml.WhitespaceHandling WhitespaceHandling
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.WhitespaceHandling; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.WhitespaceHandling = value; }
        }
        /// <summary/>
        public System.Boolean ProhibitDtd
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ProhibitDtd; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ProhibitDtd = value; }
        }
        /// <summary/>
        public System.Xml.EntityHandling EntityHandling
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.EntityHandling; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.EntityHandling = value; }
        }
        /// <summary/>
        public System.Xml.XmlResolver XmlResolver
        {
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.XmlResolver = value; }
        }
        /// <summary/>
        public override System.String GetAttribute(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetAttribute(name);
        }

        /// <summary/>
        public override System.String GetAttribute(System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetAttribute(localName, namespaceURI);
        }

        /// <summary/>
        public override System.String GetAttribute(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetAttribute(i);
        }

        /// <summary/>
        public override System.Boolean MoveToAttribute(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.MoveToAttribute(name);
        }

        /// <summary/>
        public override System.Boolean MoveToAttribute(System.String localName, System.String namespaceURI)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.MoveToAttribute(localName, namespaceURI);
        }

        /// <summary/>
        public override void MoveToAttribute(System.Int32 i)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.MoveToAttribute(i);
        }

        /// <summary/>
        public override System.Boolean MoveToFirstAttribute()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.MoveToFirstAttribute();
        }

        /// <summary/>
        public override System.Boolean MoveToNextAttribute()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.MoveToNextAttribute();
        }

        /// <summary/>
        public override System.Boolean MoveToElement()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.MoveToElement();
        }

        /// <summary/>
        public override System.Boolean ReadAttributeValue()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadAttributeValue();
        }

        /// <summary/>
        public override System.Boolean Read()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Read();
        }

        /// <summary/>
        public override void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public override void Skip()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Skip();
        }

        /// <summary/>
        public override System.String LookupNamespace(System.String prefix)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.LookupNamespace(prefix);
        }

        /// <summary/>
        public override void ResolveEntity()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResolveEntity();
        }

        /// <summary/>
        public override System.Int32 ReadContentAsBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadContentAsBase64(buffer, index, count);
        }

        /// <summary/>
        public override System.Int32 ReadElementContentAsBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsBase64(buffer, index, count);
        }

        /// <summary/>
        public override System.Int32 ReadContentAsBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadContentAsBinHex(buffer, index, count);
        }

        /// <summary/>
        public override System.Int32 ReadElementContentAsBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadElementContentAsBinHex(buffer, index, count);
        }

        /// <summary/>
        public override System.String ReadString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadString();
        }

        /// <summary/>
        public virtual System.Boolean HasLineInfo()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.HasLineInfo();
        }

        /// <summary/>
        public System.Collections.Generic.IDictionary<System.String, System.String> GetNamespacesInScope(System.Xml.XmlNamespaceScope scope)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetNamespacesInScope(scope);
        }

        /// <summary/>
        public void ResetState()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResetState();
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.TextReaderSW GetRemainder()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.TextReaderSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetRemainder());
        }

        /// <summary/>
        public System.Int32 ReadChars(System.Char[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadChars(buffer, index, count);
        }

        /// <summary/>
        public System.Int32 ReadBase64(System.Byte[] array, System.Int32 offset, System.Int32 len)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadBase64(array, offset, len);
        }

        /// <summary/>
        public System.Int32 ReadBinHex(System.Byte[] array, System.Int32 offset, System.Int32 len)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ReadBinHex(array, offset, len);
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        System.Boolean System.Xml.IXmlLineInfo.HasLineInfo()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Xml.IXmlLineInfo)InnerObject).HasLineInfo();
        }

        /// <summary/>
        System.Int32 System.Xml.IXmlLineInfo.LineNumber
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Xml.IXmlLineInfo)InnerObject).LineNumber; }
        }
        /// <summary/>
        System.Int32 System.Xml.IXmlLineInfo.LinePosition
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Xml.IXmlLineInfo)InnerObject).LinePosition; }
        }
        /// <summary/>
        System.Collections.Generic.IDictionary<System.String, System.String> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope scope)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Xml.IXmlNamespaceResolver)InnerObject).GetNamespacesInScope(scope);
        }

        /// <summary/>
        System.String System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String prefix)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Xml.IXmlNamespaceResolver)InnerObject).LookupNamespace(prefix);
        }

        /// <summary/>
        System.String System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String namespaceName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Xml.IXmlNamespaceResolver)InnerObject).LookupPrefix(namespaceName);
        }


    }

    /// <summary>Security Wrapper for Type: System.Xml.XmlTextWriter</summary>
    [System.CLSCompliant(false)]
    public class XmlTextWriterSW : Microsoft.Test.Security.Wrappers.XmlWriterSW, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.XmlTextWriterSW Wrap(System.Xml.XmlTextWriter o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.XmlTextWriterSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Xml.XmlTextWriter InnerObject
        {
            get { return innerObject as System.Xml.XmlTextWriter; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal XmlTextWriterSW(System.Xml.XmlTextWriter o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal XmlTextWriterSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public XmlTextWriterSW(System.IO.Stream w, System.Text.Encoding encoding)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlTextWriter(w, encoding);
        }

        /// <summary/>
        public XmlTextWriterSW(System.String filename, System.Text.Encoding encoding)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlTextWriter(filename, encoding);
        }

        /// <summary/>
        public XmlTextWriterSW(System.IO.TextWriter w)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XmlTextWriter(w);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.StreamSW BaseStream
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.StreamSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.BaseStream); }
        }
        /// <summary/>
        public System.Boolean Namespaces
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Namespaces; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Namespaces = value; }
        }
        /// <summary/>
        public System.Xml.Formatting Formatting
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Formatting; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Formatting = value; }
        }
        /// <summary/>
        public System.Int32 Indentation
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Indentation; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Indentation = value; }
        }
        /// <summary/>
        public System.Char IndentChar
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IndentChar; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.IndentChar = value; }
        }
        /// <summary/>
        public System.Char QuoteChar
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.QuoteChar; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.QuoteChar = value; }
        }
        /// <summary/>
        public override System.Xml.WriteState WriteState
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.WriteState; }
        }
        /// <summary/>
        public override System.Xml.XmlSpace XmlSpace
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.XmlSpace; }
        }
        /// <summary/>
        public override System.String XmlLang
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.XmlLang; }
        }
        /// <summary/>
        public override void WriteStartDocument()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteStartDocument();
        }

        /// <summary/>
        public override void WriteStartDocument(System.Boolean standalone)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteStartDocument(standalone);
        }

        /// <summary/>
        public override void WriteEndDocument()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteEndDocument();
        }

        /// <summary/>
        public override void WriteDocType(System.String name, System.String pubid, System.String sysid, System.String subset)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteDocType(name, pubid, sysid, subset);
        }

        /// <summary/>
        public override void WriteStartElement(System.String prefix, System.String localName, System.String ns)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteStartElement(prefix, localName, ns);
        }

        /// <summary/>
        public override void WriteEndElement()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteEndElement();
        }

        /// <summary/>
        public override void WriteFullEndElement()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteFullEndElement();
        }

        /// <summary/>
        public override void WriteStartAttribute(System.String prefix, System.String localName, System.String ns)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteStartAttribute(prefix, localName, ns);
        }

        /// <summary/>
        public override void WriteEndAttribute()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteEndAttribute();
        }

        /// <summary/>
        public override void WriteCData(System.String text)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteCData(text);
        }

        /// <summary/>
        public override void WriteComment(System.String text)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteComment(text);
        }

        /// <summary/>
        public override void WriteProcessingInstruction(System.String name, System.String text)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteProcessingInstruction(name, text);
        }

        /// <summary/>
        public override void WriteEntityRef(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteEntityRef(name);
        }

        /// <summary/>
        public override void WriteCharEntity(System.Char ch)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteCharEntity(ch);
        }

        /// <summary/>
        public override void WriteWhitespace(System.String ws)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteWhitespace(ws);
        }

        /// <summary/>
        public override void WriteString(System.String text)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteString(text);
        }

        /// <summary/>
        public override void WriteSurrogateCharEntity(System.Char lowChar, System.Char highChar)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteSurrogateCharEntity(lowChar, highChar);
        }

        /// <summary/>
        public override void WriteChars(System.Char[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteChars(buffer, index, count);
        }

        /// <summary/>
        public override void WriteRaw(System.Char[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteRaw(buffer, index, count);
        }

        /// <summary/>
        public override void WriteRaw(System.String data)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteRaw(data);
        }

        /// <summary/>
        public override void WriteBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteBase64(buffer, index, count);
        }

        /// <summary/>
        public override void WriteBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteBinHex(buffer, index, count);
        }

        /// <summary/>
        public override void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public override void Flush()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Flush();
        }

        /// <summary/>
        public override void WriteName(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteName(name);
        }

        /// <summary/>
        public override void WriteQualifiedName(System.String localName, System.String ns)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteQualifiedName(localName, ns);
        }

        /// <summary/>
        public override System.String LookupPrefix(System.String ns)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.LookupPrefix(ns);
        }

        /// <summary/>
        public override void WriteNmToken(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteNmToken(name);
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.Xml.XmlWriter</summary>
    [System.CLSCompliant(false)]
    public class XmlWriterSW : System.Object, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.XmlWriterSW Wrap(System.Xml.XmlWriter o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.XmlWriterSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Xml.XmlWriter InnerObject
        {
            get { return innerObject as System.Xml.XmlWriter; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal XmlWriterSW(System.Xml.XmlWriter o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal XmlWriterSW(System.DayOfWeek day) { }

        /// <summary/>
        protected XmlWriterSW()
        {
        }

        /// <summary/>
        public virtual System.Xml.XmlWriterSettings Settings
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Settings; }
        }
        /// <summary/>
        public virtual System.Xml.WriteState WriteState
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.WriteState; }
        }
        /// <summary/>
        public virtual System.Xml.XmlSpace XmlSpace
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.XmlSpace; }
        }
        /// <summary/>
        public virtual System.String XmlLang
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.XmlLang; }
        }
        /// <summary/>
        public virtual void WriteStartDocument()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteStartDocument();
        }

        /// <summary/>
        public virtual void WriteStartDocument(System.Boolean standalone)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteStartDocument(standalone);
        }

        /// <summary/>
        public virtual void WriteEndDocument()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteEndDocument();
        }

        /// <summary/>
        public virtual void WriteDocType(System.String name, System.String pubid, System.String sysid, System.String subset)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteDocType(name, pubid, sysid, subset);
        }

        /// <summary/>
        public void WriteStartElement(System.String localName, System.String ns)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteStartElement(localName, ns);
        }

        /// <summary/>
        public virtual void WriteStartElement(System.String prefix, System.String localName, System.String ns)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteStartElement(prefix, localName, ns);
        }

        /// <summary/>
        public void WriteStartElement(System.String localName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteStartElement(localName);
        }

        /// <summary/>
        public virtual void WriteEndElement()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteEndElement();
        }

        /// <summary/>
        public virtual void WriteFullEndElement()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteFullEndElement();
        }

        /// <summary/>
        public void WriteAttributeString(System.String localName, System.String ns, System.String value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteAttributeString(localName, ns, value);
        }

        /// <summary/>
        public void WriteAttributeString(System.String localName, System.String value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteAttributeString(localName, value);
        }

        /// <summary/>
        public void WriteAttributeString(System.String prefix, System.String localName, System.String ns, System.String value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteAttributeString(prefix, localName, ns, value);
        }

        /// <summary/>
        public void WriteStartAttribute(System.String localName, System.String ns)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteStartAttribute(localName, ns);
        }

        /// <summary/>
        public virtual void WriteStartAttribute(System.String prefix, System.String localName, System.String ns)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteStartAttribute(prefix, localName, ns);
        }

        /// <summary/>
        public void WriteStartAttribute(System.String localName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteStartAttribute(localName);
        }

        /// <summary/>
        public virtual void WriteEndAttribute()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteEndAttribute();
        }

        /// <summary/>
        public virtual void WriteCData(System.String text)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteCData(text);
        }

        /// <summary/>
        public virtual void WriteComment(System.String text)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteComment(text);
        }

        /// <summary/>
        public virtual void WriteProcessingInstruction(System.String name, System.String text)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteProcessingInstruction(name, text);
        }

        /// <summary/>
        public virtual void WriteEntityRef(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteEntityRef(name);
        }

        /// <summary/>
        public virtual void WriteCharEntity(System.Char ch)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteCharEntity(ch);
        }

        /// <summary/>
        public virtual void WriteWhitespace(System.String ws)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteWhitespace(ws);
        }

        /// <summary/>
        public virtual void WriteString(System.String text)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteString(text);
        }

        /// <summary/>
        public virtual void WriteSurrogateCharEntity(System.Char lowChar, System.Char highChar)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteSurrogateCharEntity(lowChar, highChar);
        }

        /// <summary/>
        public virtual void WriteChars(System.Char[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteChars(buffer, index, count);
        }

        /// <summary/>
        public virtual void WriteRaw(System.Char[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteRaw(buffer, index, count);
        }

        /// <summary/>
        public virtual void WriteRaw(System.String data)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteRaw(data);
        }

        /// <summary/>
        public virtual void WriteBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteBase64(buffer, index, count);
        }

        /// <summary/>
        public virtual void WriteBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteBinHex(buffer, index, count);
        }

        /// <summary/>
        public virtual void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public virtual void Flush()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Flush();
        }

        /// <summary/>
        public virtual System.String LookupPrefix(System.String ns)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.LookupPrefix(ns);
        }

        /// <summary/>
        public virtual void WriteNmToken(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteNmToken(name);
        }

        /// <summary/>
        public virtual void WriteName(System.String name)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteName(name);
        }

        /// <summary/>
        public virtual void WriteQualifiedName(System.String localName, System.String ns)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteQualifiedName(localName, ns);
        }

        /// <summary/>
        public virtual void WriteValue(System.Object value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteValue(value);
        }

        /// <summary/>
        public virtual void WriteValue(System.String value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteValue(value);
        }

        /// <summary/>
        public virtual void WriteValue(System.Boolean value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteValue(value);
        }

        /// <summary/>
        public virtual void WriteValue(System.DateTime value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteValue(value);
        }

        /// <summary/>
        public virtual void WriteValue(System.Double value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteValue(value);
        }

        /// <summary/>
        public virtual void WriteValue(System.Single value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteValue(value);
        }

        /// <summary/>
        public virtual void WriteValue(System.Decimal value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteValue(value);
        }

        /// <summary/>
        public virtual void WriteValue(System.Int32 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteValue(value);
        }

        /// <summary/>
        public virtual void WriteValue(System.Int64 value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteValue(value);
        }

        /// <summary/>
        public virtual void WriteAttributes(System.Xml.XmlReader reader, System.Boolean defattr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteAttributes(reader, defattr);
        }

        /// <summary/>
        public virtual void WriteNode(System.Xml.XmlReader reader, System.Boolean defattr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteNode(reader, defattr);
        }

        /// <summary/>
        public virtual void WriteNode(System.Xml.XPath.XPathNavigator navigator, System.Boolean defattr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteNode(navigator, defattr);
        }

        /// <summary/>
        public void WriteElementString(System.String localName, System.String value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteElementString(localName, value);
        }

        /// <summary/>
        public void WriteElementString(System.String localName, System.String ns, System.String value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteElementString(localName, ns, value);
        }

        /// <summary/>
        public void WriteElementString(System.String prefix, System.String localName, System.String ns, System.String value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WriteElementString(prefix, localName, ns, value);
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlWriterSW Create(System.String outputFileName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlWriterSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlWriter.Create(outputFileName));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlWriterSW Create(System.String outputFileName, System.Xml.XmlWriterSettings settings)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlWriterSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlWriter.Create(outputFileName, settings));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlWriterSW Create(System.IO.Stream output)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlWriterSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlWriter.Create(output));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlWriterSW Create(System.IO.Stream output, System.Xml.XmlWriterSettings settings)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlWriterSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlWriter.Create(output, settings));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlWriterSW Create(System.IO.TextWriter output)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlWriterSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlWriter.Create(output));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlWriterSW Create(System.IO.TextWriter output, System.Xml.XmlWriterSettings settings)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlWriterSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlWriter.Create(output, settings));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlWriterSW Create(System.Text.StringBuilder output)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlWriterSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlWriter.Create(output));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlWriterSW Create(System.Text.StringBuilder output, System.Xml.XmlWriterSettings settings)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlWriterSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlWriter.Create(output, settings));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlWriterSW Create(System.Xml.XmlWriter output)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlWriterSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlWriter.Create(output));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.XmlWriterSW Create(System.Xml.XmlWriter output, System.Xml.XmlWriterSettings settings)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.XmlWriterSW)WrapperclassesSecurityWarehouse.Wrap(System.Xml.XmlWriter.Create(output, settings));
        }

        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.Xml.XPath.XPathDocument</summary>
    [System.CLSCompliant(false)]
    public class XPathDocumentSW : System.Object, System.Xml.XPath.IXPathNavigable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.XPathDocumentSW Wrap(System.Xml.XPath.XPathDocument o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.XPathDocumentSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Xml.XPath.XPathDocument InnerObject
        {
            get { return innerObject as System.Xml.XPath.XPathDocument; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal XPathDocumentSW(System.Xml.XPath.XPathDocument o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal XPathDocumentSW(System.DayOfWeek day) { }

        /// <summary/>
        public XPathDocumentSW(System.Xml.XmlReader reader)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XPath.XPathDocument(reader);
        }

        /// <summary/>
        public XPathDocumentSW(System.Xml.XmlReader reader, System.Xml.XmlSpace space)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XPath.XPathDocument(reader, space);
        }

        /// <summary/>
        public XPathDocumentSW(System.IO.TextReader textReader)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XPath.XPathDocument(textReader);
        }

        /// <summary/>
        public XPathDocumentSW(System.IO.Stream stream)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XPath.XPathDocument(stream);
        }

        /// <summary/>
        public XPathDocumentSW(System.String uri)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XPath.XPathDocument(uri);
        }

        /// <summary/>
        public XPathDocumentSW(System.String uri, System.Xml.XmlSpace space)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Xml.XPath.XPathDocument(uri, space);
        }

        /// <summary/>
        public virtual System.Xml.XPath.XPathNavigator CreateNavigator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateNavigator();
        }

        /// <summary/>
        System.Xml.XPath.XPathNavigator System.Xml.XPath.IXPathNavigable.CreateNavigator()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Xml.XPath.IXPathNavigable)InnerObject).CreateNavigator();
        }


    }

    /// <summary>Security Wrapper for Type: Microsoft.VisualBasic.Interaction</summary>
    [System.CLSCompliant(false)]
    public static class InteractionSW : System.Object
    {

        /// <summary/>
        public static System.Int32 Shell(System.String PathName, Microsoft.VisualBasic.AppWinStyle Style, System.Boolean Wait, System.Int32 Timeout)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.Interaction.Shell(PathName, Style, Wait, Timeout);
        }

        /// <summary/>
        public static void AppActivate(System.Int32 ProcessId)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.Interaction.AppActivate(ProcessId);
        }

        /// <summary/>
        public static void AppActivate(System.String Title)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.Interaction.AppActivate(Title);
        }

        /// <summary/>
        public static System.String Command()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.Interaction.Command();
        }

        /// <summary/>
        public static System.String Environ(System.Int32 Expression)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.Interaction.Environ(Expression);
        }

        /// <summary/>
        public static System.String Environ(System.String Expression)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.Interaction.Environ(Expression);
        }

        /// <summary/>
        public static void Beep()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.Interaction.Beep();
        }

        /// <summary/>
        public static System.String InputBox(System.String Prompt, System.String Title, System.String DefaultResponse, System.Int32 XPos, System.Int32 YPos)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.Interaction.InputBox(Prompt, Title, DefaultResponse, XPos, YPos);
        }

        /// <summary/>
        public static Microsoft.VisualBasic.MsgBoxResult MsgBox(System.Object Prompt, Microsoft.VisualBasic.MsgBoxStyle Buttons, System.Object Title)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.Interaction.MsgBox(Prompt, Buttons, Title);
        }

        /// <summary/>
        public static System.Object Choose(System.Double Index, System.Object[] Choice)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.Interaction.Choose(Index, Choice);
        }

        /// <summary/>
        public static System.Object IIf(System.Boolean Expression, System.Object TruePart, System.Object FalsePart)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.Interaction.IIf(Expression, TruePart, FalsePart);
        }

        /// <summary/>
        public static System.String Partition(System.Int64 Number, System.Int64 Start, System.Int64 Stop, System.Int64 Interval)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.Interaction.Partition(Number, Start, Stop, Interval);
        }

        /// <summary/>
        public static System.Object Switch(System.Object[] VarExpr)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.Interaction.Switch(VarExpr);
        }

        /// <summary/>
        public static void DeleteSetting(System.String AppName, System.String Section, System.String Key)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.Interaction.DeleteSetting(AppName, Section, Key);
        }

        /// <summary/>
        public static System.String[,] GetAllSettings(System.String AppName, System.String Section)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.Interaction.GetAllSettings(AppName, Section);
        }

        /// <summary/>
        public static System.String GetSetting(System.String AppName, System.String Section, System.String Key, System.String Default)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.Interaction.GetSetting(AppName, Section, Key, Default);
        }

        /// <summary/>
        public static void SaveSetting(System.String AppName, System.String Section, System.String Key, System.String Setting)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.Interaction.SaveSetting(AppName, Section, Key, Setting);
        }

        /// <summary/>
        public static System.Object CreateObject(System.String ProgId, System.String ServerName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.Interaction.CreateObject(ProgId, ServerName);
        }

        /// <summary/>
        public static System.Object GetObject(System.String PathName, System.String Class)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.Interaction.GetObject(PathName, Class);
        }

        /// <summary/>
        public static System.Object CallByName(System.Object ObjectRef, System.String ProcName, Microsoft.VisualBasic.CallType UseCallType, System.Object[] Args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.Interaction.CallByName(ObjectRef, ProcName, UseCallType, Args);
        }


    }

    /// <summary>Security Wrapper for Type: Microsoft.VisualBasic.FileSystem</summary>
    [System.CLSCompliant(false)]
    public static class FileSystemSW : System.Object
    {

        /// <summary/>
        public static void ChDir(System.String Path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.ChDir(Path);
        }

        /// <summary/>
        public static void ChDrive(System.Char Drive)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.ChDrive(Drive);
        }

        /// <summary/>
        public static void ChDrive(System.String Drive)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.ChDrive(Drive);
        }

        /// <summary/>
        public static System.String CurDir()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.CurDir();
        }

        /// <summary/>
        public static System.String CurDir(System.Char Drive)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.CurDir(Drive);
        }

        /// <summary/>
        public static System.String Dir()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.Dir();
        }

        /// <summary/>
        public static System.String Dir(System.String PathName, Microsoft.VisualBasic.FileAttribute Attributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.Dir(PathName, Attributes);
        }

        /// <summary/>
        public static void MkDir(System.String Path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.MkDir(Path);
        }

        /// <summary/>
        public static void RmDir(System.String Path)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.RmDir(Path);
        }

        /// <summary/>
        public static void FileCopy(System.String Source, System.String Destination)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileCopy(Source, Destination);
        }

        /// <summary/>
        public static System.DateTime FileDateTime(System.String PathName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.FileDateTime(PathName);
        }

        /// <summary/>
        public static System.Int64 FileLen(System.String PathName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.FileLen(PathName);
        }

        /// <summary/>
        public static Microsoft.VisualBasic.FileAttribute GetAttr(System.String PathName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.GetAttr(PathName);
        }

        /// <summary/>
        public static void Kill(System.String PathName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Kill(PathName);
        }

        /// <summary/>
        public static void SetAttr(System.String PathName, Microsoft.VisualBasic.FileAttribute Attributes)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.SetAttr(PathName, Attributes);
        }

        /// <summary/>
        public static void FileOpen(System.Int32 FileNumber, System.String FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access, Microsoft.VisualBasic.OpenShare Share, System.Int32 RecordLength)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileOpen(FileNumber, FileName, Mode, Access, Share, RecordLength);
        }

        /// <summary/>
        public static void FileClose(System.Int32[] FileNumbers)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileClose(FileNumbers);
        }

        /// <summary/>
        public static void FileGetObject(System.Int32 FileNumber, ref System.Object Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileGetObject(FileNumber, ref Value, RecordNumber);
        }

        /// <summary/>
        public static void FileGet(System.Int32 FileNumber, ref System.ValueType Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileGet(FileNumber, ref Value, RecordNumber);
        }

        /// <summary/>
        public static void FileGet(System.Int32 FileNumber, ref System.Array Value, System.Int64 RecordNumber, System.Boolean ArrayIsDynamic, System.Boolean StringIsFixedLength)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileGet(FileNumber, ref Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength);
        }

        /// <summary/>
        public static void FileGet(System.Int32 FileNumber, ref System.Boolean Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileGet(FileNumber, ref Value, RecordNumber);
        }

        /// <summary/>
        public static void FileGet(System.Int32 FileNumber, ref System.Byte Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileGet(FileNumber, ref Value, RecordNumber);
        }

        /// <summary/>
        public static void FileGet(System.Int32 FileNumber, ref System.Int16 Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileGet(FileNumber, ref Value, RecordNumber);
        }

        /// <summary/>
        public static void FileGet(System.Int32 FileNumber, ref System.Int32 Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileGet(FileNumber, ref Value, RecordNumber);
        }

        /// <summary/>
        public static void FileGet(System.Int32 FileNumber, ref System.Int64 Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileGet(FileNumber, ref Value, RecordNumber);
        }

        /// <summary/>
        public static void FileGet(System.Int32 FileNumber, ref System.Char Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileGet(FileNumber, ref Value, RecordNumber);
        }

        /// <summary/>
        public static void FileGet(System.Int32 FileNumber, ref System.Single Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileGet(FileNumber, ref Value, RecordNumber);
        }

        /// <summary/>
        public static void FileGet(System.Int32 FileNumber, ref System.Double Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileGet(FileNumber, ref Value, RecordNumber);
        }

        /// <summary/>
        public static void FileGet(System.Int32 FileNumber, ref System.Decimal Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileGet(FileNumber, ref Value, RecordNumber);
        }

        /// <summary/>
        public static void FileGet(System.Int32 FileNumber, ref System.String Value, System.Int64 RecordNumber, System.Boolean StringIsFixedLength)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileGet(FileNumber, ref Value, RecordNumber, StringIsFixedLength);
        }

        /// <summary/>
        public static void FileGet(System.Int32 FileNumber, ref System.DateTime Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileGet(FileNumber, ref Value, RecordNumber);
        }

        /// <summary/>
        public static void FilePutObject(System.Int32 FileNumber, System.Object Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FilePutObject(FileNumber, Value, RecordNumber);
        }

        /// <summary/>
        public static void FilePut(System.Int32 FileNumber, System.ValueType Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FilePut(FileNumber, Value, RecordNumber);
        }

        /// <summary/>
        public static void FilePut(System.Int32 FileNumber, System.Array Value, System.Int64 RecordNumber, System.Boolean ArrayIsDynamic, System.Boolean StringIsFixedLength)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FilePut(FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength);
        }

        /// <summary/>
        public static void FilePut(System.Int32 FileNumber, System.Boolean Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FilePut(FileNumber, Value, RecordNumber);
        }

        /// <summary/>
        public static void FilePut(System.Int32 FileNumber, System.Byte Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FilePut(FileNumber, Value, RecordNumber);
        }

        /// <summary/>
        public static void FilePut(System.Int32 FileNumber, System.Int16 Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FilePut(FileNumber, Value, RecordNumber);
        }

        /// <summary/>
        public static void FilePut(System.Int32 FileNumber, System.Int32 Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FilePut(FileNumber, Value, RecordNumber);
        }

        /// <summary/>
        public static void FilePut(System.Int32 FileNumber, System.Int64 Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FilePut(FileNumber, Value, RecordNumber);
        }

        /// <summary/>
        public static void FilePut(System.Int32 FileNumber, System.Char Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FilePut(FileNumber, Value, RecordNumber);
        }

        /// <summary/>
        public static void FilePut(System.Int32 FileNumber, System.Single Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FilePut(FileNumber, Value, RecordNumber);
        }

        /// <summary/>
        public static void FilePut(System.Int32 FileNumber, System.Double Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FilePut(FileNumber, Value, RecordNumber);
        }

        /// <summary/>
        public static void FilePut(System.Int32 FileNumber, System.Decimal Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FilePut(FileNumber, Value, RecordNumber);
        }

        /// <summary/>
        public static void FilePut(System.Int32 FileNumber, System.String Value, System.Int64 RecordNumber, System.Boolean StringIsFixedLength)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FilePut(FileNumber, Value, RecordNumber, StringIsFixedLength);
        }

        /// <summary/>
        public static void FilePut(System.Int32 FileNumber, System.DateTime Value, System.Int64 RecordNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FilePut(FileNumber, Value, RecordNumber);
        }

        /// <summary/>
        public static void Print(System.Int32 FileNumber, System.Object[] Output)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Print(FileNumber, Output);
        }

        /// <summary/>
        public static void PrintLine(System.Int32 FileNumber, System.Object[] Output)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.PrintLine(FileNumber, Output);
        }

        /// <summary/>
        public static void Input(System.Int32 FileNumber, ref System.Object Value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Input(FileNumber, ref Value);
        }

        /// <summary/>
        public static void Input(System.Int32 FileNumber, ref System.Boolean Value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Input(FileNumber, ref Value);
        }

        /// <summary/>
        public static void Input(System.Int32 FileNumber, ref System.Byte Value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Input(FileNumber, ref Value);
        }

        /// <summary/>
        public static void Input(System.Int32 FileNumber, ref System.Int16 Value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Input(FileNumber, ref Value);
        }

        /// <summary/>
        public static void Input(System.Int32 FileNumber, ref System.Int32 Value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Input(FileNumber, ref Value);
        }

        /// <summary/>
        public static void Input(System.Int32 FileNumber, ref System.Int64 Value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Input(FileNumber, ref Value);
        }

        /// <summary/>
        public static void Input(System.Int32 FileNumber, ref System.Char Value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Input(FileNumber, ref Value);
        }

        /// <summary/>
        public static void Input(System.Int32 FileNumber, ref System.Single Value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Input(FileNumber, ref Value);
        }

        /// <summary/>
        public static void Input(System.Int32 FileNumber, ref System.Double Value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Input(FileNumber, ref Value);
        }

        /// <summary/>
        public static void Input(System.Int32 FileNumber, ref System.Decimal Value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Input(FileNumber, ref Value);
        }

        /// <summary/>
        public static void Input(System.Int32 FileNumber, ref System.String Value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Input(FileNumber, ref Value);
        }

        /// <summary/>
        public static void Input(System.Int32 FileNumber, ref System.DateTime Value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Input(FileNumber, ref Value);
        }

        /// <summary/>
        public static void Write(System.Int32 FileNumber, System.Object[] Output)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Write(FileNumber, Output);
        }

        /// <summary/>
        public static void WriteLine(System.Int32 FileNumber, System.Object[] Output)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.WriteLine(FileNumber, Output);
        }

        /// <summary/>
        public static System.String InputString(System.Int32 FileNumber, System.Int32 CharCount)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.InputString(FileNumber, CharCount);
        }

        /// <summary/>
        public static System.String LineInput(System.Int32 FileNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.LineInput(FileNumber);
        }

        /// <summary/>
        public static void Lock(System.Int32 FileNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Lock(FileNumber);
        }

        /// <summary/>
        public static void Lock(System.Int32 FileNumber, System.Int64 Record)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Lock(FileNumber, Record);
        }

        /// <summary/>
        public static void Lock(System.Int32 FileNumber, System.Int64 FromRecord, System.Int64 ToRecord)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Lock(FileNumber, FromRecord, ToRecord);
        }

        /// <summary/>
        public static void Unlock(System.Int32 FileNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Unlock(FileNumber);
        }

        /// <summary/>
        public static void Unlock(System.Int32 FileNumber, System.Int64 Record)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Unlock(FileNumber, Record);
        }

        /// <summary/>
        public static void Unlock(System.Int32 FileNumber, System.Int64 FromRecord, System.Int64 ToRecord)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Unlock(FileNumber, FromRecord, ToRecord);
        }

        /// <summary/>
        public static void FileWidth(System.Int32 FileNumber, System.Int32 RecordWidth)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.FileWidth(FileNumber, RecordWidth);
        }

        /// <summary/>
        public static System.Int32 FreeFile()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.FreeFile();
        }

        /// <summary/>
        public static void Seek(System.Int32 FileNumber, System.Int64 Position)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Seek(FileNumber, Position);
        }

        /// <summary/>
        public static System.Int64 Seek(System.Int32 FileNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.Seek(FileNumber);
        }

        /// <summary/>
        public static System.Boolean EOF(System.Int32 FileNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.EOF(FileNumber);
        }

        /// <summary/>
        public static System.Int64 Loc(System.Int32 FileNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.Loc(FileNumber);
        }

        /// <summary/>
        public static System.Int64 LOF(System.Int32 FileNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.LOF(FileNumber);
        }

        /// <summary/>
        public static Microsoft.VisualBasic.TabInfo TAB()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.TAB();
        }

        /// <summary/>
        public static Microsoft.VisualBasic.TabInfo TAB(System.Int16 Column)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.TAB(Column);
        }

        /// <summary/>
        public static Microsoft.VisualBasic.SpcInfo SPC(System.Int16 Count)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.SPC(Count);
        }

        /// <summary/>
        public static Microsoft.VisualBasic.OpenMode FileAttr(System.Int32 FileNumber)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return Microsoft.VisualBasic.FileSystem.FileAttr(FileNumber);
        }

        /// <summary/>
        public static void Reset()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Reset();
        }

        /// <summary/>
        public static void Rename(System.String OldPath, System.String NewPath)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            Microsoft.VisualBasic.FileSystem.Rename(OldPath, NewPath);
        }


    }

    /// <summary>Security Wrapper for Type: System.ServiceProcess.ServiceController</summary>
    [System.CLSCompliant(false)]
    public class ServiceControllerSW : Microsoft.Test.Security.Wrappers.ComponentSW, System.ComponentModel.IComponent, System.IDisposable
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ServiceControllerSW Wrap(System.ServiceProcess.ServiceController o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ServiceControllerSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.ServiceProcess.ServiceController InnerObject
        {
            get { return innerObject as System.ServiceProcess.ServiceController; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ServiceControllerSW(System.ServiceProcess.ServiceController o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ServiceControllerSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public ServiceControllerSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.ServiceProcess.ServiceController();
        }

        /// <summary/>
        public ServiceControllerSW(System.String name)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.ServiceProcess.ServiceController(name);
        }

        /// <summary/>
        public ServiceControllerSW(System.String name, System.String machineName)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.ServiceProcess.ServiceController(name, machineName);
        }

        /// <summary/>
        public System.Boolean CanPauseAndContinue
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanPauseAndContinue; }
        }
        /// <summary/>
        public System.Boolean CanShutdown
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanShutdown; }
        }
        /// <summary/>
        public System.Boolean CanStop
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanStop; }
        }
        /// <summary/>
        public System.String DisplayName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DisplayName; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DisplayName = value; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ServiceControllerSW[] DependentServices
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ServiceControllerSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.DependentServices); }
        }
        /// <summary/>
        public System.String MachineName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MachineName; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MachineName = value; }
        }
        /// <summary/>
        public System.String ServiceName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ServiceName; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ServiceName = value; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ServiceControllerSW[] ServicesDependedOn
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ServiceControllerSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.ServicesDependedOn); }
        }
        /// <summary/>
        public System.Runtime.InteropServices.SafeHandle ServiceHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ServiceHandle; }
        }
        /// <summary/>
        public System.ServiceProcess.ServiceControllerStatus Status
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Status; }
        }
        /// <summary/>
        public System.ServiceProcess.ServiceType ServiceType
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ServiceType; }
        }
        /// <summary/>
        public void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ServiceControllerSW[] GetDevices()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ServiceControllerSW[])WrapperclassesSecurityWarehouse.Wrap(System.ServiceProcess.ServiceController.GetDevices());
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ServiceControllerSW[] GetDevices(System.String machineName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ServiceControllerSW[])WrapperclassesSecurityWarehouse.Wrap(System.ServiceProcess.ServiceController.GetDevices(machineName));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ServiceControllerSW[] GetServices()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ServiceControllerSW[])WrapperclassesSecurityWarehouse.Wrap(System.ServiceProcess.ServiceController.GetServices());
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ServiceControllerSW[] GetServices(System.String machineName)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ServiceControllerSW[])WrapperclassesSecurityWarehouse.Wrap(System.ServiceProcess.ServiceController.GetServices(machineName));
        }

        /// <summary/>
        public void Pause()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Pause();
        }

        /// <summary/>
        public void Continue()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Continue();
        }

        /// <summary/>
        public void ExecuteCommand(System.Int32 command)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ExecuteCommand(command);
        }

        /// <summary/>
        public void Refresh()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Refresh();
        }

        /// <summary/>
        public void Start()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Start();
        }

        /// <summary/>
        public void Start(System.String[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Start(args);
        }

        /// <summary/>
        public void Stop()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Stop();
        }

        /// <summary/>
        public void WaitForStatus(System.ServiceProcess.ServiceControllerStatus desiredStatus)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WaitForStatus(desiredStatus);
        }

        /// <summary/>
        public void WaitForStatus(System.ServiceProcess.ServiceControllerStatus desiredStatus, System.TimeSpan timeout)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.WaitForStatus(desiredStatus, timeout);
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }


    }

    /// <summary>Security Wrapper for Type: System.Windows.Forms.SendKeys</summary>
    [System.CLSCompliant(false)]
    public class SendKeysSW : System.Object
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.SendKeysSW Wrap(System.Windows.Forms.SendKeys o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.SendKeysSW(o);
        }
        internal object innerObject;

        /// <summary>Gets the wrapped instance</summary>
        public System.Windows.Forms.SendKeys InnerObject
        {
            get { return innerObject as System.Windows.Forms.SendKeys; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal SendKeysSW(System.Windows.Forms.SendKeys o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal SendKeysSW(System.DayOfWeek day) { }

        /// <summary/>
        public static void Send(System.String keys)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Windows.Forms.SendKeys.Send(keys);
        }

        /// <summary/>
        public static void SendWait(System.String keys)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Windows.Forms.SendKeys.SendWait(keys);
        }

        /// <summary/>
        public static void Flush()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            System.Windows.Forms.SendKeys.Flush();
        }


    }

    /// <summary>Security Wrapper for Type: System.Windows.Forms.Form</summary>
    [System.CLSCompliant(false)]
    public class FormSW : Microsoft.Test.Security.Wrappers.ContainerControlSW, System.ComponentModel.IComponent, System.IDisposable, System.Windows.Forms.IDropTarget, System.ComponentModel.ISynchronizeInvoke, System.Windows.Forms.IWin32Window, System.Windows.Forms.IBindableComponent, System.Windows.Forms.IContainerControl
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.FormSW Wrap(System.Windows.Forms.Form o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.FormSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Windows.Forms.Form InnerObject
        {
            get { return innerObject as System.Windows.Forms.Form; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal FormSW(System.Windows.Forms.Form o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal FormSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public FormSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Windows.Forms.Form();
        }

        /// <summary/>
        public System.Windows.Forms.IButtonControl AcceptButton
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AcceptButton; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AcceptButton = value; }
        }
        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.FormSW ActiveForm
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.FormSW)WrapperclassesSecurityWarehouse.Wrap(System.Windows.Forms.Form.ActiveForm); }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FormSW ActiveMdiChild
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.FormSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ActiveMdiChild); }
        }
        /// <summary/>
        public System.Boolean AllowTransparency
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AllowTransparency; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AllowTransparency = value; }
        }
        /// <summary/>
        public virtual System.Drawing.Size AutoScaleBaseSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AutoScaleBaseSize; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoScaleBaseSize = value; }
        }
        /// <summary/>
        public override System.Boolean AutoScroll
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AutoScroll; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoScroll = value; }
        }
        /// <summary/>
        public override System.Boolean AutoSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AutoSize; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoSize = value; }
        }
        /// <summary/>
        public System.Windows.Forms.AutoSizeMode AutoSizeMode
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AutoSizeMode; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoSizeMode = value; }
        }
        /// <summary/>
        public override System.Windows.Forms.AutoValidate AutoValidate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AutoValidate; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoValidate = value; }
        }
        /// <summary/>
        public override System.Drawing.Color BackColor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.BackColor; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.BackColor = value; }
        }
        /// <summary/>
        public System.Windows.Forms.FormBorderStyle FormBorderStyle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.FormBorderStyle; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.FormBorderStyle = value; }
        }
        /// <summary/>
        public System.Windows.Forms.IButtonControl CancelButton
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CancelButton; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CancelButton = value; }
        }
        /// <summary/>
        public new System.Drawing.Size ClientSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ClientSize; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ClientSize = value; }
        }
        /// <summary/>
        public System.Boolean ControlBox
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ControlBox; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ControlBox = value; }
        }
        /// <summary/>
        public System.Drawing.Rectangle DesktopBounds
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DesktopBounds; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DesktopBounds = value; }
        }
        /// <summary/>
        public System.Drawing.Point DesktopLocation
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DesktopLocation; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DesktopLocation = value; }
        }
        /// <summary/>
        public System.Windows.Forms.DialogResult DialogResult
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DialogResult; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DialogResult = value; }
        }
        /// <summary/>
        public System.Boolean HelpButton
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HelpButton; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.HelpButton = value; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.IconSW Icon
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.IconSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Icon); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Icon = value.InnerObject; }
        }
        /// <summary/>
        public System.Boolean IsMdiChild
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsMdiChild; }
        }
        /// <summary/>
        public System.Boolean IsMdiContainer
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsMdiContainer; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.IsMdiContainer = value; }
        }
        /// <summary/>
        public System.Boolean IsRestrictedWindow
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsRestrictedWindow; }
        }
        /// <summary/>
        public System.Boolean KeyPreview
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.KeyPreview; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.KeyPreview = value; }
        }
        /// <summary/>
        public new System.Drawing.Point Location
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Location; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Location = value; }
        }
        /// <summary/>
        public override System.Drawing.Size MaximumSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MaximumSize; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MaximumSize = value; }
        }
        /// <summary/>
        public System.Windows.Forms.MenuStrip MainMenuStrip
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MainMenuStrip; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MainMenuStrip = value; }
        }
        /// <summary/>
        public new System.Windows.Forms.Padding Margin
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Margin; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Margin = value; }
        }
        /// <summary/>
        public System.Windows.Forms.MainMenu Menu
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Menu; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Menu = value; }
        }
        /// <summary/>
        public override System.Drawing.Size MinimumSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MinimumSize; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MinimumSize = value; }
        }
        /// <summary/>
        public System.Boolean MaximizeBox
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MaximizeBox; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MaximizeBox = value; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FormSW[] MdiChildren
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.FormSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.MdiChildren); }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FormSW MdiParent
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.FormSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.MdiParent); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MdiParent = value.InnerObject; }
        }
        /// <summary/>
        public System.Windows.Forms.MainMenu MergedMenu
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MergedMenu; }
        }
        /// <summary/>
        public System.Boolean MinimizeBox
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MinimizeBox; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MinimizeBox = value; }
        }
        /// <summary/>
        public System.Boolean Modal
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Modal; }
        }
        /// <summary/>
        public System.Double Opacity
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Opacity; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Opacity = value; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FormSW[] OwnedForms
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.FormSW[])WrapperclassesSecurityWarehouse.Wrap(InnerObject.OwnedForms); }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FormSW Owner
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.FormSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Owner); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Owner = value.InnerObject; }
        }
        /// <summary/>
        public System.Drawing.Rectangle RestoreBounds
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.RestoreBounds; }
        }
        /// <summary/>
        public virtual System.Boolean RightToLeftLayout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.RightToLeftLayout; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RightToLeftLayout = value; }
        }
        /// <summary/>
        public System.Boolean ShowInTaskbar
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ShowInTaskbar; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ShowInTaskbar = value; }
        }
        /// <summary/>
        public System.Boolean ShowIcon
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ShowIcon; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ShowIcon = value; }
        }
        /// <summary/>
        public new System.Drawing.Size Size
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Size; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Size = value; }
        }
        /// <summary/>
        public System.Windows.Forms.SizeGripStyle SizeGripStyle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.SizeGripStyle; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.SizeGripStyle = value; }
        }
        /// <summary/>
        public System.Windows.Forms.FormStartPosition StartPosition
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.StartPosition; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.StartPosition = value; }
        }
        /// <summary/>
        public new System.Int32 TabIndex
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.TabIndex; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TabIndex = value; }
        }
        /// <summary/>
        public new System.Boolean TabStop
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.TabStop; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TabStop = value; }
        }
        /// <summary/>
        public override System.String Text
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Text; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Text = value; }
        }
        /// <summary/>
        public System.Boolean TopLevel
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.TopLevel; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TopLevel = value; }
        }
        /// <summary/>
        public System.Boolean TopMost
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.TopMost; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TopMost = value; }
        }
        /// <summary/>
        public System.Drawing.Color TransparencyKey
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.TransparencyKey; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TransparencyKey = value; }
        }
        /// <summary/>
        public System.Windows.Forms.FormWindowState WindowState
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.WindowState; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.WindowState = value; }
        }
        /// <summary/>
        public void RemoveOwnedForm(System.Windows.Forms.Form ownedForm)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.RemoveOwnedForm(ownedForm);
        }

        /// <summary/>
        public void SetDesktopBounds(System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetDesktopBounds(x, y, width, height);
        }

        /// <summary/>
        public void SetDesktopLocation(System.Int32 x, System.Int32 y)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetDesktopLocation(x, y);
        }

        /// <summary/>
        public void Show(System.Windows.Forms.IWin32Window owner)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Show(owner);
        }

        /// <summary/>
        public System.Windows.Forms.DialogResult ShowDialog()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ShowDialog();
        }

        /// <summary/>
        public System.Windows.Forms.DialogResult ShowDialog(System.Windows.Forms.IWin32Window owner)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ShowDialog(owner);
        }

        /// <summary/>
        public override System.String ToString()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ToString();
        }

        /// <summary/>
        public override System.Boolean ValidateChildren()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ValidateChildren();
        }

        /// <summary/>
        public override System.Boolean ValidateChildren(System.Windows.Forms.ValidationConstraints validationConstraints)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ValidateChildren(validationConstraints);
        }

        /// <summary/>
        public void Activate()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Activate();
        }

        /// <summary/>
        public void AddOwnedForm(System.Windows.Forms.Form ownedForm)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.AddOwnedForm(ownedForm);
        }

        /// <summary/>
        public void Close()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Close();
        }

        /// <summary/>
        public void LayoutMdi(System.Windows.Forms.MdiLayout value)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.LayoutMdi(value);
        }

        /// <summary/>
        public new event System.EventHandler AutoSizeChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoSizeChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoSizeChanged -= value; }
        }

        /// <summary/>
        public new event System.EventHandler AutoValidateChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoValidateChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoValidateChanged -= value; }
        }

        /// <summary/>
        public event System.ComponentModel.CancelEventHandler HelpButtonClicked
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.HelpButtonClicked += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.HelpButtonClicked -= value; }
        }

        /// <summary/>
        public event System.EventHandler MaximizedBoundsChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MaximizedBoundsChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MaximizedBoundsChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler MaximumSizeChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MaximumSizeChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MaximumSizeChanged -= value; }
        }

        /// <summary/>
        public new event System.EventHandler MarginChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MarginChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MarginChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler MinimumSizeChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MinimumSizeChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MinimumSizeChanged -= value; }
        }

        /// <summary/>
        public new event System.EventHandler TabIndexChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TabIndexChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TabIndexChanged -= value; }
        }

        /// <summary/>
        public new event System.EventHandler TabStopChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TabStopChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TabStopChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler Activated
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Activated += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Activated -= value; }
        }

        /// <summary/>
        public event System.ComponentModel.CancelEventHandler Closing
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Closing += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Closing -= value; }
        }

        /// <summary/>
        public event System.EventHandler Closed
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Closed += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Closed -= value; }
        }

        /// <summary/>
        public event System.EventHandler Deactivate
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Deactivate += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Deactivate -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.FormClosingEventHandler FormClosing
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.FormClosing += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.FormClosing -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.FormClosedEventHandler FormClosed
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.FormClosed += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.FormClosed -= value; }
        }

        /// <summary/>
        public event System.EventHandler Load
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Load += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Load -= value; }
        }

        /// <summary/>
        public event System.EventHandler MdiChildActivate
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MdiChildActivate += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MdiChildActivate -= value; }
        }

        /// <summary/>
        public event System.EventHandler MenuComplete
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MenuComplete += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MenuComplete -= value; }
        }

        /// <summary/>
        public event System.EventHandler MenuStart
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MenuStart += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MenuStart -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.InputLanguageChangedEventHandler InputLanguageChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.InputLanguageChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.InputLanguageChanged -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.InputLanguageChangingEventHandler InputLanguageChanging
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.InputLanguageChanging += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.InputLanguageChanging -= value; }
        }

        /// <summary/>
        public event System.EventHandler RightToLeftLayoutChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RightToLeftLayoutChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RightToLeftLayoutChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler Shown
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Shown += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Shown -= value; }
        }

        /// <summary/>
        public event System.EventHandler ResizeBegin
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ResizeBegin += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ResizeBegin -= value; }
        }

        /// <summary/>
        public event System.EventHandler ResizeEnd
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ResizeEnd += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ResizeEnd -= value; }
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        void System.Windows.Forms.IDropTarget.OnDragEnter(System.Windows.Forms.DragEventArgs e)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Windows.Forms.IDropTarget)InnerObject).OnDragEnter(e);
        }

        /// <summary/>
        void System.Windows.Forms.IDropTarget.OnDragLeave(System.EventArgs e)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Windows.Forms.IDropTarget)InnerObject).OnDragLeave(e);
        }

        /// <summary/>
        void System.Windows.Forms.IDropTarget.OnDragDrop(System.Windows.Forms.DragEventArgs e)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Windows.Forms.IDropTarget)InnerObject).OnDragDrop(e);
        }

        /// <summary/>
        void System.Windows.Forms.IDropTarget.OnDragOver(System.Windows.Forms.DragEventArgs e)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Windows.Forms.IDropTarget)InnerObject).OnDragOver(e);
        }

        /// <summary/>
        System.IAsyncResult System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate method, System.Object[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ComponentModel.ISynchronizeInvoke)InnerObject).BeginInvoke(method, args);
        }

        /// <summary/>
        System.Object System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult result)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ComponentModel.ISynchronizeInvoke)InnerObject).EndInvoke(result);
        }

        /// <summary/>
        System.Object System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate method, System.Object[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ComponentModel.ISynchronizeInvoke)InnerObject).Invoke(method, args);
        }

        /// <summary/>
        System.Boolean System.ComponentModel.ISynchronizeInvoke.InvokeRequired
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.ISynchronizeInvoke)InnerObject).InvokeRequired; }
        }
        /// <summary/>
        System.IntPtr System.Windows.Forms.IWin32Window.Handle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Windows.Forms.IWin32Window)InnerObject).Handle; }
        }
        /// <summary/>
        System.Windows.Forms.ControlBindingsCollection System.Windows.Forms.IBindableComponent.DataBindings
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Windows.Forms.IBindableComponent)InnerObject).DataBindings; }
        }
        /// <summary/>
        System.Windows.Forms.BindingContext System.Windows.Forms.IBindableComponent.BindingContext
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Windows.Forms.IBindableComponent)InnerObject).BindingContext; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Windows.Forms.IBindableComponent)InnerObject).BindingContext = value; }
        }
        /// <summary/>
        System.Boolean System.Windows.Forms.IContainerControl.ActivateControl(System.Windows.Forms.Control active)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Windows.Forms.IContainerControl)InnerObject).ActivateControl(active);
        }

        /// <summary/>
        System.Windows.Forms.Control System.Windows.Forms.IContainerControl.ActiveControl
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Windows.Forms.IContainerControl)InnerObject).ActiveControl; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Windows.Forms.IContainerControl)InnerObject).ActiveControl = value; }
        }

    }

    /// <summary>Security Wrapper for Type: System.Windows.Forms.ContainerControl</summary>
    [System.CLSCompliant(false)]
    public class ContainerControlSW : Microsoft.Test.Security.Wrappers.ScrollableControlSW, System.ComponentModel.IComponent, System.IDisposable, System.Windows.Forms.IDropTarget, System.ComponentModel.ISynchronizeInvoke, System.Windows.Forms.IWin32Window, System.Windows.Forms.IBindableComponent, System.Windows.Forms.IContainerControl
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ContainerControlSW Wrap(System.Windows.Forms.ContainerControl o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ContainerControlSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Windows.Forms.ContainerControl InnerObject
        {
            get { return innerObject as System.Windows.Forms.ContainerControl; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ContainerControlSW(System.Windows.Forms.ContainerControl o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ContainerControlSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public ContainerControlSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Windows.Forms.ContainerControl();
        }

        /// <summary/>
        public System.Drawing.SizeF AutoScaleDimensions
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AutoScaleDimensions; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoScaleDimensions = value; }
        }
        /// <summary/>
        public System.Windows.Forms.AutoScaleMode AutoScaleMode
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AutoScaleMode; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoScaleMode = value; }
        }
        /// <summary/>
        public virtual System.Windows.Forms.AutoValidate AutoValidate
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AutoValidate; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoValidate = value; }
        }
        /// <summary/>
        public override System.Windows.Forms.BindingContext BindingContext
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.BindingContext; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.BindingContext = value; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ControlSW ActiveControl
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ControlSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ActiveControl); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ActiveControl = value.InnerObject; }
        }
        /// <summary/>
        public System.Drawing.SizeF CurrentAutoScaleDimensions
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CurrentAutoScaleDimensions; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FormSW ParentForm
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.FormSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.ParentForm); }
        }
        /// <summary/>
        public void PerformAutoScale()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.PerformAutoScale();
        }

        /// <summary/>
        public System.Boolean Validate()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Validate();
        }

        /// <summary/>
        public System.Boolean Validate(System.Boolean checkAutoValidate)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Validate(checkAutoValidate);
        }

        /// <summary/>
        public virtual System.Boolean ValidateChildren()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ValidateChildren();
        }

        /// <summary/>
        public virtual System.Boolean ValidateChildren(System.Windows.Forms.ValidationConstraints validationConstraints)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.ValidateChildren(validationConstraints);
        }

        /// <summary/>
        public event System.EventHandler AutoValidateChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoValidateChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoValidateChanged -= value; }
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        void System.Windows.Forms.IDropTarget.OnDragEnter(System.Windows.Forms.DragEventArgs e)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Windows.Forms.IDropTarget)InnerObject).OnDragEnter(e);
        }

        /// <summary/>
        void System.Windows.Forms.IDropTarget.OnDragLeave(System.EventArgs e)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Windows.Forms.IDropTarget)InnerObject).OnDragLeave(e);
        }

        /// <summary/>
        void System.Windows.Forms.IDropTarget.OnDragDrop(System.Windows.Forms.DragEventArgs e)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Windows.Forms.IDropTarget)InnerObject).OnDragDrop(e);
        }

        /// <summary/>
        void System.Windows.Forms.IDropTarget.OnDragOver(System.Windows.Forms.DragEventArgs e)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Windows.Forms.IDropTarget)InnerObject).OnDragOver(e);
        }

        /// <summary/>
        System.IAsyncResult System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate method, System.Object[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ComponentModel.ISynchronizeInvoke)InnerObject).BeginInvoke(method, args);
        }

        /// <summary/>
        System.Object System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult result)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ComponentModel.ISynchronizeInvoke)InnerObject).EndInvoke(result);
        }

        /// <summary/>
        System.Object System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate method, System.Object[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ComponentModel.ISynchronizeInvoke)InnerObject).Invoke(method, args);
        }

        /// <summary/>
        System.Boolean System.ComponentModel.ISynchronizeInvoke.InvokeRequired
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.ISynchronizeInvoke)InnerObject).InvokeRequired; }
        }
        /// <summary/>
        System.IntPtr System.Windows.Forms.IWin32Window.Handle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Windows.Forms.IWin32Window)InnerObject).Handle; }
        }
        /// <summary/>
        System.Windows.Forms.ControlBindingsCollection System.Windows.Forms.IBindableComponent.DataBindings
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Windows.Forms.IBindableComponent)InnerObject).DataBindings; }
        }
        /// <summary/>
        System.Windows.Forms.BindingContext System.Windows.Forms.IBindableComponent.BindingContext
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Windows.Forms.IBindableComponent)InnerObject).BindingContext; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Windows.Forms.IBindableComponent)InnerObject).BindingContext = value; }
        }
        /// <summary/>
        System.Boolean System.Windows.Forms.IContainerControl.ActivateControl(System.Windows.Forms.Control active)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.Windows.Forms.IContainerControl)InnerObject).ActivateControl(active);
        }

        /// <summary/>
        System.Windows.Forms.Control System.Windows.Forms.IContainerControl.ActiveControl
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Windows.Forms.IContainerControl)InnerObject).ActiveControl; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Windows.Forms.IContainerControl)InnerObject).ActiveControl = value; }
        }

    }

    /// <summary>Security Wrapper for Type: System.Windows.Forms.ScrollableControl</summary>
    [System.CLSCompliant(false)]
    public class ScrollableControlSW : Microsoft.Test.Security.Wrappers.ControlSW, System.ComponentModel.IComponent, System.IDisposable, System.Windows.Forms.IDropTarget, System.ComponentModel.ISynchronizeInvoke, System.Windows.Forms.IWin32Window, System.Windows.Forms.IBindableComponent
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ScrollableControlSW Wrap(System.Windows.Forms.ScrollableControl o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ScrollableControlSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Windows.Forms.ScrollableControl InnerObject
        {
            get { return innerObject as System.Windows.Forms.ScrollableControl; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ScrollableControlSW(System.Windows.Forms.ScrollableControl o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ScrollableControlSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public ScrollableControlSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Windows.Forms.ScrollableControl();
        }

        /// <summary/>
        public virtual System.Boolean AutoScroll
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AutoScroll; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoScroll = value; }
        }
        /// <summary/>
        public System.Drawing.Size AutoScrollMargin
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AutoScrollMargin; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoScrollMargin = value; }
        }
        /// <summary/>
        public System.Drawing.Point AutoScrollPosition
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AutoScrollPosition; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoScrollPosition = value; }
        }
        /// <summary/>
        public System.Drawing.Size AutoScrollMinSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AutoScrollMinSize; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoScrollMinSize = value; }
        }
        /// <summary/>
        public override System.Drawing.Rectangle DisplayRectangle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DisplayRectangle; }
        }
        /// <summary/>
        public System.Windows.Forms.HScrollProperties HorizontalScroll
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HorizontalScroll; }
        }
        /// <summary/>
        public System.Windows.Forms.VScrollProperties VerticalScroll
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.VerticalScroll; }
        }
        /// <summary/>
        public System.Windows.Forms.ScrollableControl.DockPaddingEdges DockPadding
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DockPadding; }
        }
        /// <summary/>
        public void ScrollControlIntoView(System.Windows.Forms.Control activeControl)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ScrollControlIntoView(activeControl);
        }

        /// <summary/>
        public void SetAutoScrollMargin(System.Int32 x, System.Int32 y)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetAutoScrollMargin(x, y);
        }

        /// <summary/>
        public event System.Windows.Forms.ScrollEventHandler Scroll
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Scroll += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Scroll -= value; }
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        void System.Windows.Forms.IDropTarget.OnDragEnter(System.Windows.Forms.DragEventArgs e)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Windows.Forms.IDropTarget)InnerObject).OnDragEnter(e);
        }

        /// <summary/>
        void System.Windows.Forms.IDropTarget.OnDragLeave(System.EventArgs e)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Windows.Forms.IDropTarget)InnerObject).OnDragLeave(e);
        }

        /// <summary/>
        void System.Windows.Forms.IDropTarget.OnDragDrop(System.Windows.Forms.DragEventArgs e)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Windows.Forms.IDropTarget)InnerObject).OnDragDrop(e);
        }

        /// <summary/>
        void System.Windows.Forms.IDropTarget.OnDragOver(System.Windows.Forms.DragEventArgs e)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Windows.Forms.IDropTarget)InnerObject).OnDragOver(e);
        }

        /// <summary/>
        System.IAsyncResult System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate method, System.Object[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ComponentModel.ISynchronizeInvoke)InnerObject).BeginInvoke(method, args);
        }

        /// <summary/>
        System.Object System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult result)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ComponentModel.ISynchronizeInvoke)InnerObject).EndInvoke(result);
        }

        /// <summary/>
        System.Object System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate method, System.Object[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ComponentModel.ISynchronizeInvoke)InnerObject).Invoke(method, args);
        }

        /// <summary/>
        System.Boolean System.ComponentModel.ISynchronizeInvoke.InvokeRequired
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.ISynchronizeInvoke)InnerObject).InvokeRequired; }
        }
        /// <summary/>
        System.IntPtr System.Windows.Forms.IWin32Window.Handle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Windows.Forms.IWin32Window)InnerObject).Handle; }
        }
        /// <summary/>
        System.Windows.Forms.ControlBindingsCollection System.Windows.Forms.IBindableComponent.DataBindings
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Windows.Forms.IBindableComponent)InnerObject).DataBindings; }
        }
        /// <summary/>
        System.Windows.Forms.BindingContext System.Windows.Forms.IBindableComponent.BindingContext
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Windows.Forms.IBindableComponent)InnerObject).BindingContext; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Windows.Forms.IBindableComponent)InnerObject).BindingContext = value; }
        }

    }

    /// <summary>Security Wrapper for Type: System.Windows.Forms.Control</summary>
    [System.CLSCompliant(false)]
    public class ControlSW : Microsoft.Test.Security.Wrappers.ComponentSW, System.ComponentModel.IComponent, System.IDisposable, System.Windows.Forms.IDropTarget, System.ComponentModel.ISynchronizeInvoke, System.Windows.Forms.IWin32Window, System.Windows.Forms.IBindableComponent
    {

        /// <summary>Wraps an existing instance of an object</summary>
        /// <param name="o">Instance of the object to wrap</param>
        public static Microsoft.Test.Security.Wrappers.ControlSW Wrap(System.Windows.Forms.Control o)
        {
            if (o == null)
                return null;
            return new Microsoft.Test.Security.Wrappers.ControlSW(o);
        }
        /// <summary>Gets the wrapped instance</summary>
        public new System.Windows.Forms.Control InnerObject
        {
            get { return innerObject as System.Windows.Forms.Control; }
        }

        /// <summary>Creates a new wrapper from an existing instance of an object</summary>
        internal ControlSW(System.Windows.Forms.Control o)
            : base(o)
        {
            this.innerObject = o;
        }

        /// <summary/>
        internal ControlSW(System.DayOfWeek day) : base(System.DayOfWeek.Friday) { }

        /// <summary/>
        public ControlSW()
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Windows.Forms.Control();
        }

        /// <summary/>
        public ControlSW(System.String text)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Windows.Forms.Control(text);
        }

        /// <summary/>
        public ControlSW(System.String text, System.Int32 left, System.Int32 top, System.Int32 width, System.Int32 height)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Windows.Forms.Control(text, left, top, width, height);
        }

        /// <summary/>
        public ControlSW(System.Windows.Forms.Control parent, System.String text)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Windows.Forms.Control(parent, text);
        }

        /// <summary/>
        public ControlSW(System.Windows.Forms.Control parent, System.String text, System.Int32 left, System.Int32 top, System.Int32 width, System.Int32 height)
            : base(System.DayOfWeek.Friday)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            this.innerObject = new System.Windows.Forms.Control(parent, text, left, top, width, height);
        }

        /// <summary/>
        public System.Windows.Forms.AccessibleObject AccessibilityObject
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AccessibilityObject; }
        }
        /// <summary/>
        public System.String AccessibleDefaultActionDescription
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AccessibleDefaultActionDescription; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AccessibleDefaultActionDescription = value; }
        }
        /// <summary/>
        public System.String AccessibleDescription
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AccessibleDescription; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AccessibleDescription = value; }
        }
        /// <summary/>
        public System.String AccessibleName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AccessibleName; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AccessibleName = value; }
        }
        /// <summary/>
        public System.Windows.Forms.AccessibleRole AccessibleRole
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AccessibleRole; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AccessibleRole = value; }
        }
        /// <summary/>
        public virtual System.Boolean AllowDrop
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AllowDrop; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AllowDrop = value; }
        }
        /// <summary/>
        public virtual System.Windows.Forms.AnchorStyles Anchor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Anchor; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Anchor = value; }
        }
        /// <summary/>
        public virtual System.Boolean AutoSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AutoSize; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoSize = value; }
        }
        /// <summary/>
        public virtual System.Drawing.Point AutoScrollOffset
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.AutoScrollOffset; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoScrollOffset = value; }
        }
        /// <summary/>
        public virtual System.Windows.Forms.Layout.LayoutEngine LayoutEngine
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.LayoutEngine; }
        }
        /// <summary/>
        public virtual System.Drawing.Color BackColor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.BackColor; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.BackColor = value; }
        }
        /// <summary/>
        public virtual Microsoft.Test.Security.Wrappers.ImageSW BackgroundImage
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ImageSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.BackgroundImage); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.BackgroundImage = value.InnerObject; }
        }
        /// <summary/>
        public virtual System.Windows.Forms.ImageLayout BackgroundImageLayout
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.BackgroundImageLayout; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.BackgroundImageLayout = value; }
        }
        /// <summary/>
        public virtual System.Windows.Forms.BindingContext BindingContext
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.BindingContext; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.BindingContext = value; }
        }
        /// <summary/>
        public System.Int32 Bottom
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Bottom; }
        }
        /// <summary/>
        public virtual System.Drawing.Rectangle Bounds
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Bounds; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Bounds = value; }
        }
        /// <summary/>
        public System.Boolean CanFocus
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanFocus; }
        }
        /// <summary/>
        public System.Boolean CanSelect
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CanSelect; }
        }
        /// <summary/>
        public System.Boolean Capture
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Capture; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Capture = value; }
        }
        /// <summary/>
        public System.Boolean CausesValidation
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CausesValidation; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CausesValidation = value; }
        }
        /// <summary/>
        public static System.Boolean CheckForIllegalCrossThreadCalls
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls = value; }
        }
        /// <summary/>
        public System.Drawing.Rectangle ClientRectangle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ClientRectangle; }
        }
        /// <summary/>
        public System.Drawing.Size ClientSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ClientSize; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ClientSize = value; }
        }
        /// <summary/>
        public System.String CompanyName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.CompanyName; }
        }
        /// <summary/>
        public System.Boolean ContainsFocus
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ContainsFocus; }
        }
        /// <summary/>
        public virtual System.Windows.Forms.ContextMenu ContextMenu
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ContextMenu; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ContextMenu = value; }
        }
        /// <summary/>
        public virtual System.Windows.Forms.ContextMenuStrip ContextMenuStrip
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ContextMenuStrip; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ContextMenuStrip = value; }
        }
        /// <summary/>
        public System.Windows.Forms.Control.ControlCollection Controls
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Controls; }
        }
        /// <summary/>
        public System.Boolean Created
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Created; }
        }
        /// <summary/>
        public virtual System.Windows.Forms.Cursor Cursor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Cursor; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Cursor = value; }
        }
        /// <summary/>
        public virtual System.Windows.Forms.ControlBindingsCollection DataBindings
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DataBindings; }
        }
        /// <summary/>
        public static System.Drawing.Color DefaultBackColor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Windows.Forms.Control.DefaultBackColor; }
        }
        /// <summary/>
        public static System.Drawing.Font DefaultFont
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Windows.Forms.Control.DefaultFont; }
        }
        /// <summary/>
        public static System.Drawing.Color DefaultForeColor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Windows.Forms.Control.DefaultForeColor; }
        }
        /// <summary/>
        public virtual System.Drawing.Rectangle DisplayRectangle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.DisplayRectangle; }
        }
        /// <summary/>
        public System.Boolean IsDisposed
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsDisposed; }
        }
        /// <summary/>
        public System.Boolean Disposing
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Disposing; }
        }
        /// <summary/>
        public virtual System.Windows.Forms.DockStyle Dock
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Dock; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Dock = value; }
        }
        /// <summary/>
        public System.Boolean Enabled
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Enabled; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Enabled = value; }
        }
        /// <summary/>
        public virtual System.Boolean Focused
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Focused; }
        }
        /// <summary/>
        public virtual System.Drawing.Font Font
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Font; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Font = value; }
        }
        /// <summary/>
        public virtual System.Drawing.Color ForeColor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ForeColor; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ForeColor = value; }
        }
        /// <summary/>
        public virtual System.IntPtr Handle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Handle; }
        }
        /// <summary/>
        public System.Boolean HasChildren
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.HasChildren; }
        }
        /// <summary/>
        public System.Int32 Height
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Height; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Height = value; }
        }
        /// <summary/>
        public System.Boolean IsHandleCreated
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsHandleCreated; }
        }
        /// <summary/>
        public virtual System.Boolean InvokeRequired
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.InvokeRequired; }
        }
        /// <summary/>
        public System.Boolean IsAccessible
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsAccessible; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.IsAccessible = value; }
        }
        /// <summary/>
        public System.Boolean IsMirrored
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.IsMirrored; }
        }
        /// <summary/>
        public System.Int32 Left
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Left; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Left = value; }
        }
        /// <summary/>
        public System.Drawing.Point Location
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Location; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Location = value; }
        }
        /// <summary/>
        public System.Windows.Forms.Padding Margin
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Margin; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Margin = value; }
        }
        /// <summary/>
        public virtual System.Drawing.Size MaximumSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MaximumSize; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MaximumSize = value; }
        }
        /// <summary/>
        public virtual System.Drawing.Size MinimumSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.MinimumSize; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MinimumSize = value; }
        }
        /// <summary/>
        public static System.Windows.Forms.Keys ModifierKeys
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Windows.Forms.Control.ModifierKeys; }
        }
        /// <summary/>
        public static System.Windows.Forms.MouseButtons MouseButtons
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Windows.Forms.Control.MouseButtons; }
        }
        /// <summary/>
        public static System.Drawing.Point MousePosition
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return System.Windows.Forms.Control.MousePosition; }
        }
        /// <summary/>
        public System.String Name
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Name; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Name = value; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ControlSW Parent
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ControlSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.Parent); }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Parent = value.InnerObject; }
        }
        /// <summary/>
        public System.String ProductName
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ProductName; }
        }
        /// <summary/>
        public System.String ProductVersion
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ProductVersion; }
        }
        /// <summary/>
        public System.Boolean RecreatingHandle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.RecreatingHandle; }
        }
        /// <summary/>
        public System.Drawing.Region Region
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Region; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Region = value; }
        }
        /// <summary/>
        public System.Int32 Right
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Right; }
        }
        /// <summary/>
        public virtual System.Windows.Forms.RightToLeft RightToLeft
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.RightToLeft; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RightToLeft = value; }
        }
        /// <summary/>
        public override System.ComponentModel.ISite Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Site = value; }
        }
        /// <summary/>
        public System.Drawing.Size Size
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Size; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Size = value; }
        }
        /// <summary/>
        public System.Int32 TabIndex
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.TabIndex; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TabIndex = value; }
        }
        /// <summary/>
        public System.Boolean TabStop
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.TabStop; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TabStop = value; }
        }
        /// <summary/>
        public System.Object Tag
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Tag; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Tag = value; }
        }
        /// <summary/>
        public virtual System.String Text
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Text; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Text = value; }
        }
        /// <summary/>
        public System.Int32 Top
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Top; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Top = value; }
        }
        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ControlSW TopLevelControl
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return (Microsoft.Test.Security.Wrappers.ControlSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.TopLevelControl); }
        }
        /// <summary/>
        public System.Boolean UseWaitCursor
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.UseWaitCursor; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.UseWaitCursor = value; }
        }
        /// <summary/>
        public System.Boolean Visible
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Visible; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Visible = value; }
        }
        /// <summary/>
        public System.Int32 Width
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Width; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Width = value; }
        }
        /// <summary/>
        public System.Windows.Forms.IWindowTarget WindowTarget
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.WindowTarget; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.WindowTarget = value; }
        }
        /// <summary/>
        public System.Drawing.Size PreferredSize
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.PreferredSize; }
        }
        /// <summary/>
        public System.Windows.Forms.Padding Padding
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.Padding; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Padding = value; }
        }
        /// <summary/>
        public System.Windows.Forms.ImeMode ImeMode
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return InnerObject.ImeMode; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ImeMode = value; }
        }
        /// <summary/>
        public void ResetImeMode()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResetImeMode();
        }

        /// <summary/>
        public void PerformLayout()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.PerformLayout();
        }

        /// <summary/>
        public void PerformLayout(System.Windows.Forms.Control affectedControl, System.String affectedProperty)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.PerformLayout(affectedControl, affectedProperty);
        }

        /// <summary/>
        public System.Drawing.Point PointToClient(System.Drawing.Point p)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.PointToClient(p);
        }

        /// <summary/>
        public System.Drawing.Point PointToScreen(System.Drawing.Point p)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.PointToScreen(p);
        }

        /// <summary/>
        public virtual System.Boolean PreProcessMessage(ref System.Windows.Forms.Message msg)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.PreProcessMessage(ref msg);
        }

        /// <summary/>
        public System.Windows.Forms.PreProcessControlState PreProcessControlMessage(ref System.Windows.Forms.Message msg)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.PreProcessControlMessage(ref msg);
        }

        /// <summary/>
        public virtual void ResetBackColor()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResetBackColor();
        }

        /// <summary/>
        public virtual void ResetCursor()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResetCursor();
        }

        /// <summary/>
        public virtual void ResetFont()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResetFont();
        }

        /// <summary/>
        public virtual void ResetForeColor()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResetForeColor();
        }

        /// <summary/>
        public virtual void ResetRightToLeft()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResetRightToLeft();
        }

        /// <summary/>
        public System.Drawing.Rectangle RectangleToClient(System.Drawing.Rectangle r)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.RectangleToClient(r);
        }

        /// <summary/>
        public System.Drawing.Rectangle RectangleToScreen(System.Drawing.Rectangle r)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.RectangleToScreen(r);
        }

        /// <summary/>
        public virtual void Refresh()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Refresh();
        }

        /// <summary/>
        public virtual void ResetText()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResetText();
        }

        /// <summary/>
        public void ResumeLayout()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResumeLayout();
        }

        /// <summary/>
        public void ResumeLayout(System.Boolean performLayout)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResumeLayout(performLayout);
        }

        /// <summary/>
        public void Scale(System.Drawing.SizeF factor)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Scale(factor);
        }

        /// <summary/>
        public void Select()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Select();
        }

        /// <summary/>
        public System.Boolean SelectNextControl(System.Windows.Forms.Control ctl, System.Boolean forward, System.Boolean tabStopOnly, System.Boolean nested, System.Boolean wrap)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.SelectNextControl(ctl, forward, tabStopOnly, nested, wrap);
        }

        /// <summary/>
        public void SendToBack()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SendToBack();
        }

        /// <summary/>
        public void SetBounds(System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetBounds(x, y, width, height);
        }

        /// <summary/>
        public void SetBounds(System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height, System.Windows.Forms.BoundsSpecified specified)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SetBounds(x, y, width, height, specified);
        }

        /// <summary/>
        public void Show()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Show();
        }

        /// <summary/>
        public void SuspendLayout()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.SuspendLayout();
        }

        /// <summary/>
        public void Update()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Update();
        }

        /// <summary/>
        public System.IAsyncResult BeginInvoke(System.Delegate method)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginInvoke(method);
        }

        /// <summary/>
        public virtual System.IAsyncResult BeginInvoke(System.Delegate method, System.Object[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.BeginInvoke(method, args);
        }

        /// <summary/>
        public void BringToFront()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.BringToFront();
        }

        /// <summary/>
        public System.Boolean Contains(System.Windows.Forms.Control ctl)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Contains(ctl);
        }

        /// <summary/>
        public System.Drawing.Graphics CreateGraphics()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.CreateGraphics();
        }

        /// <summary/>
        public void CreateControl()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.CreateControl();
        }

        /// <summary/>
        public System.Windows.Forms.DragDropEffects DoDragDrop(System.Object data, System.Windows.Forms.DragDropEffects allowedEffects)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.DoDragDrop(data, allowedEffects);
        }

        /// <summary/>
        public void DrawToBitmap(System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.DrawToBitmap(bitmap, targetBounds);
        }

        /// <summary/>
        public virtual System.Object EndInvoke(System.IAsyncResult asyncResult)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.EndInvoke(asyncResult);
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.FormSW FindForm()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.FormSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.FindForm());
        }

        /// <summary/>
        public System.Boolean Focus()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Focus();
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ControlSW FromChildHandle(System.IntPtr handle)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ControlSW)WrapperclassesSecurityWarehouse.Wrap(System.Windows.Forms.Control.FromChildHandle(handle));
        }

        /// <summary/>
        public static Microsoft.Test.Security.Wrappers.ControlSW FromHandle(System.IntPtr handle)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ControlSW)WrapperclassesSecurityWarehouse.Wrap(System.Windows.Forms.Control.FromHandle(handle));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ControlSW GetChildAtPoint(System.Drawing.Point pt, System.Windows.Forms.GetChildAtPointSkip skipValue)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ControlSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetChildAtPoint(pt, skipValue));
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ControlSW GetChildAtPoint(System.Drawing.Point pt)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ControlSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetChildAtPoint(pt));
        }

        /// <summary/>
        public System.Windows.Forms.IContainerControl GetContainerControl()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetContainerControl();
        }

        /// <summary/>
        public Microsoft.Test.Security.Wrappers.ControlSW GetNextControl(System.Windows.Forms.Control ctl, System.Boolean forward)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return (Microsoft.Test.Security.Wrappers.ControlSW)WrapperclassesSecurityWarehouse.Wrap(InnerObject.GetNextControl(ctl, forward));
        }

        /// <summary/>
        public void Hide()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Hide();
        }

        /// <summary/>
        public void Invalidate(System.Drawing.Region region)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Invalidate(region);
        }

        /// <summary/>
        public void Invalidate(System.Drawing.Region region, System.Boolean invalidateChildren)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Invalidate(region, invalidateChildren);
        }

        /// <summary/>
        public void Invalidate()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Invalidate();
        }

        /// <summary/>
        public void Invalidate(System.Boolean invalidateChildren)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Invalidate(invalidateChildren);
        }

        /// <summary/>
        public void Invalidate(System.Drawing.Rectangle rc)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Invalidate(rc);
        }

        /// <summary/>
        public void Invalidate(System.Drawing.Rectangle rc, System.Boolean invalidateChildren)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.Invalidate(rc, invalidateChildren);
        }

        /// <summary/>
        public System.Object Invoke(System.Delegate method)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Invoke(method);
        }

        /// <summary/>
        public virtual System.Object Invoke(System.Delegate method, System.Object[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.Invoke(method, args);
        }

        /// <summary/>
        public static System.Boolean IsKeyLocked(System.Windows.Forms.Keys keyVal)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Windows.Forms.Control.IsKeyLocked(keyVal);
        }

        /// <summary/>
        public static System.Boolean IsMnemonic(System.Char charCode, System.String text)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return System.Windows.Forms.Control.IsMnemonic(charCode, text);
        }

        /// <summary/>
        public void ResetBindings()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            InnerObject.ResetBindings();
        }

        /// <summary/>
        public virtual System.Drawing.Size GetPreferredSize(System.Drawing.Size proposedSize)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return InnerObject.GetPreferredSize(proposedSize);
        }

        /// <summary/>
        public event System.EventHandler AutoSizeChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoSizeChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.AutoSizeChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler BackColorChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.BackColorChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.BackColorChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler BackgroundImageChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.BackgroundImageChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.BackgroundImageChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler BackgroundImageLayoutChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.BackgroundImageLayoutChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.BackgroundImageLayoutChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler BindingContextChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.BindingContextChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.BindingContextChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler CausesValidationChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CausesValidationChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CausesValidationChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler ClientSizeChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ClientSizeChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ClientSizeChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler ContextMenuChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ContextMenuChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ContextMenuChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler ContextMenuStripChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ContextMenuStripChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ContextMenuStripChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler CursorChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CursorChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.CursorChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler DockChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DockChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DockChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler EnabledChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.EnabledChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.EnabledChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler FontChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.FontChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.FontChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler ForeColorChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ForeColorChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ForeColorChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler LocationChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.LocationChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.LocationChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler MarginChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MarginChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MarginChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler RegionChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RegionChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RegionChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler RightToLeftChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RightToLeftChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.RightToLeftChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler SizeChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.SizeChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.SizeChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler TabIndexChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TabIndexChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TabIndexChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler TabStopChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TabStopChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TabStopChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler TextChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TextChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.TextChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler VisibleChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.VisibleChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.VisibleChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler Click
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Click += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Click -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.ControlEventHandler ControlAdded
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ControlAdded += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ControlAdded -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.ControlEventHandler ControlRemoved
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ControlRemoved += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ControlRemoved -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.DragEventHandler DragDrop
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DragDrop += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DragDrop -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.DragEventHandler DragEnter
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DragEnter += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DragEnter -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.DragEventHandler DragOver
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DragOver += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DragOver -= value; }
        }

        /// <summary/>
        public event System.EventHandler DragLeave
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DragLeave += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DragLeave -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.GiveFeedback += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.GiveFeedback -= value; }
        }

        /// <summary/>
        public event System.EventHandler HandleCreated
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.HandleCreated += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.HandleCreated -= value; }
        }

        /// <summary/>
        public event System.EventHandler HandleDestroyed
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.HandleDestroyed += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.HandleDestroyed -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.HelpEventHandler HelpRequested
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.HelpRequested += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.HelpRequested -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.InvalidateEventHandler Invalidated
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Invalidated += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Invalidated -= value; }
        }

        /// <summary/>
        public event System.EventHandler PaddingChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.PaddingChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.PaddingChanged -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.PaintEventHandler Paint
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Paint += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Paint -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.QueryContinueDrag += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.QueryContinueDrag -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.QueryAccessibilityHelpEventHandler QueryAccessibilityHelp
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.QueryAccessibilityHelp += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.QueryAccessibilityHelp -= value; }
        }

        /// <summary/>
        public event System.EventHandler DoubleClick
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DoubleClick += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.DoubleClick -= value; }
        }

        /// <summary/>
        public event System.EventHandler Enter
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Enter += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Enter -= value; }
        }

        /// <summary/>
        public event System.EventHandler GotFocus
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.GotFocus += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.GotFocus -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.KeyEventHandler KeyDown
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.KeyDown += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.KeyDown -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.KeyPressEventHandler KeyPress
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.KeyPress += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.KeyPress -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.KeyEventHandler KeyUp
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.KeyUp += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.KeyUp -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.LayoutEventHandler Layout
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Layout += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Layout -= value; }
        }

        /// <summary/>
        public event System.EventHandler Leave
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Leave += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Leave -= value; }
        }

        /// <summary/>
        public event System.EventHandler LostFocus
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.LostFocus += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.LostFocus -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.MouseEventHandler MouseClick
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseClick += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseClick -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.MouseEventHandler MouseDoubleClick
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseDoubleClick += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseDoubleClick -= value; }
        }

        /// <summary/>
        public event System.EventHandler MouseCaptureChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseCaptureChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseCaptureChanged -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.MouseEventHandler MouseDown
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseDown += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseDown -= value; }
        }

        /// <summary/>
        public event System.EventHandler MouseEnter
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseEnter += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseEnter -= value; }
        }

        /// <summary/>
        public event System.EventHandler MouseLeave
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseLeave += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseLeave -= value; }
        }

        /// <summary/>
        public event System.EventHandler MouseHover
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseHover += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseHover -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.MouseEventHandler MouseMove
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseMove += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseMove -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.MouseEventHandler MouseUp
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseUp += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseUp -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.MouseEventHandler MouseWheel
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseWheel += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.MouseWheel -= value; }
        }

        /// <summary/>
        public event System.EventHandler Move
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Move += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Move -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.PreviewKeyDownEventHandler PreviewKeyDown
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.PreviewKeyDown += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.PreviewKeyDown -= value; }
        }

        /// <summary/>
        public event System.EventHandler Resize
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Resize += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Resize -= value; }
        }

        /// <summary/>
        public event System.Windows.Forms.UICuesEventHandler ChangeUICues
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ChangeUICues += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ChangeUICues -= value; }
        }

        /// <summary/>
        public event System.EventHandler StyleChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.StyleChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.StyleChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler SystemColorsChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.SystemColorsChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.SystemColorsChanged -= value; }
        }

        /// <summary/>
        public event System.ComponentModel.CancelEventHandler Validating
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Validating += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Validating -= value; }
        }

        /// <summary/>
        public event System.EventHandler Validated
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Validated += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.Validated -= value; }
        }

        /// <summary/>
        public event System.EventHandler ParentChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ParentChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ParentChanged -= value; }
        }

        /// <summary/>
        public event System.EventHandler ImeModeChanged
        {
            add { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ImeModeChanged += value; }
            remove { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); InnerObject.ImeModeChanged -= value; }
        }

        /// <summary/>
        System.ComponentModel.ISite System.ComponentModel.IComponent.Site
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.IComponent)InnerObject).Site; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.ComponentModel.IComponent)InnerObject).Site = value; }
        }
        /// <summary/>
        void System.IDisposable.Dispose()
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.IDisposable)InnerObject).Dispose();
        }

        /// <summary/>
        void System.Windows.Forms.IDropTarget.OnDragEnter(System.Windows.Forms.DragEventArgs e)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Windows.Forms.IDropTarget)InnerObject).OnDragEnter(e);
        }

        /// <summary/>
        void System.Windows.Forms.IDropTarget.OnDragLeave(System.EventArgs e)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Windows.Forms.IDropTarget)InnerObject).OnDragLeave(e);
        }

        /// <summary/>
        void System.Windows.Forms.IDropTarget.OnDragDrop(System.Windows.Forms.DragEventArgs e)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Windows.Forms.IDropTarget)InnerObject).OnDragDrop(e);
        }

        /// <summary/>
        void System.Windows.Forms.IDropTarget.OnDragOver(System.Windows.Forms.DragEventArgs e)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            ((System.Windows.Forms.IDropTarget)InnerObject).OnDragOver(e);
        }

        /// <summary/>
        System.IAsyncResult System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate method, System.Object[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ComponentModel.ISynchronizeInvoke)InnerObject).BeginInvoke(method, args);
        }

        /// <summary/>
        System.Object System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult result)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ComponentModel.ISynchronizeInvoke)InnerObject).EndInvoke(result);
        }

        /// <summary/>
        System.Object System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate method, System.Object[] args)
        {
            new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert();
            return ((System.ComponentModel.ISynchronizeInvoke)InnerObject).Invoke(method, args);
        }

        /// <summary/>
        System.Boolean System.ComponentModel.ISynchronizeInvoke.InvokeRequired
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.ComponentModel.ISynchronizeInvoke)InnerObject).InvokeRequired; }
        }
        /// <summary/>
        System.IntPtr System.Windows.Forms.IWin32Window.Handle
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Windows.Forms.IWin32Window)InnerObject).Handle; }
        }
        /// <summary/>
        System.Windows.Forms.ControlBindingsCollection System.Windows.Forms.IBindableComponent.DataBindings
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Windows.Forms.IBindableComponent)InnerObject).DataBindings; }
        }
        /// <summary/>
        System.Windows.Forms.BindingContext System.Windows.Forms.IBindableComponent.BindingContext
        {
            get { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); return ((System.Windows.Forms.IBindableComponent)InnerObject).BindingContext; }
            set { new System.Security.PermissionSet(System.Security.Permissions.PermissionState.Unrestricted).Assert(); ((System.Windows.Forms.IBindableComponent)InnerObject).BindingContext = value; }
        }

    }

}
